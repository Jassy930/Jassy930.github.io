<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode Contest No.15 Biweekly</title>
    <url>/2019/12/15/leetcode-contest-No15-biweekly/</url>
    <content><![CDATA[<h2 id="Contest-No-15-Biweekly"><a href="#Contest-No-15-Biweekly" class="headerlink" title="Contest No.15 Biweekly"></a>Contest No.15 Biweekly</h2><p>通过：4/4  排名：43 / 797  0:46:11  1WA</p>
<h3 id="No-5126-有序数组中出现次数超过25-的元素"><a href="#No-5126-有序数组中出现次数超过25-的元素" class="headerlink" title="No.5126 有序数组中出现次数超过25%的元素"></a>No.5126 <a href="https://leetcode-cn.com/problems/element-appearing-more-than-25-in-sorted-array/" target="_blank" rel="noopener">有序数组中出现次数超过25%的元素</a></h3><blockquote>
<p>给你一个非递减的 有序 整数数组，已知这个数组中恰好有一个整数，它的出现次数超过数组元素总数的 25%。<br>请你找到并返回这个整数</p>
<p>示例：</p>
<blockquote>
<p>输入：arr = [1,2,2,6,6,6,6,7,10]<br>输出：6</p>
</blockquote>
<p>提示：</p>
<blockquote>
<ul>
<li>1 &lt;= arr.length &lt;= 10^4</li>
<li>0 &lt;= arr[i] &lt;= 10^5</li>
</ul>
</blockquote>
</blockquote>
<p>我很认真地按照题目意思去做的。。。后来翻看别人的答案恍然大悟，其实就是求众数，可以用<code>collections.Counter()</code> 加上 <code>most_common</code>就可以了</p>
<p>时间复杂度：$O(n)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSpecialInteger</span><span class="params">(self, arr: List[int])</span> -&gt; int:</span></span><br><span class="line">        a = len(arr)//<span class="number">4</span></span><br><span class="line">        ln = <span class="number">9999999999</span></span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> arr:</span><br><span class="line">            <span class="keyword">if</span> ln == num:</span><br><span class="line">                n+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ln = num</span><br><span class="line">                n = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> n&gt;a:</span><br><span class="line">                <span class="keyword">return</span> ln</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSpecialInteger</span><span class="params">(self, arr: List[int])</span> -&gt; int:</span></span><br><span class="line">        c = collections.Counter(arr)</span><br><span class="line">        <span class="keyword">return</span> c.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="No-5127-删除被覆盖区间"><a href="#No-5127-删除被覆盖区间" class="headerlink" title="No.5127 删除被覆盖区间"></a>No.5127 <a href="https://leetcode-cn.com/problems/remove-covered-intervals/" target="_blank" rel="noopener">删除被覆盖区间</a></h3><blockquote>
<p>给你一个区间列表，请你删除列表中被其他区间所覆盖的区间。</p>
<p>只有当 c &lt;= a 且 b &lt;= d 时，我们才认为区间 [a,b) 被区间 [c,d) 覆盖。</p>
<p>在完成所有删除操作后，请你返回列表中剩余区间的数目。</p>
<p>示例：</p>
<blockquote>
<p>输入：intervals = [[1,4],[3,6],[2,8]]<br>输出：2<br>解释：区间 [3,6] 被区间 [2,8] 覆盖，所以它被删除了。</p>
</blockquote>
<p>提示：​​​​​​</p>
<blockquote>
<ul>
<li>1 &lt;= intervals.length &lt;= 1000</li>
<li>0 &lt;= intervals[i][0] &lt; intervals[i][1] &lt;= 10^5</li>
<li>对于所有的 i != j：intervals[i] != intervals[j]</li>
</ul>
</blockquote>
</blockquote>
<p>将所有区间按照左侧从小到大进行排序，排序后只需要按照顺序判断相邻的两个是否会被覆盖，如果有被覆盖的关系，删除被覆盖的区间，不移动，继续判断当前位置两个区间。如果两个区间没有覆盖关系，向右侧移动直到末尾即可。</p>
<p>时间复杂度：$O(nlogn+n)$<br>排序 $nlogn$ 遍历 $n$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeCoveredIntervals</span><span class="params">(self, intervals: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        intervals.sort()</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;len(intervals)<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">if</span> intervals[i][<span class="number">0</span>]&lt;=intervals[i+<span class="number">1</span>][<span class="number">0</span>] <span class="keyword">and</span> intervals[i][<span class="number">1</span>]&gt;=intervals[i+<span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                intervals.pop(i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> intervals[i][<span class="number">0</span>]&gt;=intervals[i+<span class="number">1</span>][<span class="number">0</span>] <span class="keyword">and</span> intervals[i][<span class="number">1</span>]&lt;=intervals[i+<span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                intervals.pop(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span></span><br></pre></td></tr></table></figure>


<h3 id="No-5123-字母组合迭代器"><a href="#No-5123-字母组合迭代器" class="headerlink" title="No.5123 字母组合迭代器"></a>No.5123 <a href="https://leetcode-cn.com/problems/iterator-for-combination/" target="_blank" rel="noopener">字母组合迭代器</a></h3><blockquote>
<p>请你设计一个迭代器类，包括以下内容：</p>
<p>一个构造函数，输入参数包括：一个 有序且字符唯一 的字符串 characters（该字符串只包含小写英文字母）和一个数字 combinationLength 。<br>函数 next() ，按 字典序 返回长度为 combinationLength 的下一个字母组合。<br>函数 hasNext() ，只有存在长度为 combinationLength 的下一个字母组合时，才返回 True；否则，返回 False。</p>
<p>示例：</p>
<blockquote>
<p>CombinationIterator iterator = new CombinationIterator(“abc”, 2); // 创建迭代器 iterator</p>
<p>iterator.next(); // 返回 “ab”<br>iterator.hasNext(); // 返回 true<br>iterator.next(); // 返回 “ac”<br>iterator.hasNext(); // 返回 true<br>iterator.next(); // 返回 “bc”<br>iterator.hasNext(); // 返回 false</p>
</blockquote>
<p>提示：</p>
<blockquote>
<ul>
<li>1 &lt;= combinationLength &lt;= characters.length &lt;= 15</li>
<li>每组测试数据最多包含 10^4 次函数调用。</li>
<li>题目保证每次调用函数 next 时都存在下一个字母组合。</li>
</ul>
</blockquote>
</blockquote>
<p>这道题我偷懒了，用了python自带的itertools，但是发现偷懒的结果是自己用的不熟悉，所以还需要查，最后做这道题也没有变快。。。。itertools有四种排列组合的方式，还是蛮常用的，这道题是组合，用next获得迭代器下一个值返回，顺便自己记一下返回了多少个判断是否结束。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CombinationIterator</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, characters: str, combinationLength: int)</span>:</span></span><br><span class="line">        cc = characters</span><br><span class="line">        ll = combinationLength</span><br><span class="line">        self.gen = itertools.combinations(characters, combinationLength)</span><br><span class="line">        self.l = math.factorial(len(cc))//math.factorial(len(cc)-ll)//math.factorial(ll)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        self.l-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(next(self.gen))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.l&gt;<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>所以出于良心的不安，我又写了下面这版：维护一个cur数组，用来代表下一个需要输出的每一个元素位置。存一个last数组，用来存储最后一种状态，反向遍历cur，只要不是最后一种状态就+1，就可以遍历所有可能性了。除此之外为了单独判断最后一种状态，将last数组的第一个数字加1，这样通过cur数组的第一个数字就可以判断是否已经遍历完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CombinationIterator</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, characters: str, combinationLength: int)</span>:</span></span><br><span class="line">        self.cc = characters</span><br><span class="line">        self.ll = combinationLength</span><br><span class="line">        self.cur = list(range(self.ll))</span><br><span class="line">        self.last = list(range(len(self.cc) - self.ll,len(self.cc)))</span><br><span class="line">        self.last[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        a = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.cur:</span><br><span class="line">            a+=self.cc[i]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.ll)[::<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">if</span> self.cur[i] != self.last[i]:</span><br><span class="line">                self.cur[i] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(i+<span class="number">1</span>,len(self.cur)):</span><br><span class="line">                    self.cur[k] = self.cur[k<span class="number">-1</span>]+<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.cur[<span class="number">0</span>] &lt;= len(self.cc) - self.ll</span><br></pre></td></tr></table></figure>


<h3 id="No-5129-下降路径最小和-II"><a href="#No-5129-下降路径最小和-II" class="headerlink" title="No.5129 下降路径最小和  II"></a>No.5129 <a href="https://leetcode-cn.com/problems/minimum-falling-path-sum-ii/" target="_blank" rel="noopener">下降路径最小和  II</a></h3><blockquote>
<p>给你一个整数方阵 arr ，定义「非零偏移下降路径」为：从 arr 数组中的每一行选择一个数字，且按顺序选出来的数字中，相邻数字不在原数组的同一列。<br>请你返回非零偏移下降路径数字和的最小值。</p>
<p>示例 1：</p>
<blockquote>
<p>输入：arr = [[1,2,3],[4,5,6],[7,8,9]]<br>输出：13<br>解释：<br>所有非零偏移下降路径包括：<br>[1,5,9], [1,5,7], [1,6,7], [1,6,8],<br>[2,4,8], [2,4,9], [2,6,7], [2,6,8],<br>[3,4,8], [3,4,9], [3,5,7], [3,5,9]<br>下降路径中数字和最小的是 [1,5,7] ，所以答案是 13 。</p>
</blockquote>
<p>提示：</p>
<blockquote>
<ul>
<li>1 &lt;= arr.length == arr[i].length &lt;= 200</li>
<li>-99 &lt;= arr[i][j] &lt;= 99</li>
</ul>
</blockquote>
</blockquote>
<p>这道题是个DP，（第一时间题意理解错了浪费了很久。。。还在想这个这样不是DP啊）<br>状态转移方程<br>$$dp[m][n] = arr[m][n] + max(dp[m-1][n’])(n’ \not= n)$$<br>时间复杂度：$O(n^2)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minFallingPathSum</span><span class="params">(self, arr: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        dp = [[<span class="number">0</span>]*len(arr) <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(arr))]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">            dp[<span class="number">0</span>][i] = arr[<span class="number">0</span>][i]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">                dp[i][k] = arr[i][k]+min(dp[i<span class="number">-1</span>][:k]+dp[i<span class="number">-1</span>][k+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> min(dp[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>LeetCode - Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Contest No.167</title>
    <url>/2019/12/15/leetcode-contest-No167/</url>
    <content><![CDATA[<h2 id="Contest-167"><a href="#Contest-167" class="headerlink" title="Contest 167"></a>Contest 167</h2><p>通过：4/4  排名：107 / 1534  1:43:12  5WA</p>
<h3 id="No-5283-二进制链表转整数"><a href="#No-5283-二进制链表转整数" class="headerlink" title="No.5283 二进制链表转整数"></a>No.5283 <a href="https://leetcode-cn.com/problems/convert-binary-number-in-a-linked-list-to-integer/" target="_blank" rel="noopener">二进制链表转整数</a></h3><blockquote>
<p>给你一个单链表的引用结点 head。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。<br>请你返回该链表所表示数字的 十进制值 。</p>
<p>示例 1：</p>
<blockquote>
<p>输入：head = [1,0,1]<br>输出：5<br>解释：二进制数 (101) 转化为十进制数 (5)</p>
</blockquote>
<p>示例 2：</p>
<blockquote>
<p>输入：head = [0]<br>输出：0</p>
</blockquote>
<p>示例 3：</p>
<blockquote>
<p>输入：head = [1]<br>输出：1</p>
</blockquote>
<p>示例 4：</p>
<blockquote>
<p>输入：head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]<br>输出：18880</p>
</blockquote>
<p>示例 5：</p>
<blockquote>
<p>输入：head = [0,0]<br>输出：0</p>
</blockquote>
<p>提示：</p>
<blockquote>
<ul>
<li>链表不为空。</li>
<li>链表的结点总数不超过 30。</li>
<li>每个结点的值不是 0 就是 1。</li>
</ul>
</blockquote>
</blockquote>
<p>嗯，水题。<br>时间复杂度：$O(n)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDecimalValue</span><span class="params">(self, head: ListNode)</span> -&gt; int:</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> head!=<span class="literal">None</span>:</span><br><span class="line">            ans = ans*<span class="number">2</span>+head.val</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="No-5124-顺次数"><a href="#No-5124-顺次数" class="headerlink" title="No.5124 顺次数"></a>No.5124 <a href="https://leetcode-cn.com/problems/sequential-digits/" target="_blank" rel="noopener">顺次数</a></h3><blockquote>
<p>我们定义「顺次数」为：每一位上的数字都比前一位上的数字大 1 的整数。<br>请你返回由 [low, high] 范围内所有顺次数组成的 有序 列表（从小到大排序）。</p>
<p>示例 1：</p>
<blockquote>
<p>输出：low = 100, high = 300<br>输出：[123,234]</p>
</blockquote>
<p>示例 2：</p>
<blockquote>
<p>输出：low = 1000, high = 13000<br>输出：[1234,2345,3456,4567,5678,6789,12345]</p>
</blockquote>
<p>提示：</p>
<blockquote>
<ul>
<li>10 &lt;= low &lt;= high &lt;= 10^9</li>
</ul>
</blockquote>
</blockquote>
<p>这个题经过了一点点思考，本来的想法还是从low遍历到high的，后来想不对啊，这数字只要第一个数字定了就都定了，所以大概定了个范围，把范围内的所有可能的数列出来，选出来low到high之间的数就可以了<br>后来发现大佬们的眼睛更尖一些，所有可能组出来的数字，最多只有36种可能性，所以最快的方法是将36个数在本地打表写在一个数组里，然后判断在low和high中间的就完事了，具体代码不写了</p>
<p>时间复杂度（大佬版）： $O(1)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sequentialDigits</span><span class="params">(self, low: int, high: int)</span> -&gt; List[int]:</span></span><br><span class="line">        ans = []</span><br><span class="line">        num = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>]</span><br><span class="line">        lc = <span class="number">0</span></span><br><span class="line">        hc = <span class="number">0</span></span><br><span class="line">        ll = low</span><br><span class="line">        hh = high</span><br><span class="line">        <span class="keyword">while</span> low&gt;<span class="number">0</span>:</span><br><span class="line">            lc+=<span class="number">1</span></span><br><span class="line">            low = low//<span class="number">10</span></span><br><span class="line">        <span class="keyword">while</span> high&gt;<span class="number">0</span>:</span><br><span class="line">            hc+=<span class="number">1</span></span><br><span class="line">            high = high//<span class="number">10</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(lc,hc+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>-k+<span class="number">1</span>):</span><br><span class="line">                ans.append(int(<span class="string">''</span>.join(num[i:i+k])))</span><br><span class="line">        o = []</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> ans:</span><br><span class="line">            <span class="keyword">if</span> a &gt;=ll <span class="keyword">and</span> a&lt;=hh:</span><br><span class="line">                o.append(a)</span><br><span class="line">        <span class="keyword">return</span> o</span><br></pre></td></tr></table></figure>


<h3 id="No-5285-元素和小于等于阈值的正方形的最大边长"><a href="#No-5285-元素和小于等于阈值的正方形的最大边长" class="headerlink" title="No.5285 元素和小于等于阈值的正方形的最大边长"></a>No.5285 <a href="https://leetcode-cn.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/" target="_blank" rel="noopener">元素和小于等于阈值的正方形的最大边长</a></h3><blockquote>
<p>给你一个大小为 m x n 的矩阵 mat 和一个整数阈值 threshold。<br>请你返回元素总和小于或等于阈值的正方形区域的最大边长；如果没有这样的正方形区域，则返回 0 。</p>
<p>示例 1：</p>
<blockquote>
<p>输入：mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4<br>输出：2<br>解释：总和小于 4 的正方形的最大边长为 2。</p>
</blockquote>
<p>示例 2：</p>
<blockquote>
<p>输入：mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1<br>输出：0</p>
</blockquote>
<p>示例 3：</p>
<blockquote>
<p>输入：mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6<br>输出：3</p>
</blockquote>
<p>示例 4：</p>
<blockquote>
<p>输入：mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184<br>输出：2</p>
</blockquote>
<p>提示：</p>
<blockquote>
<ul>
<li>1 &lt;= m, n &lt;= 300</li>
<li>m == mat.length</li>
<li>n == mat[i].length</li>
<li>0 &lt;= mat[i][j] &lt;= 10000</li>
<li>0 &lt;= threshold &lt;= 10^5</li>
</ul>
</blockquote>
</blockquote>
<p>第一次写写了五层循环。。。头太铁了，然后想到之前图像处理里面积分图的应用想到可以把整个二维数据累加，这样计算任意区块的累加和只需要用积分好的值加加减减就可以了，这样可以节省掉两层循环（其实应该叫前缀和）。除此之外另外有几点优化：1. 当边长为i的某一次验证没问题之后，直接跳到下一个i进行验证，不遍历其他的位置；2. 当某次边长遍历后没有符合项，直接返回当前最长的边长，因为更长的不可能满足要求了。</p>
<p>后来看别人的题解，其实还有可以优化的，一个是边长的遍历上，改成二分法遍历（因为边长是有界的，这样想的话其实所有题目只要是有界的遍历都改成二分，时间复杂度都是由$O(n)变成$O(lgn)$），另外一种方法是边长从大到小进行遍历，这样只要出现符合条件的就可以直接返回了，不需要遍历剩下的小的，因为题目要求返回<strong>最大</strong>的值。</p>
<p>所以记一下就是，只要是有界条件下的遍历，都用二分就好了。以前某道题也是，费了很多功夫计算公式去缩小遍历范围，但是不如直接从0到1000000000000直接二分计算。</p>
<p>时间复杂度：$O(n^3)$<br>二分的时间复杂度：$O(n^2lgn)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSideLength</span><span class="params">(self, mat: List[List[int]], threshold: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(mat)):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,len(mat[<span class="number">0</span>])):</span><br><span class="line">                mat[i][k] += mat[i][k<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(mat[<span class="number">0</span>])):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(mat)):</span><br><span class="line">                mat[i][k] += mat[i<span class="number">-1</span>][k]</span><br><span class="line">        m = [[<span class="number">0</span>]*(len(mat[<span class="number">0</span>])+<span class="number">1</span>)] +[[<span class="number">0</span>]+mat[x] <span class="keyword">for</span> x <span class="keyword">in</span> range(len(mat))]</span><br><span class="line">        mat = m</span><br><span class="line">        ans = <span class="number">-1</span></span><br><span class="line">        lans = ans</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min(len(mat),len(mat[<span class="number">0</span>]))):</span><br><span class="line">            m = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> m&lt;len(mat)-i:</span><br><span class="line">                n = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> n&lt;len(mat[<span class="number">0</span>])-i:</span><br><span class="line">                    sm = mat[m+i][n+i] + mat[m][n] - mat[m][n+i] - mat[m+i][n]</span><br><span class="line">                    <span class="keyword">if</span> sm &lt;= threshold <span class="keyword">and</span> i&gt;ans:</span><br><span class="line">                        ans = i</span><br><span class="line">                        m = len(mat)</span><br><span class="line">                        n = len(mat[<span class="number">0</span>])</span><br><span class="line">                    n+=<span class="number">1</span></span><br><span class="line">                m+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> ans == lans:</span><br><span class="line">                <span class="keyword">return</span> ans</span><br><span class="line">            lans = ans</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>


<h3 id="No-5286-网格中的最短路径"><a href="#No-5286-网格中的最短路径" class="headerlink" title="No.5286 网格中的最短路径"></a>No.5286 <a href="https://leetcode-cn.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/" target="_blank" rel="noopener">网格中的最短路径</a></h3><blockquote>
<p>给你一个 m * n 的网格，其中每个单元格不是 0（空）就是 1（障碍物）。每一步，您都可以在空白单元格中上、下、左、右移动。<br>如果您 最多 可以消除 k 个障碍物，请找出从左上角 (0, 0) 到右下角 (m-1, n-1) 的最短路径，并返回通过该路径所&gt;需的步数。如果找不到这样的路径，则返回 -1。</p>
<p>示例 1：</p>
<blockquote>
<p>输入：<br>grid =<br>[[0,0,0],<br>[1,1,0],<br>[0,0,0],<br>[0,1,1],<br>[0,0,0]],<br>k = 1<br>输出：6<br>解释：<br>不消除任何障碍的最短路径是 10。<br>消除位置 (3,2) 处的障碍后，最短路径是 6 。该路径是 (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; (3,2)&gt; -&gt; (4,2).</p>
</blockquote>
<p>示例 2：</p>
<blockquote>
<p>输入：<br>grid =<br>[[0,1,1],<br>[1,1,1],<br>[1,0,0]],<br>k = 1<br>输出：-1<br>解释：<br>我们至少需要消除两个障碍才能找到这样的路径。</p>
</blockquote>
<p>提示：</p>
<blockquote>
<ul>
<li>grid.length == m</li>
<li>grid[0].length == n</li>
<li>1 &lt;= m, n &lt;= 40</li>
<li>1 &lt;= k &lt;= m*n</li>
<li>grid[i][j] == 0 or 1</li>
<li>grid[0][0] == grid[m-1][n-1] == 0</li>
</ul>
</blockquote>
</blockquote>
<p>一个稍微有点变化的BFS，在格子中走的时候同时记录已经越过的障碍K的数量，同时在遍历过程中进行障碍数量的更新，已经超过要求的数量的弃置不用。同时留存一个dict进行已经经历过状态的存储，记录步数要最小即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shortestPath</span><span class="params">(self, grid: List[List[int]], k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(grid) == <span class="number">1</span> <span class="keyword">and</span> len(grid[<span class="number">0</span>]) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        ans = <span class="number">99999999999</span></span><br><span class="line">        stats = [(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)]</span><br><span class="line">        sts = &#123;(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>):<span class="number">0</span>&#125;</span><br><span class="line">        moves = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">-1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">-1</span>,<span class="number">0</span>]]</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;len(stats):</span><br><span class="line">            <span class="keyword">for</span> dx,dy <span class="keyword">in</span> moves:</span><br><span class="line">                x = stats[i][<span class="number">0</span>] + dx</span><br><span class="line">                y = stats[i][<span class="number">1</span>] + dy</span><br><span class="line">                <span class="keyword">if</span> x&gt;=<span class="number">0</span> <span class="keyword">and</span> x&lt;len(grid) <span class="keyword">and</span> y&gt;=<span class="number">0</span> <span class="keyword">and</span> y&lt;len(grid[<span class="number">0</span>]):</span><br><span class="line">                    step = stats[i][<span class="number">2</span>]+<span class="number">1</span></span><br><span class="line">                    ks = stats[i][<span class="number">3</span>]+(<span class="number">1</span> <span class="keyword">if</span> grid[x][y] == <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">if</span> ks&lt;=k:</span><br><span class="line">                        <span class="keyword">if</span> ((x,y,ks) <span class="keyword">in</span> sts <span class="keyword">and</span> step&lt;sts[(x,y,ks)]) <span class="keyword">or</span> (x,y,ks) <span class="keyword">not</span> <span class="keyword">in</span> sts:</span><br><span class="line">                            sts[(x,y,ks)] = step</span><br><span class="line">                            <span class="keyword">if</span> x == len(grid)<span class="number">-1</span> <span class="keyword">and</span> y == len(grid[<span class="number">0</span>])<span class="number">-1</span>:</span><br><span class="line">                                ans = min(ans,step)</span><br><span class="line">                                <span class="keyword">if</span> ans == len(grid)+len(grid[<span class="number">0</span>]) - <span class="number">2</span>:</span><br><span class="line">                                    <span class="keyword">return</span> ans</span><br><span class="line">                            stats.append((x,y,step,ks))</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> <span class="keyword">if</span> ans == <span class="number">99999999999</span> <span class="keyword">else</span> ans</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>LeetCode - Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>C补遗：C语言里不那么面熟的关键字</title>
    <url>/2019/12/06/C_Keyword/</url>
    <content><![CDATA[<p>C用了很久了，但是也没有说很系统平铺的整体看过，一直是用什么会什么，不用什么就过去了。既然C已经被我当做是一门已经掌握的语言，所以就重新扫一遍C里面不那么面熟的东西或者理解有偏差的东西，当做是个记录以备复习使用，也可以对C打个结了。</p>
<h2 id="auto-amp-amp-register-amp-amp-static"><a href="#auto-amp-amp-register-amp-amp-static" class="headerlink" title="auto &amp;&amp; register &amp;&amp; static"></a>auto &amp;&amp; register &amp;&amp; static</h2><p>怎么也没想到会把这三个放在一起，一个是C++中常用的声明类型的关键字，一个没见过的，和一个还算常用的，这里主要理解的偏差还是在 <code>auto</code> 上。</p>
<p>在C++中，auto作为一种自动判断变量类型的定义存在，比如当我使用 <code>auto c = 10;</code> 去定义 <code>c</code> 这个变量的时候，是和 <code>int c = 10;</code> 的作用是一样的，这样可以节省很多去考虑这个变量具体是什么类型以及大量的敲字母的时间，还可以避免一些打字错误，比如  <code>vector&lt;map&lt;int,string&gt;&gt;::iterator a =</code> 这种东西可以直接 <code>auto a =</code> 还是挺爽的。顺便这里提一嘴，C++中的 <code>auto</code> 后面必须赋值，否则编译器不知道到底要初始化成什么类型的。</p>
<a id="more"></a>
<p>在C中，<code>auto</code> 关键字是用来指定变量的存储位置的。这也是为什么要和 <code>static</code> 和 <code>register</code> 一起讲。 <code>static</code> 说过很多遍也用过很多遍了，是存储在静态存储区的，而这个不太常见的 <code>register</code> 就是指的平时我们使用中的变量，是直接存储在堆或者栈中的，所以 <code>auto</code> 关键字就只是用来指定是用 <code>static</code> 修饰的还是用 <code>register</code> 修饰的，也就是新建变量的存储位置，举例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//平时这样定义就相当于 auto in a = 10; auto相当于省略</span></span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> c = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>注意的是，平时我们在 <code>int a = 10;</code> 这样定义的时候就相当于省略了 <code>auto</code> 关键字，上面这段在定义的时候就是 a 和 b 定义是在堆或者栈中的，c定义在静态存储区中。而且在使用了 <code>auto</code> <code>register</code> <code>static</code> 修饰后，仍然需要增加变量类型，因为他们并不是定义变量类型的，而是变量的存储区域。</p>
<p>C中的 <code>auto</code> 并不是复杂，而是主要要注意一下与C++中的 <code>auto</code> 的区别。</p>
<h2 id="C99-新增关键字"><a href="#C99-新增关键字" class="headerlink" title="C99 新增关键字"></a>C99 新增关键字</h2><p>后面这两个部分我定义为《很少见看上去很新但有可能我以后再也不会用到的关键字》，是新定义的关键字。随着时代发展社会进步，所以 C 的标准也在一直跟着更新，这两个部分就是在新的标准下引入的新的关键字。</p>
<h3 id="Bool"><a href="#Bool" class="headerlink" title="_Bool"></a>_Bool</h3><p>这个挺明显的，就是补齐C中没有 <code>bool</code> 类型的缺憾了，不同程序员自己对 <code>bool</code> 类型的定义都不一样，所以可能会产生分歧，这个可以统一一下。定义的true为1，false为0，类型的具体大小由编译器去决定，标准只要求了大小要能够存放0和1这两个值，gcc是使用char实现的。需要引入 <code>&lt;stdbool.h&gt;</code></p>
<p>另外，对bool类型赋0和1以外的值，gcc会强制赋值成1，所以 <code>bool</code> 类型的值只存在0和1两种可能</p>
<p>另另外，C++中是 <code>bool</code> 类型，C中是 <code>_Bool</code> 类型。</p>
<h3 id="Complex-amp-amp-Imaginary"><a href="#Complex-amp-amp-Imaginary" class="headerlink" title="_Complex &amp;&amp; _Imaginary"></a>_Complex &amp;&amp; _Imaginary</h3><p>复数！复数！复数你敢想？就在C里面，复数！</p>
<p>需要引入 <code>&lt;complex.h&gt;</code> , <code>_Imaginary</code> 作为虚数，但是并没有强制要求编译器去实现虚数部，所以很多都是只实现了 <code>complex</code>。</p>
<p><code>complex</code> 分三种类型:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> <span class="keyword">_Complex</span> fc = <span class="number">1.0f</span> + <span class="number">1.0</span><span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">_Complex</span> fc = <span class="number">1.0</span> + <span class="number">1.0</span>i;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> <span class="keyword">_Complex</span> fc = <span class="number">1.0</span> + <span class="number">1.0</span>i;</span><br></pre></td></tr></table></figure>

<h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><p>内联函数，与C++中的 <code>inline</code> 作用相同用来提高程序运行效率，减少函数调用开支。但是只是建议编译器这样去做，编译器可以选择性忽略（可配置）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内联函数中不能定义可改变的 <code>static</code> 变量，不能引用具有内部链接的变量。</p>
<p>建议内联函数只用在函数体比较简单的情况下，否则代码展开太过庞大。</p>
<h3 id="restrict"><a href="#restrict" class="headerlink" title="restrict"></a>restrict</h3><p>这是一个只对于指针的修饰符，被 <code>restrict</code> 修饰的指针所指向的内容的所有操作都是基于这个指针进行的，不会从其他地方进行修改，这样可以帮助编译器进行更好的代码优化提高代码效率。如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 某 restrict 指针 a</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *<span class="keyword">restrict</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *a++;</span><br><span class="line">    *a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种情况下，编译器知道在f处理过程中不可能从别的地方对 <code>*a</code> 进行修改，所以可以直接将两句优化为 <code>*a+=2;</code></p>
<p>并且两个不同的 <code>restrict</code> 指针必定是两个分别指向不同区域的指针，不会是相同的指针，可以因此对一些函数输入参数进行限定。如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memcpy</span><span class="params">(<span class="keyword">void</span> * <span class="keyword">restrict</span> s1, <span class="keyword">const</span> <span class="keyword">void</span> * <span class="keyword">restrict</span> s2, <span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memove</span><span class="params">(<span class="keyword">void</span> * s1, <span class="keyword">const</span> <span class="keyword">void</span> * s2, <span class="keyword">size_t</span> n)</span></span>;</span><br></pre></td></tr></table></figure>

<p>对于 <code>memcpy</code> 来讲，两个指针区域的重叠是存在危险的行为，所以需要使用 <code>restrict</code> 进行修饰。</p>
<p>另外，这个关键字C++中并没有引入。</p>
<p>另另外，在linux中 <code>restrict</code> 需要替换为 <code>_restrict</code></p>
<h2 id="C11-新增关键字"><a href="#C11-新增关键字" class="headerlink" title="C11 新增关键字"></a>C11 新增关键字</h2><h3 id="Alignas-amp-amp-Alignof"><a href="#Alignas-amp-amp-Alignof" class="headerlink" title="_Alignas &amp;&amp; _Alignof"></a>_Alignas &amp;&amp; _Alignof</h3><p>加个 cppreference 的链接辅助：</p>
<p><a href="https://zh.cppreference.com/w/c/language/_Alignas" target="_blank" rel="noopener">_Alignas</a></p>
<p><a href="https://zh.cppreference.com/w/c/language/_Alignof" target="_blank" rel="noopener">_Alignof</a></p>
<p>修改被声明对象的对齐说明，是的，这个对齐说明就是 <code>struct</code> 的那个对齐说明，后面可以放置数字或者一个类型，如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdalign.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//  每一个 struct sse_t 类型的对象会在 16 字节边界对齐</span></span><br><span class="line"><span class="comment">// （注意：需要支持 DR 444 ）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sse_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  alignas(<span class="number">16</span>) <span class="keyword">float</span> sse_data[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种 struct data 的每一个对象都会在 128 字节边界对齐</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> x;</span><br><span class="line">  alignas(<span class="number">128</span>) <span class="keyword">char</span> cacheline[<span class="number">128</span>]; <span class="comment">// 过对齐的 char 数组对象，</span></span><br><span class="line">                                    <span class="comment">// 不是过对齐的 char 对象的数组</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(data) = %zu (1 byte + 127 bytes padding + 128-byte array)\n"</span>,</span><br><span class="line">           <span class="keyword">sizeof</span>(struct data));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"alignment of sse_t is %zu\n"</span>, <span class="keyword">alignof</span>(struct <span class="keyword">sse_t</span>));</span><br><span class="line">    alignas(<span class="number">2048</span>) <span class="class"><span class="keyword">struct</span> <span class="title">data</span> <span class="title">d</span>;</span> <span class="comment">// 此 struct data 的实例会更严格地对齐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sizeof(data) = 256 (1 byte + 127 bytes padding + 128-byte array)</span><br><span class="line">alignment of sse_t is 16</span><br></pre></td></tr></table></figure>

<p>需要注意的是如果 <code>alignas</code> 后面的表达式为0会被忽略，如果定义了多个会使用最严格的，这个最严格的描述包括无任何 <code>alignas</code> 描述的原始对齐方式。</p>
<p><code>_Alignof</code> 就是获取这个类型的对齐要求。如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdalign.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Alignment of char = %zu\n"</span>, <span class="keyword">alignof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Alignment of max_align_t = %zu\n"</span>, <span class="keyword">alignof</span>(<span class="keyword">max_align_t</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"alignof(float[10]) = %zu\n"</span>, <span class="keyword">alignof</span>(<span class="keyword">float</span>[<span class="number">10</span>]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"alignof(struct&#123;char c; int n;&#125;) = %zu\n"</span>,</span><br><span class="line">            <span class="keyword">alignof</span>(struct &#123;<span class="keyword">char</span> c; <span class="keyword">int</span> n;&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alignment of char = 1</span><br><span class="line">Alignment of max_align_t = 16</span><br><span class="line">alignof(float[10]) = 4</span><br><span class="line">alignof(struct&#123;char c; int n;&#125;) = 4</span><br></pre></td></tr></table></figure>

<h3 id="Atomic"><a href="#Atomic" class="headerlink" title="_Atomic"></a>_Atomic</h3><p>是用于多线程的玩意，用这个修饰符限定的变量的操作只能是<strong>原子性</strong>的，类似于互锁，同一时间只能有一个线程访问这个参数，类似于线程锁。定义方式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_Atomic <span class="keyword">int</span> c = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Generic"><a href="#Generic" class="headerlink" title="_Generic"></a>_Generic</h3><p>泛型。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GENERAL_ABS(x) _Generic((x),int:abs,float:fabsf,double:fabs)(x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"intabs:%d\n"</span>,GENERAL_ABS(<span class="number">-12</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"floatabs:%f\n"</span>,GENERAL_ABS(<span class="number">-12.04f</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"doubleabs:%f\n"</span>,GENERAL_ABS(<span class="number">-13.09876</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">    _Generic(a+<span class="number">0.1f</span>,<span class="keyword">int</span>:b,<span class="keyword">float</span>:c,<span class="keyword">default</span>:b)++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b=%d,c=%d\n"</span>,b,c);</span><br><span class="line">    _Generic(a+=<span class="number">1.1f</span>,<span class="keyword">int</span>:b,<span class="keyword">float</span>:c,<span class="keyword">default</span>:b)++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d,b=%d,c=%d\n"</span>,a,b,c);</span><br></pre></td></tr></table></figure>

<p>对不同的输入参数的类型执行不同的函数，x为函数的输入参数，后面是对应不同输入参数类型的操作，最后可以加一个 <code>defalut</code> 用于其他的输出结果。</p>
<h3 id="Noreturn"><a href="#Noreturn" class="headerlink" title="_Noreturn"></a>_Noreturn</h3><p><a href="https://en.cppreference.com/w/c/language/_Noreturn" target="_blank" rel="noopener">cppreference</a></p>
<p>这是一个描述函数的关键词，用于表示该函数执行完毕后不会返回，请注意这里是<strong>不会返回</strong>，而不是像 <code>void</code> 一样是返回空，而是根本不会返回，编译器也会因此对代码进行优化。例如:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">noreturn <span class="keyword">void</span> <span class="title">stop_now</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="comment">// or _Noreturn void stop_now(int i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) <span class="built_in">exit</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这个说明符并没有什么<strong>实际</strong>的作用，这个实际体现在，他是程序员对编译器的一种承诺，我不会让这个函数返回的，你也别让他返回，只是一个提示、通知的作用，但是你要在函数里非要返回，编译器也不会在你返回的时候强行停止掉。that’s it.</p>
<h3 id="Static-assert"><a href="#Static-assert" class="headerlink" title="_Static_assert"></a>_Static_assert</h3><p><a href="https://en.cppreference.com/w/c/error/static_assert" target="_blank" rel="noopener">cppreference</a></p>
<p>静态断言，如果第一个参数的值为false（可以输入一个表达式或者string），那么编译器会报出第二个string的错误，同时编译失败，如果第一个表达式的值为true的话没有任何影响。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static_assert</span>(<span class="number">2</span> + <span class="number">2</span> == <span class="number">4</span>, <span class="string">"2+2 isn't 4"</span>);      <span class="comment">// well-formed</span></span><br><span class="line">    <span class="keyword">static_assert</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>),</span><br><span class="line">                 <span class="string">"this program requires that int is less than char"</span>); <span class="comment">// compile-time error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Thread-local"><a href="#Thread-local" class="headerlink" title="_Thread_local"></a>_Thread_local</h3><blockquote>
<p>便捷宏，可用于指定对象具有线程本地存储持续时间。</p>
</blockquote>
<p>大家都是这么说的，但是没找到 C 的很确切的定义和说明。但是它是一个描述变量的，是用来描述变量的生命周期为线程存储期，可以和 <code>static</code> 和 <code>extern</code> 结合来指定内部或者外部链接，具体的声明周期描述如下：</p>
<blockquote>
<p><strong><em>线程（thread）</em></strong>存储期。对象的存储在线程开始时分配，而在线程结束时解分配。每个线程拥有其自身的对象实例。唯有声明为 <code>thread_local</code> 的对象拥有此存储期。 <code>thread_local</code> 能与 <code>static</code> 或 <code>extern</code> 一同出现，以调整连接。关于具有此存储期的对象的初始化的细节。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这样顺下来，不清楚不了解的东西还很多。主要原因还是因为在做项目的过程中很多东西没有很高的要求和需求，那么也不需要用到，这样的话没有动力不会去了解去理解，一直只是在嵌入式中使用的C，所以很多东西比如线程复数等等根本没有想到会出现，也更加没有用过了，这边只是一个对C语言知识的补遗，我不能通过一个补遗就了解这些知识，但是可以通过这个补遗知道有这样一回事，提前有准备，不会突然被一棒子打到。嗯。</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>想出去玩？去日本吧！——准备工作篇</title>
    <url>/2019/11/28/goto_japan_prepare/</url>
    <content><![CDATA[<blockquote>
<p>很早之前就想去日本转一转，前一段时间终于算是忙中偷闲出去玩了一圈，回来之后也来整理整理出去游玩的过程，也给小伙伴们一个参考。我也是第一次出国玩，所以有没有说明好的地方也希望小伙伴们能提出来~~</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>这次出行去了京都、宇治、奈良、大阪，去的城市不是很多，这次单独介绍一下出行的准备工作，方便想去的小伙伴单独查阅，下一篇会介绍去的景点，再给大家推荐一下好景点和好吃的！</p>
<p><img src="/assets/goto_japan_prepare/%E5%85%B3%E8%A5%BF%E6%9C%BA%E5%9C%BA.JPG" alt="关西机场出口"><br><strong><center> 关西机场出口 </center></strong></p>
<a id="more"></a>

<h3 id="护照"><a href="#护照" class="headerlink" title="护照"></a>护照</h3><p>护照是出国用的身份证，很多小伙伴都已经早早办下来了，我们的护照是准备去日本之后才去办的，到你所在地派出所的出入境大厅办理即可，具体地址等等请上网百度，北科附近可以去牡丹园，走着也不远。护照办理时间大约一个星期，去的时候记得带上200元现金。（不需要提前拍照，不需要提前打印）</p>
<h3 id="签证"><a href="#签证" class="headerlink" title="签证"></a>签证</h3><p>去日本的签证分为单次，三年多次和五年多次三种，如果是第一次出国玩（比如我们）一般都是办理单次签证的。签证需要通过旅行社办理，这里我们直接去淘宝解决就好了，价格也不算太贵，正常办理不加急250元左右。按照淘宝商家要求的材料列表每一项提供给商家就可以了，文件材料也不算少，请认真填写。签证一般时间是10个工作日。</p>
<p><strong>注意一</strong>： 去日本需要办理银行流水的一份证明，要求年流水高于10W。这份财产证明是必须的，如果自己没有的话，可以提供直系亲属的同样证明，和能证明亲属关系的文件（户口）也可以。但是有一份75所高校的名单，可以简化申请材料，这个申请材料简化指的就是财力证明，适用于75所高校的本科生，研究生，博士生在读和毕业三年内，具体名单可以上网搜索一下（北科是，北航不是）。满足条件的话提供一份学信网的学籍证明就可以了。（如果都办不了怎么办，淘宝，淘宝能找到不需要财产证明的签证，当然价格嘛，也会高不少的</p>
<p>这里备注一下，如果以前是75所高校的，现在在另外一所不是75所高校的地方读研，抱歉，这样不符合75所高校范围内的，还是需要提供财产证明。（替小伙伴的600块钱默哀</p>
<p><strong>注意二</strong>： 这里注意按照正常办理流程，你需要先将酒店和飞机订好，再办理日本护照，因为办理日本护照是需要拿在日期间所有的酒店订单和来回机票订单的（备注，民宿胶囊旅馆等不可以），所以一般情况下需要先订酒店和飞机再去办签证。如果不想那么早定，或者住民宿的话，解决办法有二：一是上booking订酒店，一般酒店都是可以免费取消的，订好酒店后去办签证，签证下来了再取消掉酒店就可以了。二就是淘宝，淘宝办理签证可以办理无机酒的套餐，多掏钱就好了。</p>
<p><img src="/assets/goto_japan_prepare/%E7%AD%BE%E8%AF%81%E6%9D%90%E6%96%99.JPG" alt="签证厚度"><br><strong><center>我准备的签证材料的厚度</center></strong></p>
<h3 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h3><p>订酒店的工作完全在booking上完成，和国内订酒店类似，并且都有中文，没有难度。</p>
<p>另外提醒一下，日本的酒店一般退房时间是十点或者十一点，与国内不同，不要睡过头了。同样入住时间也很晚，一般三点以后。</p>
<h3 id="换汇"><a href="#换汇" class="headerlink" title="换汇"></a>换汇</h3><p>这点就看个人消费了，不过可以的话还是少带一些现金，一般情况下买东西或者吃饭或者便利店都可以用信用卡支付的。（甚至我们在便利店使用支付宝直接支付了一单</p>
<p>换汇地点，出门右转中国银行</p>
<h3 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h3><p>在日本交通基本靠走（误</p>
<p>如果在日本去的几个城市比较远，比如北海道到东京，请直接买JR PASS，值。</p>
<p>但是如果去的地方距离都不算远，比如我们，可以办理一张icoca卡或者西瓜卡，类似于国内的公交卡，但是！但是！这张卡并没有打折的作用，该花多少还是多少。并且经过我们几天的过程来看，感觉直接用现金也不是很麻烦，基本都是自助售票，所以区别不大。如果喜欢刷卡，就可以办理一张卡在日期间用，在地铁站或者便利店都有充值的机器（叫精算机），并且很多便利店都可以使用这张卡支付，不用担心充值过多花不掉的问题。</p>
<p>网上很多说在淘宝办理这张卡的，对比一下淘宝办理会贵一些，而且到日之后再进行办理也不是非常麻烦，所以还是推荐过去之后再办理（还可能会有限定卡面一类的~~</p>
<p>从车站怎么去酒店？从酒店怎么去景点？随便走不知道走到哪里了怎么回酒店？请使用 google map 。很多人推荐“乘换案内”这个app，但是是全日文的，用着不舒服斯基，而且我根本不知道我去的地方日文怎么写啊。google map 可以直接敲中文去哪里，然后照着地图走就好了，上手无压力无难度，所有交通相关的查询这一个app足够了。</p>
<p><img src="/assets/goto_japan_prepare/%E4%B8%AD%E6%9D%91%E6%BB%95%E5%90%89%E7%82%B9%E5%BF%83.JPG" alt="宇治中村滕吉本家的抹茶点心"><br><strong><center>宇治中村滕吉本家的抹茶点心</center></strong></p>
<h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><p>上网请淘宝，有随身wifi可以用，平均每天不到10元，信号也不错，机场取机场还，推荐。</p>
<p>电话短信？如果没有很重要的事情其实不办也可以（毕竟都微信办公了，我的飞行模式从过去的飞机一直开着到回到北京。。），办的话有个小技巧，可以几个人只办理一个号的国际漫游，其他人把电话短信都转到这一个号上来。（不负责，没真正这样试过</p>
<h3 id="东西"><a href="#东西" class="headerlink" title="东西"></a>东西</h3><ul>
<li>信用卡： 有信用卡最好，不管订酒店还是买东西都会很方便。信用卡最好询问一下是直接日元转人民币还是要转一次美元，如果通过美元的话，会多出换汇的花费。包括网上查到的招商银行的ICB卡，后来确认也是通过美元结算的。我是用的是招商银行的全币种国际信用卡，但是用的时候发现也是用美元记账，有人说免了一次美元转换人民币的， 经济盲表示不懂，总之应该是不亏的。</li>
<li>电压转换器：出行前请检查你的所有用电设备充电器等，日本用电是110V，如果你有只能220V使用的设备，请买一个转换器，有多个这种电器的话，再带一个插排。现在一般的手机充电器或者电脑充电器应该都是可以在110V下使用的。</li>
<li>带 伞</li>
<li>有很多景点或者车站都可以盖章（唐三藏的通关文牒）这个蛮有意思的，喜欢的推荐提前准备一个本本。（哭</li>
<li>带个方便装硬币的零钱包吧，硬币真的超。。。级。。。多。。。到日本会发现很多自助售货机，很多餐馆也都是自动售货，你就会经常一张钞票进去，哗啦哗啦一袋子硬币出来。</li>
</ul>
<p><img src="/assets/goto_japan_prepare/%E7%AB%8B%E5%91%BD%E9%A6%86%E5%A4%A7%E5%AD%A6.JPG" alt="立命馆大学"><br><strong><center>立命馆大学</center></strong></p>
<h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>（会说英文的一二三四足够了）</p>
<p>不会日语你也能玩的很happy，英语也不会的话，稍微有点不方便，不过也能玩。所以其实对语言要求并不是很高的，上面提到的用的东西基本都是中文的。经常听说日本人的英语发音都不怎么样，但是在服务岗的说英语感觉都蛮标准的，反而感觉自己英语好渣啊。英语会一些基本的日常用语已经足够了（本人四级不过五百六级死活过不去）。吃饭基本靠图片指，买东西基本靠比划。。。旅游的地方基本也都会英语，靠英语玩一圈没什么问题。如果有一些关键的词不好解释的话，不要害羞，掏出你的手机 google 翻译一下，直接拿手机给人家看就是了。（然后对方也 google 翻译了一下中文，用笔抄在一张纸上给我看）。这里顺便提一句，感觉日本的服务人员的态度都超级好，超级有耐心。</p>
<p>这里如果有认识的朋友会日语就更好了，不会的直接拍照问，不要吝啬你的好友资源。</p>
<p>另外有一些翻译软件可以拍照翻译，这个功能也比较有用，推荐也备用一个。因为即使你学会了五十音也不见得能把字都正确的敲出来。</p>
<p>（我在出去之前学了两句日语，一句是“这个多少钱？”，第二句是“能便宜点么？”</p>
<p><img src="/assets/goto_japan_prepare/%E4%BA%8C%E5%B9%B4%E5%9D%82%E6%A8%B1%E8%8A%B1%E9%85%92.JPG" alt="二年坂的樱花酒"><br><strong><center>二年坂的樱花酒</center></strong></p>
<h2 id="买买买"><a href="#买买买" class="headerlink" title="买买买"></a>买买买</h2><p>如果要买化妆品的话，一般化妆品在药妆店和高岛屋这两个地方都可以搞定，药妆店出示护照就可以免税了，高岛屋这种商场需要买完之后去免税柜台办理免税手续，另外还会多收取1.1%的手续费。购买的商品分类需要够5000日元才可以免税，有些比如唇膏壳会属于一般商品，也需要一般商品累计满足5000日元才可以免税。免税的商品会封起来，不允许在日本国内使用的，我们的袋子不小心弄破了，但是回来的时候也没有人检查。出于中国人去日本买化妆品的热度，基本我去的地方都有中文导购，放手买吧。。</p>
<p>动漫周边的话，因为我没有去秋叶原（准备下次去！）所以也不太好推荐，只推荐一下大阪有一个日本桥，也是有很多东西的动漫街，在每年的三月份还有活动（虽然我们并没有赶上，只差了两三天）如果去大阪行程时间有富裕的话，去看看吧</p>
<p>基本准备好上面说的这些东西之后，就可以放心地出去玩了，在外面用的东西都不会缺，这次出去玩我们安排的比较随意，所以景点也没有排的非常的满，只去了京都、奈良、大阪几个地方，下一次就来介绍介绍我们去的地方，提前多图预警啊~~</p>
]]></content>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB并行工具箱--parfor的使用</title>
    <url>/2019/11/27/Matlab_cluster_parfor/</url>
    <content><![CDATA[<blockquote>
<p>最近在使用进行MATLAB进行一些计算的时候因为计算时间实在是太长了（五天。所以开始考虑进行算法优化，就在这时无意间看到了系统的CPU占用率，what？25%哈哈哈哈哈或或或或或或或或，matlab个ZZ。于是想起了parfor这回事，算法用的是动态规划算法，但是在每个递推过程中也要计算$2000 \times 2000$个循环，正好可以用并行计算，perfect，条件允许，直接开始！</p>
</blockquote>
<h2 id="要啥简介，直接开干"><a href="#要啥简介，直接开干" class="headerlink" title="要啥简介，直接开干"></a>要啥简介，直接开干</h2><p>来看一个简单的不能再简单的例子，我们用for将一个数组乘以2</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">n = <span class="number">1000</span>;</span><br><span class="line">a = <span class="built_in">rand</span>(n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    a(<span class="built_in">i</span>) = a(<span class="built_in">i</span>) * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>试着跑一下，没什么问题（这要有啥问题可以不活了），看一下运行时间</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Elapsed time is <span class="number">0.000034</span> seconds.</span><br></pre></td></tr></table></figure>

<p>一个n x 1大小的随机数组，然后把其中每个数乘以二，下面就是改成parfor并行计算的</p>
<a id="more"></a>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">n = <span class="number">1000</span>;</span><br><span class="line">a = <span class="built_in">rand</span>(n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">parfor</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    a(<span class="built_in">i</span>) = a(<span class="built_in">i</span>) * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>so easy。这样就改好了，matlab果然易用，同样看一下时间</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Starting parallel pool (parpool) using the <span class="string">'local'</span> profile ... connected to <span class="number">4</span> workers.</span><br><span class="line">Elapsed time is <span class="number">32.119578</span> seconds.</span><br></pre></td></tr></table></figure>

<p>WTF，本来想要提高效率的，怎么会变得这么慢，不过看说明似乎干了些别的，再跑一遍试试？</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Elapsed time is <span class="number">0.183769</span> seconds.</span><br></pre></td></tr></table></figure>

<p>看上去时间正常多了嘛不过还是比正常跑慢，怎么回事？首先如果看到上面这些，恭喜，这就是已经开始多核心并行计算了，后面我们来具体分析及使用MATLAB的并行计算。</p>
<h2 id="MATLAB并行计算解释及分析"><a href="#MATLAB并行计算解释及分析" class="headerlink" title="MATLAB并行计算解释及分析"></a>MATLAB并行计算解释及分析</h2><p>首先通俗解释一下我们做的事情，比如我们有一堆砖要搬，从A搬到B再搬到C结束。正常情况下，我们有一个小伙子来做这件事，他一次一次把所有砖从A搬到B再搬到C。这就是正常情况下的计算。</p>
<p>但是我们的CPU是多核心的，例如我们是有四个小伙子的，但是在搬砖过程中，这四个小伙子只有一个小伙子在搬砖，另外三个小伙子在围观。。。这怎么可能快嘛，但是我们的小伙子很能干，只要砖不是非常多，工作都能很快完成，时间差距不大，所以也就不需要所有人都上了。</p>
<p>并行计算就是让这几个小伙子都动起来，一起去做这件事，这样才能更加效率的解决工作量比较大的问题。在上面的例子中我们就是这样去做的。</p>
<p><strong>但是</strong></p>
<p><strong>为什么第一次运行这么慢</strong>：因为matlab开始并行计算之前，需要进行一些预备工作，这些工作默认是没有开启的，所以在第一次进行并行计算的时候，需要首先进行预备工作，花费一些时间，这样时间长也是理所当然的了。</p>
<p><strong>为什么第二次还是这么慢</strong>：虽然在工作中有更多的小伙子来干活，但是在干活中，还需要有一个人去给这些小伙子分配工作，这个分配工作的动作也是需要耗费时间的，这样在工作量非常小的情况下（如上例）这个分配工作的时间可能比做这项工作消耗的时间都要长，这样最终反而计算时间更长。</p>
<h3 id="Parallel-Pool-的设置"><a href="#Parallel-Pool-的设置" class="headerlink" title="Parallel Pool 的设置"></a>Parallel Pool 的设置</h3><p>然后我们来看一下 MATLAB 中关于并行工具箱相关的设置：</p>
<p>（matlab版本使用2015a，其他版本请找相关设置</p>
<p>matlab 中去做这项工作的部分叫做 Parallel pool。在 matlab 的设置界面中或者主界面的左下角的图标处可以进入并行计算工具箱的设置。大概长这样：</p>
<p><img src="/assets/Matlab_cluster_parfor/%E5%B9%B6%E8%A1%8C%E5%B7%A5%E5%85%B7%E7%AE%B1%E8%AE%BE%E7%BD%AE.png" alt="并行工具箱设置"></p>
<p>最上面的 Clusters 是关于计算的集群的设置，请选择 local （后面看我努力程度是否出个搭建集群的教程吧，非常简单）</p>
<p><img src="/assets/Matlab_cluster_parfor/ClusterProfileManager.png" alt="Cluster Profile Manager"></p>
<p>点击蓝色文字处 Cluster Profile Manager 就可以对本地的这个 Cluster 进行配置了，中间最重要的配置是 <strong>Number of workers to start on your local machine</strong> 这个决定了有多少个小伙子给你干活，默认情况下，CPU 是几核的就填几。（这一步在实际运行中有一些疑问，核心数or线程数，等待后续进一步验证。）修改后可以顺手点击 <strong>Validate</strong> 进行验证，几项测试都通过的话就说明配置没有问题，退出设置后点击同样在主界面中左下角菜单中的另外一项 <strong>Start parallel pool</strong> 就可以打开了，或者在程序中运行到 parfor 时 MATLAB 也会自动开启。</p>
<p>开启之后可以开启系统的任务管理器，查看一下 matlab.exe 有几个，如果 worker 数量为4，那么应该有五个进程在运行，一个是用来进行调度管理的，另外四个是干活的小伙子。可以通过占用内存的不同来区别这两种进程，会有一个占用的内存大小与其他有较大的区别。</p>
<p><img src="/assets/Matlab_cluster_parfor/ValidationResults.png" alt="Validation Relusts"></p>
<p>在并行工具箱的设置中还有两个设置，一个是在遇到需要进行并行计算的语句时自动开启这个 Parallel Pool ，另一个是在一定时间内没有使用并行计算的时候，自动关闭，时间可以自己进行设置。</p>
<h2 id="适用范围-amp-变量说明-amp-技巧"><a href="#适用范围-amp-变量说明-amp-技巧" class="headerlink" title="适用范围&amp;变量说明&amp;技巧"></a>适用范围&amp;变量说明&amp;技巧</h2><p>基本使用方法介绍的差不多了，但是哪里有程序第一次能跑起来的。哪种情况才适合使用 parfor 进行并行计算，使用时需要注意哪些问题，怎样才能进一步提高计算速度，我们接着往后看。</p>
<h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><p>各部分计算独立：既然是并行计算，所以最基本的要求是 <strong>各个部分计算独立</strong> ，也就是说不同小伙子做的工作能独立开，不能互相依赖。你可以让小伙子们同时把砖从A点搬到B点，但是不能让一部分从A搬到B，一部分从B搬到C，因为从B搬到C的工作依赖于另一部分工作，有可能出现没有砖可以搬的情况。</p>
</li>
<li><p>计算量足够大：就如同第一个例子一样，可以看到在进行并行计算的过程中，不管是多个小伙子的工作分配或者是和工作分配者和小伙子之间的数据发送与接收，都需要消耗一定量的时间，这样情况下如果工作量本身规模不大，这些消耗已经比并行计算带来的时间优势完全抹杀掉了，所以只有在计算量极大的情况下才适用。并且计算量越大，并行计算带来的时间优势越明显。</p>
</li>
</ul>
<h3 id="变量分类"><a href="#变量分类" class="headerlink" title="变量分类"></a>变量分类</h3><p>MATLAB 对 parfor 使用中的变量分为五类，如下图：</p>
<p><img src="/assets/Matlab_cluster_parfor/parfor_vartypes.png" alt="parfor_vartypes"></p>
<ul>
<li>loop Variable ： 循环变量，就是简单的 for 循环中的变量，上图中的 i。</li>
<li>Sliced Variable ： 某数组中分发给每个 worker 的变量，或者多个 worker 存储到同一个数组中的变量，要求不同 worker 接触的变量不能重复交叉的现象，并且下标连续，不能使用例如 2*i 这类下标。</li>
<li>Broadcast Variable ： 需要分发给每个 worker 使用的同一个数据，这个数据对于每个 worker 来说是只读不写的。</li>
<li>Reduction Variable ： 在不同循环中对同一个变量进行叠加的计算，注意这个叠加的意思不仅仅代表加法，任何符合交换律的运算都可以，比如加减乘除，当然不能混用，因为混用之后就不符合交换律了，这样才能在不同 worker 计算完成时间不确定的情况下保证计算的正确性。也即，计算顺序不影响计算结果。</li>
<li>Temporary Variable ： 临时变量，在每个 worker 运行过程中创建并销毁的变量，不同 worker 之间使用自己的临时变量，互相独立。</li>
</ul>
<p>如果在使用过程中报错无法运算，可以查看一下自己使用的变量和上面五类对应一下属于哪类。所有涉及到的变量 <strong>必须</strong> 属于这五类中的某一类，并符合相关的规则。所以如果出错不能运行的话，慢慢对照查一下吧。</p>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><blockquote>
<p>如何进一步提高计算速度</p>
</blockquote>
<ul>
<li><p>影响速度的主要因素：计算依旧是使用 CPU 去跑的，经过不同电脑的几次试验，主要影响因素是 <strong>核心数量</strong> ，主频当然是有影响的，但是差距不大，核心数越多速度越快。所以尽可能的发动你的交际技巧去找个多核电脑吧。</p>
</li>
<li><p>尽量减少 worker 传输的数据量：在进行计算时，管理这些小伙子工作的人要把工作内容一项一项分配下去，例如工作需要的数据，这样不可避免的会出现很多数据交换，在 MATLAB 中这些数据被称为 <strong>Broadcast Variables</strong> ，非常形象的一个名字，这些数据需要分发到每个 worker 的手中。这里我们需要尽量减少这类变量的大小，只传必要的数据过去，看上去似乎不多，但是在巨量的循环次数面前，浪费的每一点时间都可以被放大到很大的程度。</p>
</li>
</ul>
<h3 id="关于worker数量"><a href="#关于worker数量" class="headerlink" title="关于worker数量"></a>关于worker数量</h3><p>根据我自己查到的各种资料，都是说 worker 数量与 CPU 核心数量相同，但是在我多个电脑多次实际运行过程中发现这样 CPU 占用率一直不是100%，所以目前我在本机运行的时候使用的 worker 数量都是线程数，这点有待进行进一步考证。因为占用率是一方面，也要考虑计算的实际速度。</p>
]]></content>
      <tags>
        <tag>Communication</tag>
      </tags>
  </entry>
  <entry>
    <title>汉明码——纠错与校验</title>
    <url>/2019/11/27/Hamming_Code/</url>
    <content><![CDATA[<blockquote>
<p>忘记前一段时间某个时候提到某个事情了，想起来纠错这回事，大概回忆了一下是一个挺有意思的过程，索性重新搜索了一下复习了一遍，把大概原理在这里写一写，权当记录</p>
</blockquote>
<h2 id="从小时候说起"><a href="#从小时候说起" class="headerlink" title="从小时候说起"></a>从小时候说起</h2><p>小时候妈妈教导我……咳咳，打开方式不太对。</p>
<p>小的时候我的娱乐活动比较少，空闲时间基本上都是在看书中度过的，其中有一本书我记得很清楚，叫做《数学游戏》，里面是各种数学题，很多有趣很多有意思的题目，直到现在仍然对其中的题目印象非常深刻，还有再读一遍的冲动。</p>
<p>好，进入正题，这本书中有这样一个题目：</p>
<blockquote>
<p>国王为10天后的生日宴会准备了1000桶酒，不幸的是，其中一桶被下了毒。为了确定哪桶是毒酒，有人提议用死刑犯试毒。毒的潜伏期为10天。问：至少需要多少个死刑犯才能确保找出毒酒？方案如何实行？</p>
</blockquote>
<p>以我小学生的智力水平，书中的题目大部分都是这个难度，我也都是直接放弃看答案了，这里我们还是稍微给自己一点时间稍微思考一下：</p>
<a id="more"></a>
<p><img src="/assets/Hamming_Code/14642488356727964.jpg" alt><br><img src="/assets/Hamming_Code/14642488357089277.jpg" alt></p>
<p>好的！还是不会！</p>
<p>答案这里使用简单一点的举个例子，比如我们有八桶酒，分别编号0-7，需要几个死刑犯才能试出毒酒呢？</p>
<p>三个</p>
<p><strong>一号罪犯喝  4 5 6 7 四桶</strong></p>
<p><strong>二号罪犯喝  2 3 6 7 四桶</strong></p>
<p><strong>三号罪犯喝  1 3 5 7 四桶</strong></p>
<p>（三个罪犯都撑死了</p>
<p>然后用0和1代表罪犯生存或者死亡，生死和毒酒之间的关系如下</p>
<table>
<thead>
<tr>
<th>一号罪犯</th>
<th>二号罪犯</th>
<th>三号罪犯</th>
<th>毒桶</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>三个罪犯都没死，0号都没喝</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>只有三号喝了1号</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>只有二号喝了2号</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>3</td>
<td>…</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>…</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>5</td>
<td>…</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>6</td>
<td>三号没死 1357 是好的 除此之外只有 6 号一二号都喝了</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>7</td>
<td>都死了，有且只有7三个罪犯都喝了</td>
</tr>
</tbody></table>
<p>哇，这东西看上去好熟悉，这不就是二进制么！这样三个罪犯就可以通过这样的方法，最大检查 $2^3 = 8$ 桶酒的是否有毒。以此类推的话，1000桶酒需要 $2^{10} = 1024 &gt; 1000$ 也就是十个罪犯来检验。done，问题解决</p>
<h2 id="纠错"><a href="#纠错" class="headerlink" title="纠错"></a>纠错</h2><p>这个时候明眼人已经看出来了，为什么举上面这个栗子呢，这个例子实际上就是一个纠错的过程，在1000位数据中找到错误的一位数据，找到了就可以纠正这位数据，支付的代价就是对于1000位数据而言，还需要10位数据（罪犯）的状态去进行验证。</p>
<p>我们来看一下一般情况下的汉明码是怎么去实现的。</p>
<p>例如我们需要传输4个bit的数据 1101 。这里出现了第一个与上面例子不同的地方，就是我们验证的校验位也是需要随同数据一同发送出去的，校验位同样有发送错误的可能性，所以校验位也需要能够对其本身进行校验。假设需要传输的位数为 n ，校验位为 k 的话，我们需要通过这个公式来确定校验位的个数，也就是 k 的大小。</p>
<p>$$ 2^k &gt;= n+k $$</p>
<p>so easy。这个公式的意思就是校验位总共能够校验的位数要大于数据位加上校验位之和。这样对于我们的例子而言 n = 4 ，所以 k 取3，这样校验位的位数就能够满足我们验证一位错误的需求。具体操作如下：</p>
<p>首先我们需要发送的总数据位数为 $n + k = 7$ 位</p>
<table>
<thead>
<tr>
<th>圈</th>
<th>圈</th>
<th>圈</th>
<th>圈</th>
<th>圈</th>
<th>圈</th>
<th>圈</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<p> （圈是占地方的</p>
<p>把所有2的幂次位作为校验位，也就是1、2、4、8、16这些位置，这里我们用 C 表示</p>
<table>
<thead>
<tr>
<th>C0</th>
<th>C1</th>
<th>圈</th>
<th>C2</th>
<th>圈</th>
<th>圈</th>
<th>圈</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<p>其他位置填充数据，这里我们用D表示</p>
<table>
<thead>
<tr>
<th>C0</th>
<th>C1</th>
<th>D0</th>
<th>C2</th>
<th>D1</th>
<th>D2</th>
<th>D3</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>-</td>
<td>1</td>
<td>-</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<p>然后我们给每一位校验位（罪犯）分配各自校验的数据位（毒酒）</p>
<p>这里用 A 代表整个7位数据</p>
<p>C0： A0  A2  A4  A6   也即  C0 D0 D1 D3</p>
<p>C1： A1  A2  A5  A6   也即  C1 D0 D2 D3</p>
<p>C2： A3  A4  A5  A6   也即  C2 D1 D2 D3</p>
<p>规则如下：第一位校验位校验所有能够整除2的位数，也就是二进制表示中最低位为1的。第二位校验位校验所有能够整除4的，也就是二级制表示中次低位为1的。</p>
<p>因为校验位同时也需要校验自己，是2的幂次，所以也可以这样表示：<strong>校验位校验与其按位求与结果为1的。</strong></p>
<p>然后我们根据配偶原则，让校验位与其所校验的数据位1的个数为偶数，也即加和的最低位为0。</p>
<p>对于 C0 将其校验的数据，除掉自身都写出来： 1 1 1 奇 C0 取 1</p>
<p>同样对于 C1： 1 0 1 偶 C1 取 0</p>
<p>同样对于 C2： 1 0 1 偶 C2 取 0</p>
<p>这样拼出我们最终的总数据</p>
<table>
<thead>
<tr>
<th>C0</th>
<th>C1</th>
<th>D0</th>
<th>C2</th>
<th>D1</th>
<th>D2</th>
<th>D3</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<p>That‘s it！，这样我们最后传输的数据为 1 0 1 0 1 0 1 ，可以纠错的位数为1</p>
<h3 id="试验"><a href="#试验" class="headerlink" title="试验"></a>试验</h3><p>试验一下纠错，例如在数据传输的过程中有一位发生了错误  变成了  1 0 1 0 1 1 1</p>
<p>将其中2的幂次位的校验位对应校验的数据提出来，求其和，看奇偶</p>
<table>
<thead>
<tr>
<th>数据位</th>
<th>值</th>
<th>奇偶</th>
</tr>
</thead>
<tbody><tr>
<td>A0 A2 A4 A6</td>
<td>1 1 1 1</td>
<td>0</td>
</tr>
<tr>
<td>A1 A2 A5 A6</td>
<td>0 1 1 1</td>
<td>1</td>
</tr>
<tr>
<td>A3 A4 A5 A6</td>
<td>0 1 1 1</td>
<td>1</td>
</tr>
</tbody></table>
<p>哇，是不是又好熟悉，和第一节中的例子一样，所以我们把这三位拼起来 1 1 0 （倒过来），二进制表示是6， 也即第六位是错误的数据位！</p>
<p>哇，好厉害。 这样就完成了</p>
<h2 id="回顾与分析"><a href="#回顾与分析" class="headerlink" title="回顾与分析"></a>回顾与分析</h2><p>了解了汉明码的使用和纠错的过程，我们来仔细回顾看一下其中一些细节的问题</p>
<ol>
<li>汉明码纠错能力只有一位，不管数据长度是多少，根据数据长度使用对应长度的纠错码，可以校验并具备一位的纠错能力。同时可以推想，在实际应用中不适宜对太长的数据直接使用汉明码处理纠错，应该分割为小块分别使用，增加纠错能力。实际上正是因为如此，汉明码也被称为是一种线性分组码，将长数据划分为小块分别编码。</li>
<li>中间我们在确定校验位的0或1时，使用的是配偶原则。同样，存在着配奇原则，使其对应位数数据相加为奇数，实际使用中两种方法并无区别。</li>
<li>汉明码数据中所有2的幂次位置都被校验位占据，所以如果校验码中只有一位为1，其余为0的情况的话，是校验码出错，可以直接读数据，结果是正确的。如果是数据位出错的话，则校验码中至少有两位是1。</li>
<li>数据共有n位，我们至少需要k位进行校验，其满足这样的关系：</li>
</ol>
<p>$$ 2^k &gt;= n+k $$</p>
<ol start="5">
<li>以上说的情况的前提都是只有一位出错的情况。那么如果出现两位错误，仍然举上面的例子，我们获得的数据为 1 0 0 1 1 0 1 这种情况下：</li>
</ol>
<table>
<thead>
<tr>
<th>数据位</th>
<th>值</th>
<th>奇偶</th>
</tr>
</thead>
<tbody><tr>
<td>A0 A2 A4 A6</td>
<td>1 0 1 1</td>
<td>1</td>
</tr>
<tr>
<td>A1 A2 A5 A6</td>
<td>0 0 0 1</td>
<td>1</td>
</tr>
<tr>
<td>A3 A4 A5 A6</td>
<td>1 1 0 1</td>
<td>1</td>
</tr>
</tbody></table>
<p>可以看到仍然认为数据是错误的，但是已经不具备纠错的能力了。在普遍意义下，汉明码是能够具备2位的检测能力的，也即，知道数据有错误，但是并不具备2位的纠错能力。</p>
<p>除此之外，想要对汉明码进一步了解的话，可以再搜索一下这些关键字：汉明码的纠错能力和检测能力  最小码距  汉明距离</p>
]]></content>
      <tags>
        <tag>Communication</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1155</title>
    <url>/2019/08/12/leetcode_1155/</url>
    <content><![CDATA[<!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">
  <title>leetcode_1155</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <link rel="stylesheet" href="/js/src/katex/katex.min.css">
      
      

  
  
  
  
  
  

  <style>
  /**
* prism.js Github theme based on GitHub's theme.
* @author Sam Clarke
*/
code[class*="language-"],
pre[class*="language-"] {
color: #333;
background: none;
font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
text-align: left;
white-space: pre;
word-spacing: normal;
word-break: normal;
word-wrap: normal;
line-height: 1.4;

-moz-tab-size: 8;
-o-tab-size: 8;
tab-size: 8;

-webkit-hyphens: none;
-moz-hyphens: none;
-ms-hyphens: none;
hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
padding: .8em;
overflow: auto;
/* border: 1px solid #ddd; */
border-radius: 3px;
/* background: #fff; */
background: #f5f5f5;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
padding: .1em;
border-radius: .3em;
white-space: normal;
background: #f5f5f5;
}

.token.comment,
.token.blockquote {
color: #969896;
}

.token.cdata {
color: #183691;
}

.token.doctype,
.token.punctuation,
.token.variable,
.token.macro.property {
color: #333;
}

.token.operator,
.token.important,
.token.keyword,
.token.rule,
.token.builtin {
color: #a71d5d;
}

.token.string,
.token.url,
.token.regex,
.token.attr-value {
color: #183691;
}

.token.property,
.token.number,
.token.boolean,
.token.entity,
.token.atrule,
.token.constant,
.token.symbol,
.token.command,
.token.code {
color: #0086b3;
}

.token.tag,
.token.selector,
.token.prolog {
color: #63a35c;
}

.token.function,
.token.namespace,
.token.pseudo-element,
.token.class,
.token.class-name,
.token.pseudo-class,
.token.id,
.token.url-reference .token.variable,
.token.attr-name {
color: #795da3;
}

.token.entity {
cursor: help;
}

.token.title,
.token.title .token.punctuation {
font-weight: bold;
color: #1d3e81;
}

.token.list {
color: #ed6a43;
}

.token.inserted {
background-color: #eaffea;
color: #55a532;
}

.token.deleted {
background-color: #ffecec;
color: #bd2c00;
}

.token.bold {
font-weight: bold;
}

.token.italic {
font-style: italic;
}


/* JSON */
.language-json .token.property {
color: #183691;
}

.language-markup .token.tag .token.punctuation {
color: #333;
}

/* CSS */
code.language-css,
.language-css .token.function {
color: #0086b3;
}

/* YAML */
.language-yaml .token.atrule {
color: #63a35c;
}

code.language-yaml {
color: #183691;
}

/* Ruby */
.language-ruby .token.function {
color: #333;
}

/* Markdown */
.language-markdown .token.url {
color: #795da3;
}

/* Makefile */
.language-makefile .token.symbol {
color: #795da3;
}

.language-makefile .token.variable {
color: #183691;
}

.language-makefile .token.builtin {
color: #0086b3;
}

/* Bash */
.language-bash .token.keyword {
color: #0086b3;
}

/* highlight */
pre[data-line] {
position: relative;
padding: 1em 0 1em 3em;
}
pre[data-line] .line-highlight-wrapper {
position: absolute;
top: 0;
left: 0;
background-color: transparent;
display: block;
width: 100%;
}

pre[data-line] .line-highlight {
position: absolute;
left: 0;
right: 0;
padding: inherit 0;
margin-top: 1em;
background: hsla(24, 20%, 50%,.08);
background: linear-gradient(to right, hsla(24, 20%, 50%,.1) 70%, hsla(24, 20%, 50%,0));
pointer-events: none;
line-height: inherit;
white-space: pre;
}

pre[data-line] .line-highlight:before, 
pre[data-line] .line-highlight[data-end]:after {
content: attr(data-start);
position: absolute;
top: .4em;
left: .6em;
min-width: 1em;
padding: 0 .5em;
background-color: hsla(24, 20%, 50%,.4);
color: hsl(24, 20%, 95%);
font: bold 65%/1.5 sans-serif;
text-align: center;
vertical-align: .3em;
border-radius: 999px;
text-shadow: none;
box-shadow: 0 1px white;
}

pre[data-line] .line-highlight[data-end]:after {
content: attr(data-end);
top: auto;
bottom: .4em;
}html body{font-family:"Helvetica Neue",Helvetica,"Segoe UI",Arial,freesans,sans-serif;font-size:16px;line-height:1.6;color:#333;background-color:#fff;overflow:initial;box-sizing:border-box;word-wrap:break-word}html body>:first-child{margin-top:0}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{line-height:1.2;margin-top:1em;margin-bottom:16px;color:#000}html body h1{font-size:2.25em;font-weight:300;padding-bottom:.3em}html body h2{font-size:1.75em;font-weight:400;padding-bottom:.3em}html body h3{font-size:1.5em;font-weight:500}html body h4{font-size:1.25em;font-weight:600}html body h5{font-size:1.1em;font-weight:600}html body h6{font-size:1em;font-weight:600}html body h1,html body h2,html body h3,html body h4,html body h5{font-weight:600}html body h5{font-size:1em}html body h6{color:#5c5c5c}html body strong{color:#000}html body del{color:#5c5c5c}html body a:not([href]){color:inherit;text-decoration:none}html body a{color:#08c;text-decoration:none}html body a:hover{color:#00a3f5;text-decoration:none}html body img{max-width:100%}html body>p{margin-top:0;margin-bottom:16px;word-wrap:break-word}html body>ul,html body>ol{margin-bottom:16px}html body ul,html body ol{padding-left:2em}html body ul.no-list,html body ol.no-list{padding:0;list-style-type:none}html body ul ul,html body ul ol,html body ol ol,html body ol ul{margin-top:0;margin-bottom:0}html body li{margin-bottom:0}html body li.task-list-item{list-style:none}html body li>p{margin-top:0;margin-bottom:0}html body .task-list-item-checkbox{margin:0 .2em .25em -1.8em;vertical-align:middle}html body .task-list-item-checkbox:hover{cursor:pointer}html body blockquote{margin:16px 0;font-size:inherit;padding:0 15px;color:#5c5c5c;border-left:4px solid #d6d6d6}html body blockquote>:first-child{margin-top:0}html body blockquote>:last-child{margin-bottom:0}html body hr{height:4px;margin:32px 0;background-color:#d6d6d6;border:0 none}html body table{margin:10px 0 15px 0;border-collapse:collapse;border-spacing:0;display:block;width:100%;overflow:auto;word-break:normal;word-break:keep-all}html body table th{font-weight:bold;color:#000}html body table td,html body table th{border:1px solid #d6d6d6;padding:6px 13px}html body dl{padding:0}html body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:bold}html body dl dd{padding:0 16px;margin-bottom:16px}html body code{font-family:Menlo,Monaco,Consolas,'Courier New',monospace;font-size:.85em !important;color:#000;background-color:#f0f0f0;border-radius:3px;padding:.2em 0}html body code::before,html body code::after{letter-spacing:-0.2em;content:"\00a0"}html body pre>code{padding:0;margin:0;font-size:.85em !important;word-break:normal;white-space:pre;background:transparent;border:0}html body .highlight{margin-bottom:16px}html body .highlight pre,html body pre{padding:1em;overflow:auto;font-size:.85em !important;line-height:1.45;border:#d6d6d6;border-radius:3px}html body .highlight pre{margin-bottom:0;word-break:normal}html body pre code,html body pre tt{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}html body pre code:before,html body pre tt:before,html body pre code:after,html body pre tt:after{content:normal}html body p,html body blockquote,html body ul,html body ol,html body dl,html body pre{margin-top:0;margin-bottom:16px}html body kbd{color:#000;border:1px solid #d6d6d6;border-bottom:2px solid #c7c7c7;padding:2px 4px;background-color:#f0f0f0;border-radius:3px}@media print{html body{background-color:#fff}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{color:#000;page-break-after:avoid}html body blockquote{color:#5c5c5c}html body pre{page-break-inside:avoid}html body table{display:table}html body img{display:block;max-width:100%;max-height:100%}html body pre,html body code{word-wrap:break-word;white-space:pre}}.markdown-preview{width:100%;height:100%;box-sizing:border-box}.markdown-preview .pagebreak,.markdown-preview .newpage{page-break-before:always}.markdown-preview pre.line-numbers{position:relative;padding-left:3.8em;counter-reset:linenumber}.markdown-preview pre.line-numbers>code{position:relative}.markdown-preview pre.line-numbers .line-numbers-rows{position:absolute;pointer-events:none;top:1em;font-size:100%;left:0;width:3em;letter-spacing:-1px;border-right:1px solid #999;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.markdown-preview pre.line-numbers .line-numbers-rows>span{pointer-events:none;display:block;counter-increment:linenumber}.markdown-preview pre.line-numbers .line-numbers-rows>span:before{content:counter(linenumber);color:#999;display:block;padding-right:.8em;text-align:right}.markdown-preview .mathjax-exps .MathJax_Display{text-align:center !important}.markdown-preview:not([for="preview"]) .code-chunk .btn-group{display:none}.markdown-preview:not([for="preview"]) .code-chunk .status{display:none}.markdown-preview:not([for="preview"]) .code-chunk .output-div{margin-bottom:16px}.scrollbar-style::-webkit-scrollbar{width:8px}.scrollbar-style::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}.scrollbar-style::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode]){position:relative;width:100%;height:100%;top:0;left:0;margin:0;padding:0;overflow:auto}html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{position:relative;top:0}@media screen and (min-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em calc(50% - 457px + 2em)}}@media screen and (max-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{font-size:14px !important;padding:1em}}@media print{html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{display:none}}html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{position:fixed;bottom:8px;left:8px;font-size:28px;cursor:pointer;color:inherit;z-index:99;width:32px;text-align:center;opacity:.4}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] #sidebar-toc-btn{opacity:1}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc{position:fixed;top:0;left:0;width:300px;height:100%;padding:32px 0 48px 0;font-size:14px;box-shadow:0 0 4px rgba(150,150,150,0.33);box-sizing:border-box;overflow:auto;background-color:inherit}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar{width:8px}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc a{text-decoration:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{padding:0 1.6em;margin-top:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc li{margin-bottom:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{list-style-type:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{left:300px;width:calc(100% -  300px);padding:2em calc(50% - 457px -  150px);margin:0;box-sizing:border-box}@media screen and (max-width:1274px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{width:100%}}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .markdown-preview{left:50%;transform:translateX(-50%)}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .md-sidebar-toc{display:none}
/* Please visit the URL below for more information: */
/*   https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css */

  </style>
</head>
<body for="html-export">
  <div class="mume markdown-preview  ">
 
<p>LeetCode Contest 149 No.2</p>
<blockquote>
  <p>&#x8FD9;&#x91CC;&#x6709; <strong>d</strong>&#xA0;&#x4E2A;&#x4E00;&#x6837;&#x7684;&#x9AB0;&#x5B50;&#xFF0C;&#x6BCF;&#x4E2A;&#x9AB0;&#x5B50;&#x4E0A;&#x90FD;&#x6709;&#xA0;<strong>f</strong>&#xA0;&#x4E2A;&#x9762;&#xFF0C;&#x5206;&#x522B;&#x6807;&#x53F7;&#x4E3A;&#xA0;<strong>1, 2, ..., f</strong>&#x3002;</p>

<p>&#x6211;&#x4EEC;&#x7EA6;&#x5B9A;&#xFF1A;&#x63B7;&#x9AB0;&#x5B50;&#x7684;&#x5F97;&#x5230;&#x603B;&#x70B9;&#x6570;&#x4E3A;&#x5404;&#x9AB0;&#x5B50;&#x9762;&#x671D;&#x4E0A;&#x7684;&#x6570;&#x5B57;&#x7684;&#x603B;&#x548C;&#x3002;</p>
<p>&#x5982;&#x679C;&#x9700;&#x8981;&#x63B7;&#x51FA;&#x7684;&#x603B;&#x70B9;&#x6570;&#x4E3A;&#xA0;<strong>target</strong>&#xFF0C;&#x8BF7;&#x4F60;&#x8BA1;&#x7B97;&#x51FA;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x7EC4;&#x5408;&#x60C5;&#x51B5;&#xFF08;&#x6240;&#x6709;&#x7684;&#x7EC4;&#x5408;&#x60C5;&#x51B5;&#x603B;&#x5171;&#x6709; <strong>f^d</strong> &#x79CD;&#xFF09;&#xFF0C;&#x6A21;&#xA0;<strong>10^9 + 7</strong>&#xA0;&#x540E;&#x8FD4;&#x56DE;&#x3002;</p>
</blockquote>
<p>&#x4E00;&#x5F00;&#x59CB;&#x6211;&#x4EE5;&#x4E3A;&#x8FD9;&#x662F;&#x4E00;&#x9053;&#x6570;&#x5B66;&#x9898;&#xFF0C;&#x6392;&#x5217;&#x7EC4;&#x5408;&#x7684;&#x6570;&#x5B66;&#x9898;</p>
<p>&#x56E0;&#x4E3A;&#x4E0A;&#x5B66;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x662F;&#x90A3;&#x6837;&#x505A;&#x7684;&#xFF0C;&#x53EA;&#x662F;&#x6709;&#x4E9B;&#x7279;&#x6B8A;&#x60C5;&#x51B5;</p>
<a id="more"></a>
<p>&#x7136;&#x540E;&#x6211;&#x53D1;&#x73B0;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x7279;&#x6B8A;&#x60C5;&#x51B5;&#x6570;&#x90FD;&#x6570;&#x4E0D;&#x5B8C;&#xFF0C;&#x6211;&#x50BB;&#x4E86;</p>
<p>&#x6709;&#x90A3;&#x4E48;&#x4E00;&#x4E2A;&#x77AC;&#x95F4;&#x6211;&#x5728;&#x60F3;&#x4F1A;&#x4E0D;&#x4F1A;&#x662F; DP &#xFF0C;&#x4F3C;&#x4E4E;&#x6709;&#x70B9;&#x50CF;</p>
<p>&#x4F46;&#x662F;&#x6211;&#x4E0D;&#x786E;&#x5B9A;&#xFF0C;&#x968F;&#x4FBF;&#x60F3;&#x4E00;&#x4E0B;&#x4E5F;&#x6CA1;&#x6709;&#x60F3;&#x5230; DP &#x600E;&#x4E48;&#x505A;</p>
<p>&#x4E8E;&#x662F;&#x6211;&#x5C31;&#x653E;&#x5F03;&#x8FD9;&#x6761;&#x601D;&#x8DEF;&#x53BB;&#x770B; airpods &#x53BB;&#x4E86;&#x3002;&#x3002;&#x3002;&#x3002;</p>
<p>&#x7ADE;&#x8D5B;&#x7ED3;&#x675F;&#x4E4B;&#x540E;&#x6211;&#x770B;&#x4E86;&#x770B;&#x522B;&#x4EBA;&#x7684;&#x7B54;&#x6848;&#xFF0C;&#x53EA;&#x770B;&#x4E86;&#x4E24;&#x79D2;&#x949F;</p>
<p>&#x8FD9;&#x4E0D;&#x5C31;&#x662F;DP&#x4E48;&#xFF0C;&#x6211;&#x5173;&#x6389;&#x89E3;&#x7B54;&#x5F00;&#x59CB;&#x81EA;&#x5DF1;&#x597D;&#x597D;&#x505A;&#x8FD9;&#x9053;&#x9898;</p>
<p>&#x5F00;&#x59CB;&#xFF1A;</p>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
<span class="token keyword">def</span> <span class="token function">numRollsToTarget</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    MOD <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>target <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>
            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">-</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span>MOD 
</pre><p>&#x4E0B;&#x9762;&#x4EE5;5&#x4E2A;&#x9AB0;&#x5B50;&#xFF0C;&#x6BCF;&#x4E2A;&#x9AB0;&#x5B50;6&#x4E2A;&#x9762;&#xFF0C;&#x8981;&#x6C42;&#x603B;&#x548C;&#x4E3A;16&#x4E3E;&#x4F8B;&#xFF1A;</p>
<p>&#x521B;&#x5EFA;&#x4E00;&#x4E2A;5*16&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x6A2A;&#x5411;&#x4EE3;&#x8868;&#x9AB0;&#x5B50;&#x7684;&#x70B9;&#x6570;&#x603B;&#x548C;&#xFF0C;&#x7EB5;&#x5411;&#x4EE3;&#x8868;&#x9AB0;&#x5B50;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x8868;&#x683C;&#x5185;&#x7684;&#x6570;&#x5B57;&#x4EE3;&#x8868;&#x7528;x&#x4E2A;&#x9AB0;&#x5B50;&#x62FC;&#x51D1;&#x51FA;y&#x7684;&#x70B9;&#x6570;&#x603B;&#x548C;&#xFF0C;&#x5171;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x60C5;&#x51B5;</p>
<p>&#x9996;&#x5148;&#x586B;&#x5199;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x6570;&#x636E;&#xFF1A;&#x7528;&#x4E00;&#x4E2A;&#x9AB0;&#x5B50;&#x6254;&#x51FA;&#x603B;&#x548C;&#x662F; 1&#x3001;2&#x3001;3&#x3001;4&#x3001;5&#x3001;6 &#x7684;&#x60C5;&#x51B5;&#x5747;&#x53EA;&#x6709;&#x4E00;&#x79CD;&#xFF0C;&#x7528;&#x4E00;&#x4E2A;&#x9AB0;&#x5B50;&#x6254;&#x51FA;&#x603B;&#x548C;&#x662F;7&#x3001;8&#x3001;9&#x7B49;&#x7684;&#x60C5;&#x51B5;&#x4E0D;&#x5B58;&#x5728;</p>
<p><img src="/assets/leetcode_1155/1155_1.png" alt="1"></p>
<p>&#x586B;&#x5199;&#x7B2C;&#x4E8C;&#x884C;&#x7684;&#x6570;&#x636E;&#xFF1A;</p>
<p>&#x7528;&#x4E24;&#x4E2A;&#x9AB0;&#x5B50;&#x6254;&#x51FA;&#x603B;&#x548C;&#x662F;1&#x7684;&#x53EF;&#x80FD;&#x60C5;&#x51B5;&#x4E0D;&#x5B58;&#x5728;<br>
&#x7528;&#x4E24;&#x4E2A;&#x9AB0;&#x5B50;&#x6254;&#x51FA;&#x603B;&#x548C;&#x662F;2&#x7684;&#x53EF;&#x80FD;&#x60C5;&#x51B5;&#x53EA;&#x6709;1&#x79CD;&#xFF0C;&#x662F;(1,1)<br>
&#x7528;&#x4E24;&#x4E2A;&#x9AB0;&#x5B50;&#x6254;&#x51FA;&#x603B;&#x548C;&#x662F;3&#x7684;&#x53EF;&#x80FD;&#x60C5;&#x51B5;&#x6709;&#x4E24;&#x79CD;&#xFF0C;&#x662F;(1,2)&#x548C;(2,1)<br>
&#x4F9D;&#x6B21;&#x7C7B;&#x63A8;</p>
<p>&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x53BB;&#x8003;&#x8651;&#xFF1A;&#x7B2C;&#x4E8C;&#x4E2A;&#x9AB0;&#x5B50;&#x53EF;&#x80FD;&#x6254;&#x51FA;&#x7684;&#x60C5;&#x51B5;&#x662F;1&#x3001;2&#x3001;3&#x3001;4&#x3001;5&#x3001;6&#x516D;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x4E3E;&#x4F8B;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x8981;&#x586B;&#x5199;&#x7B2C;&#x4E8C;&#x884C;&#x7B2C;&#x516B;&#x4E2A;&#x7A7A;&#x683C;&#xFF0C;&#x5373;&#x8981;&#x6C42;&#x6254;&#x51FA;&#x7684;&#x603B;&#x548C;&#x4E3A;8&#xFF0C;&#x90A3;&#x4E48;8&#x7684;&#x53EF;&#x80FD;&#x60C5;&#x51B5;&#x6570;&#x91CF;&#x4E3A;&#x4EE5;&#x524D;&#x7684;&#x9AB0;&#x5B50;&#x6254;&#x51FA;&#x7684;&#x60C5;&#x51B5;&#x4E3A;7&#x3001;6&#x3001;5&#x3001;4&#x3001;3&#x3001;2&#x8FD9;&#x516D;&#x79CD;&#x60C5;&#x51B5;&#x7684;&#x603B;&#x548C;&#x3002;&#x5373;&#xFF0C;&#x5F53;&#x7B2C;&#x4E8C;&#x4E2A;&#x9AB0;&#x5B50;&#x6254;&#x51FA;1&#x65F6;&#xFF0C;&#x4EE5;&#x524D;&#x7684;&#x9AB0;&#x5B50;&#x603B;&#x548C;&#x4E3A;7&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x9AB0;&#x5B50;&#x6254;&#x51FA;2&#x65F6;&#xFF0C;&#x4EE5;&#x524D;&#x7684;&#x9AB0;&#x5B50;&#x603B;&#x548C;&#x4E3A;6&#xFF0C;&#x4F9D;&#x6B21;&#x7C7B;&#x63A8;</p>
<p><img src="/assets/leetcode_1155/1155_2.png" alt="2"></p>
<p><img src="/assets/leetcode_1155/1155_3.png" alt="3"></p>
<p>&#x5728;&#x8868;&#x683C;&#x4E2D;&#x8868;&#x793A;&#x5373;&#x4E3A;&#xFF0C;&#x67D0;&#x4E00;&#x683C;&#x7684;&#x503C;&#x4E3A;&#x5728;&#x4E0A;&#x4E00;&#x884C;&#x4E0D;&#x5305;&#x62EC;&#x5F53;&#x524D;&#x683C;&#x5B50;&#x5411;&#x5DE6;&#x6570;&#x516D;&#x4E2A;&#x683C;&#x5B50;&#x7684;&#x603B;&#x548C;&#xFF0C;&#x5373;&#x4E0B;&#x56FE;&#x6A59;&#x8272;&#x6846;&#x8868;&#x793A;&#x7684;&#x533A;&#x57DF;</p>
<p><img src="/assets/leetcode_1155/1155_5.gif" alt="4"></p>
<p>&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#x586B;&#x5199;&#x5B8C;&#x6574;&#x4E2A;&#x8868;&#x683C;</p>
<p>&#x5728;&#x672C;&#x4F8B;&#x4E2D;&#xFF0C;&#x8868;&#x683C;&#x53F3;&#x4E0B;&#x89D2;&#x7684;&#x6570;&#x5B57;&#x5373;&#x4E3A;5&#x4E2A;&#x9AB0;&#x5B50;&#x6254;&#x51FA;&#x603B;&#x548C;&#x4E3A;16&#x7684;&#x53EF;&#x80FD;&#x60C5;&#x51B5;&#x6570;&#x91CF;&#xFF0C;&#x4E3A;735</p>
<p>&#x5C06;&#x672C;&#x4F8B;&#x62D3;&#x5BBD;&#x5230;d&#x4E2A;&#x9AB0;&#x5B50;f&#x4E2A;&#x9762;&#x6254;&#x51FA;&#x603B;&#x548C;&#x4E3A;target&#x7684;&#x60C5;&#x51B5;&#x6570;&#x91CF;&#x5373;&#x4E3A;&#x9898;&#x76EE;&#x8981;&#x6C42;</p>
<p>&#x4E0B;&#x9762;&#x91CD;&#x65B0;&#x770B;&#x4E00;&#x4E0B;&#x7A0B;&#x5E8F;&#x5E76;&#x5C06;&#x6574;&#x4E2A;&#x8FC7;&#x7A0B;&#x68B3;&#x7406;&#x4E00;&#x904D;</p>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
<span class="token keyword">def</span> <span class="token function">numRollsToTarget</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    MOD <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>target <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># &#x521D;&#x59CB;&#x5316;&#x6570;&#x7EC4;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># &#x586B;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x6570;</span>
    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>
            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">-</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># &#x4F9D;&#x6B21;&#x586B;&#x5199;&#x540E;&#x9762;&#x884C;&#x7684;&#x6570;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span>MOD <span class="token comment">#&#x8FD4;&#x56DE;&#x6700;&#x7EC8;&#x6570;&#x7684;MOD&#x503C;</span>
</pre><ol>
<li>&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x77E9;&#x9635;&#xFF0C;&#x884C;&#x6570;&#x4E3A;d&#xFF0C;&#x5217;&#x6570;&#x4E3A;target&#xFF0C;&#x77E9;&#x9635;&#x5185;&#x5BB9;&#x521D;&#x59CB;&#x5316;&#x4E3A;0</li>
<li>&#x5C06;&#x7B2C;&#x4E00;&#x884C;&#x524D;f&#x4E2A;&#x6570;&#x586B;&#x4E3A;1</li>
<li>&#x5BF9;&#x4E8E;&#x5269;&#x4F59;&#x7684;&#x683C;&#x5B50;&#xFF0C;&#x6BCF;&#x4E2A;&#x683C;&#x5B50;&#x7B49;&#x4E8E;&#x4E0A;&#x4E00;&#x884C;&#x5411;&#x524D;&#x6570;f&#x4E2A;&#x6570;&#x7684;&#x548C;</li>
<li>&#x8FD4;&#x56DE;&#x77E9;&#x9635;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;</li>
</ol>
<p>DONE</p>

  </div>
  
  









</body></html>]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Contest No.132</title>
    <url>/2019/07/23/leetcode-contest-No132/</url>
    <content><![CDATA[<h2 id="Contest-132"><a href="#Contest-132" class="headerlink" title="Contest 132"></a>Contest 132</h2><p>通过：3/4  排名：99/1047  0:59:44  1WA</p>
<p>最后一道题规定时间内没有做出来，超时7分钟做出来的，无错误提交（似乎）。</p>
<p>这次竞赛感觉看完题都比较虚，但是其实做题之后的效果比预想的好，虽然最后一道题规定时间内没有做出来，但是感觉可以接受，也是很久没有出过 hard 的题目了，这次的 hard 题目实现的相当的。。。。复杂且乱，但是能做出来就是好事。</p>
<h3 id="No-5024-除数博弈"><a href="#No-5024-除数博弈" class="headerlink" title="No.5024 除数博弈"></a>No.5024 <a href="https://leetcode-cn.com/contest/weekly-contest-132/problems/divisor-game/" target="_blank" rel="noopener">除数博弈</a></h3><p>1WA</p>
<p>看到这个题，感觉可能是动态规划后，第一个想法：动态规划都是简单的题了啊！</p>
<p>是的，这道题还花了整整20分钟才做出来，感觉其中十分钟浪费在了不可置信上和另外一些事情上。。。这次做竞赛太不专心了，批评一下自己，竞赛还是要好好做的。</p>
<p>实现思路上没啥可说的，就是动态规划的思路，从小到大依次遍历所有约数对应的<code>N-x</code>的值，所有约数全部为 true 的时候，这时无论先手做如何操作，对方都是必胜的情况，所以这时的 N 为 false ，其余所有情况均为 true ，只需要在每一步操作时将 N 的值变为对应的 false 的 <code>N-x</code> 的值即可。</p>
  <a id="more"></a>
<h3 id="No-5030-节点与其祖先之间的最大差值"><a href="#No-5030-节点与其祖先之间的最大差值" class="headerlink" title="No.5030 节点与其祖先之间的最大差值"></a>No.5030 <a href="https://leetcode-cn.com/contest/weekly-contest-132/problems/maximum-difference-between-node-and-ancestor/" target="_blank" rel="noopener">节点与其祖先之间的最大差值</a></h3><p>一开始脑袋有点乱，想用 pair&lt;int,int&gt; 去实现同时寻找最大值最小值，但是思路一直没有理顺，抱着这次竞赛就放弃了的态度（。。。。）就想着先只写一个 max 吧，很快完成之后，同样的方法复制一份 min ，游戏结束。</p>
<p>思路：后序遍历，先左后右找最大最小值，然后向上计算最大差值，重复循环即可。</p>
<p>注：这里的最大最小值是需要跟着遍历走的，而且必须是后序遍历，这样才不会左右子树之间的最大最小值互串。</p>
<h3 id="No-5025-最长等差数列"><a href="#No-5025-最长等差数列" class="headerlink" title="No.5025 最长等差数列"></a>No.5025 <a href="https://leetcode-cn.com/contest/weekly-contest-132/problems/longest-arithmetic-sequence/" target="_blank" rel="noopener">最长等差数列</a></h3><p>最没想到的一道题，看完题目毫无思路，而且感觉以前见过类似的题，但是没有做，也没有去找答案怎么实现，感觉自己栽在了自己的手上。按照上一道题的破罐子破摔的思路，想着就用朴素方法做吧，最后一道 hard 的题目看着也不面善，这个至少朴素方法的思路还是有的，甚至实现后都没怎么跑例子测试，没想到直接通过了。思路也没啥思路，暴力搜索。</p>
<p>TODO: 认真去看看别人的实现，回来写一下思路。</p>
<h3 id="No-5031-从先序遍历还原二叉树"><a href="#No-5031-从先序遍历还原二叉树" class="headerlink" title="No.5031 从先序遍历还原二叉树"></a>No.5031 <a href="https://leetcode-cn.com/contest/weekly-contest-132/problems/recover-a-tree-from-preorder-traversal/" target="_blank" rel="noopener">从先序遍历还原二叉树</a></h3><p>好可惜的题，有了思路之后只剩下不到二十分钟了，然后最后快到时的时候其实主要思路也完成了，缺少一个判断，没有理清楚逻辑放在哪里，生生拖到七分钟。</p>
<p>字符串！字符串！字符串！重要的事情，唉，说三遍也不管用，不知道第几次栽在字符串上面了，但是我的字符串水平还是停留在磕磕绊绊能实现上。用了一个超复杂的方式把原始字符串的数据整齐的摆放在了一个 vector&lt;pair&lt;int,int&gt;&gt; 当中，嗯，是我做事情的风格，东西要摆整齐。后面遍历问题倒是不大。</p>
<p>用一个 stack 保存当前处理的 TreeNode 节点，并留一个变量保存当前深度，对每一个新的数字，判断深度的关系:。情况1：如果新数是当前节点的下一层，判断当前节点的左子树是否为空，为空的话放在左子树，否则放在右子树。情况2：如果新数是当前节点的层数或者更高层，从 stack 中取出上一个保存的节点，并且深度-1，直到满足情况1为止。情况3：如果新数是当前节点的下一层以下，将当前处理的节点推入 stack 中，并且深度+1，这时需要判断当前节点的右子树是否为空 ，如果为空的话当前节点等于当前节点的左子树，否则为当前节点的右子树，直到满足情况1为止。</p>
<p>看到这里，我居然又忘记为什么这么判断了，唔，应该是因为原始数据为先序遍历的结果，所以新数如果比当前节点的子节点更深的话，有两种情况。一种是先序遍历的左子树，这时候左子树有值，右子树为空，那下一个处理的节点必定为左子树。另一种情况是之前经过了情况2后当前处理的节点上升到了该层，这时候当前层的左子树已经处理完毕了， 所以如果右子树不为空的话，当前要处理的必定在右子树内。</p>
<p>好了，什么乱七八糟的，因为是先序遍历，先输出再遍历左再遍历右，所以如果右子树有数的话，必定左子树是完整的了，所以如果右子树不为空，就继续处理右子树，否则处理左子树。OVER。</p>
<hr>
<p>这次竞赛给我的感觉就是，感觉这道题应该有更好的办法吧，感觉这样实现好蠢，但是一时半会又想不到好的解决办法，最后直接使用朴素方法去实现，但是也没想到，其实朴素实现的结果都还不错，至少通过了，也没有出现超时的现象，虽然这个不应该是目标，目标应该是和我的能力之间有一段距离的，这样才能够得到提升。但是也告诉了我一个现在我做题时的一个不太好的想法，一直去寻找方法，而忽略朴素的实现方法，所以经常有时候一道题看了看没有好思路就一直放着，放很久都没有做。这样做一下竞赛，对自己有压力了，不得不做了，就会着急不管用什么方法先做出来再说，也会让自己踏实一些。</p>
<p>PS: 再碎碎念一下，过年的时候报名的比赛，居然忘记比了！居然忘记比了！！！简直了，当时就感觉这么久以后的事情到时候可能会忘记吧，果然不假。</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Contest No.131</title>
    <url>/2019/07/23/leetcode-contest-No131/</url>
    <content><![CDATA[<h2 id="Contest-131"><a href="#Contest-131" class="headerlink" title="Contest 131"></a>Contest 131</h2><p>通过：4/4  排名：44/917  1:10:59  2WA</p>
<p>这次竞赛整体感觉难度一般，基本看到题目后直接就有思路，看了看其他人的做法，基本上思路一样。但是依旧<del>~</del>错的多、逻辑复杂、做题的时候感觉考虑清楚了但是做的时候细节还是有没考虑到的地方。速度嘛，不要求了，目前的目的还是能做出来吧。</p>
<h3 id="No-5016-删除最外层的括号"><a href="#No-5016-删除最外层的括号" class="headerlink" title="No.5016 删除最外层的括号"></a>No.5016 <a href="https://leetcode-cn.com/contest/weekly-contest-131/problems/remove-outermost-parentheses/" target="_blank" rel="noopener">删除最外层的括号</a></h3><p>1WA</p>
<p>一开始使用迭代器进行 string 的遍历，然后在测试的时候，有时候测试结果是正确的，有时候是 out of range，最后也没有发现是什么原因，就先去做剩下三个题了，回来之后改成循环数字下标就好了，可能是最后一个位置超出了 string 的长度，以后还是多用下标比较合适，除非循环内要做的工作比较简单。</p>
  <a id="more"></a>
<h3 id="No-5017-从根到叶的二进制数之和"><a href="#No-5017-从根到叶的二进制数之和" class="headerlink" title="No.5017 从根到叶的二进制数之和"></a>No.5017 <a href="https://leetcode-cn.com/contest/weekly-contest-131/problems/sum-of-root-to-leaf-binary-numbers/" target="_blank" rel="noopener">从根到叶的二进制数之和</a></h3><p>一开始初始值给错了，没有大问题。</p>
<h3 id="No-5018-驼峰式匹配"><a href="#No-5018-驼峰式匹配" class="headerlink" title="No.5018 驼峰式匹配"></a>No.5018 <a href="https://leetcode-cn.com/contest/weekly-contest-131/problems/camelcase-matching/" target="_blank" rel="noopener">驼峰式匹配</a></h3><p>居然，做到一半的时候，忘记题目了！！！</p>
<p>做到一半的时候只记得要匹配对了就可以了，完全忘记了是只能插入小写字母，但是还好还好这道题给的测试用例比较全面，才通过了。</p>
<p>另外可以多接触一下库啊，isupper这种函数的用法，多知道一些总是好事。</p>
<h3 id="No-5019-视频拼接"><a href="#No-5019-视频拼接" class="headerlink" title="No.5019 视频拼接"></a>No.5019 <a href="https://leetcode-cn.com/contest/weekly-contest-131/problems/video-stitching/" target="_blank" rel="noopener">视频拼接</a></h3><p>1WA</p>
<p>完完全全忘记了那次错误提交是为什么，明明是昨天刚做过的题……</p>
<p>嗯，那就没啥说的了</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Contest No.130</title>
    <url>/2019/07/23/leetcode-contest-No130/</url>
    <content><![CDATA[<h2 id="Contest-130"><a href="#Contest-130" class="headerlink" title="Contest 130"></a>Contest 130</h2><p>通过：4/4  排名：59/1293  1:58:42  6WA</p>
<h3 id="No-1018-可被-5-整除的二进制前缀"><a href="#No-1018-可被-5-整除的二进制前缀" class="headerlink" title="No.1018 可被 5 整除的二进制前缀"></a>No.1018 <a href="https://leetcode-cn.com/problems/binary-prefix-divisible-by-5/" target="_blank" rel="noopener">可被 5 整除的二进制前缀</a></h3><p>思考过多，还在想那样做对不对，做的太少所以对题目类型不熟悉。</p>
<h3 id="No-1017-负二进制转换"><a href="#No-1017-负二进制转换" class="headerlink" title="No.1017 负二进制转换"></a>No.1017 <a href="https://leetcode-cn.com/problems/convert-to-base-2/" target="_blank" rel="noopener">负二进制转换</a></h3><p>2WA</p>
<p>emmmmmm，这道题怎么就过了呢。。。</p>
<p>思考过程：用几个数字尝试拼凑了一下，感觉上是要拼凑到最近的2的幂次上去，但是并没有找到绝对的规律。</p>
<p>然后发现某一位数字可以通过其他位来拼凑，如<img src="https://latex.codecogs.com/gif.latex?(2)^1=(-2)^2+(-2)^1">，然后将原始数字以4进制做拆分，再由低位至高位依次处理大于1的情况。例如：<img src="https://latex.codecogs.com/gif.latex?9=1&#x5C;times(-2)^0+2&#x5C;times(-2)^2">，负二进制表示为<code>201</code>，然后从低位到高位，分别处理2、3、4的情况，<code>200</code> 和 <code>11000</code> 相等，<code>300</code> 和 <code>11100</code>相等， <code>400</code> 和 <code>10000</code> 相等。最后即可得到结果。（好麻烦啊）</p>
<pre><code>&lt;!-- more --&gt;</code></pre><p>看了一下别人的回答，类似于二进制转换，得到 %2 后再进行 /2 的操作。区别只是在奇数位时+1而不是-1。不知道如何证明这样是正确的，但是感觉上是正确的，嗯。不懂得东西先记住就好了。</p>
<p>另外还有一点思考，如何证明负二进制是可以表示所有数字的呢，类似的，负三进制是否可以，负四进制是否可以，待求证。</p>
<h3 id="No-1019-链表中的下一个更大节点"><a href="#No-1019-链表中的下一个更大节点" class="headerlink" title="No.1019 链表中的下一个更大节点"></a>No.1019 <a href="https://leetcode-cn.com/problems/next-greater-node-in-linked-list/" target="_blank" rel="noopener">链表中的下一个更大节点</a></h3><p>1WA</p>
<p>以前做过一道类似的题，维护一个栈，当下一个数字比栈顶的数字大时，取出栈顶的数字并记录，否则将下一个数字入栈，全部循环后若栈内还有数字，均输出0。</p>
<p>这道题对比了一下我的做法和别人的，思路是一样的，但是代码量差距很大，自己在这种问题的边界条件和条件分类处理上有点死板和脑袋不清楚，所以代码量大，代码思路也不是十分清晰，还需要多多练习。</p>
<h3 id="No-1020-飞地的数量"><a href="#No-1020-飞地的数量" class="headerlink" title="No.1020 飞地的数量"></a>No.1020 <a href="https://leetcode-cn.com/problems/number-of-enclaves/" target="_blank" rel="noopener">飞地的数量</a></h3><p>3WA</p>
<p>前面大量时间浪费在了一个错误的思路上，第一反应是和做过的类似，进行一个DFS的遍历，遍历每一个“陆地”，然后向四个方向去搜索，看是否能够找到依然是陆地并接触到边界，如果能，那么不是飞地，如果不能，是飞地，然后标记，进行计数。后来发现越做思路越乱，且复杂，在进行深度搜索的时候还需要维护一个表去标记该地是否是已经搜索过的，极度复杂。然后转回去做第二题，做第二题的途中想到，应该反向去搜索，从接触边界的陆地进行深度搜索，每个搜索过的陆地都进行标记，为不是飞地的陆地，全部搜索遍历结束后，再进行遍历计数。</p>
<p>两个可优化的点：一个是根据看别人的代码发现，我是使用迭代进行深度搜索的，有人是使用一个 queue，需要进行搜索的陆地都推入 queue 中，在搜索过程中新搜索到的相邻的不是飞地的地也推入 queue 中，直至整个 queue 清空为止，感觉这种方法思路更加清晰一些，下次做到类似的题需要尝试一下。</p>
<p>另外一个是搜索上下左右四个方向的时候，建立一个数组 <code>[[0,1],[0,-1],[1,0],[-1,0]]</code>，然后对每个点循环加这四个变量即可，这种方法在前面做题过程中有见到提过，但是自己仍然没有用过，后面遇到一样的题也是需要尝试一下使用这种方法实现。</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>智能指针</title>
    <url>/2019/07/23/intelligent_pointer/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/TenosDoIt/p/3456704.html" target="_blank" rel="noopener">https://www.cnblogs.com/TenosDoIt/p/3456704.html</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Conception</tag>
      </tags>
  </entry>
  <entry>
    <title>堆内存和栈内存</title>
    <url>/2019/07/23/heap_memory_and_stack_memory/</url>
    <content><![CDATA[<blockquote>
<p>每过一段时间，总是需要一些刺激激励自己前进，不知道自己丢失的是热情还是耐心</p>
</blockquote>
<h2 id="今天的问题"><a href="#今天的问题" class="headerlink" title="今天的问题"></a>今天的问题</h2><p>局部变量存储在<strong>___</strong>，全局变量存储在<strong>__</strong>，动态申请数据存储在<strong>__</strong>。</p>
<p>栈  静态存储区  堆</p>
<h2 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h2><h3 id="静态存储区（全局变量）"><a href="#静态存储区（全局变量）" class="headerlink" title="静态存储区（全局变量）"></a>静态存储区（全局变量）</h3><p>先说最简单的全局变量，包含全局变量和 static 修饰符修饰的静态变量，都是保存在静态存储区当中，并且分为未初始化区域和初始化区域。初始化的全局变量和静态变量保存在一块区域中，未初始化的全局变量和未初始化的静态变量保存在另一块相邻的区域中。</p>
<p>全局变量的生命周期持续到整个程序结束，在程序结束后由系统释放。</p>
<p>对于嵌入式程序来讲，在编译后的 map 文件中就已经确定了全局变量的存储地址位置，通过该 map 文件就可以进行全局变量的调试读取等操作。</p>
  <a id="more"></a>
<h3 id="栈区（局部变量）"><a href="#栈区（局部变量）" class="headerlink" title="栈区（局部变量）"></a>栈区（局部变量）</h3><p>局部变量定义在栈内存中，包括函数的参数值，局部变量定义等。栈区的分配和释放由系统自动进行，分配和释放的速度快，但内存空间也有限，栈区向地址减小的方向增长，分配失败会提示栈溢出错误。栈的内存空间是连续的。</p>
<p>栈也可以手动进行空间分配，使用 alloca 函数进行，但无需程序员进行释放操作。</p>
<p>栈区 windows 下默认在1M左右（VS2010），与编译器有关。</p>
<h3 id="堆区（动态申请数据）"><a href="#堆区（动态申请数据）" class="headerlink" title="堆区（动态申请数据）"></a>堆区（动态申请数据）</h3><p>动态申请数据保存在堆内存中，包含 new 和 malloc 分配的空间。由程序员进行手动分配和释放的操作，存储空间大，堆区向地址增大的方向增长，但分配、释放、修改速度慢。</p>
<p>堆区的实现是通过一个链表保存所有空闲的地址空间，在程序进行动态分配内存的时候，根据链表进行检索第一个足够大小的空间分配出去，并从链表中删除此处空间。相对应的在释放的时候同样将释放的空间添加到链表当中去。也因此，堆的内存空间是不连续的，也会因为大量的 new 操作产生内存碎片。</p>
<p>因为堆区的分配和释放完全由程序员手工完成，所以需要特别注意分配的空间必须手动释放掉，防止野指针和无法访问到的内存空间的问题出现。</p>
<p>堆区的大小由程序的32bit或者64bit以及编译器共同决定。32bit程序最大堆大小为2GB，64bit程序在不使用虚拟内存的情况下最大为128GB，开启虚拟内存的情况下理论为16TB。</p>
<h3 id="文字常量区"><a href="#文字常量区" class="headerlink" title="文字常量区"></a>文字常量区</h3><p>保存常量字符串的区域。程序结束后由系统释放。</p>
<h3 id="程序代码区"><a href="#程序代码区" class="headerlink" title="程序代码区"></a>程序代码区</h3><p>程序代码区，存放二进制代码。</p>
<h2 id="具体问题"><a href="#具体问题" class="headerlink" title="具体问题"></a>具体问题</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>* p = <span class="string">"Hello World1"</span>;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"Hello World2"</span>;</span><br><span class="line">p[<span class="number">2</span>] = <span class="string">'A'</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">char</span>* p1 = <span class="string">"Hello World1"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>行1 中 p 在栈区中，字符串在文字常量区中</li>
<li>行2 中 a 在栈区中，字符串在栈区中</li>
<li>行3 错误，文字常量区中不可修改</li>
<li>行5 中 p1 的值与 p 相等，因为编译器优化将两个相同字符串定义到同一位置</li>
</ul>
<h2 id="NOTES"><a href="#NOTES" class="headerlink" title="NOTES"></a>NOTES</h2><ol>
<li>在使用 new 或者 malloc 申请空间后要判断返回值是否为 NULL ，是否正常申请到内存空间。</li>
<li>为数组和动态申请内存赋初值。</li>
<li>避免数组下标越界。</li>
<li>在合适的时间释放 new 或者 malloc 申请的内存空间。</li>
<li>free 或者 delete 空间后，将指向该空间的指针赋值为 NULL ，防止出现野指针。</li>
<li>避免在栈区（局部变量）定义大数组，使用 malloc 或者全局变量使其定义在堆区或者静态存储区。</li>
</ol>
]]></content>
      <tags>
        <tag>Conception</tag>
        <tag>Embedded</tag>
      </tags>
  </entry>
  <entry>
    <title>Project Euler  题解：31~40</title>
    <url>/2019/07/23/ProjectEuler_Solution_31_40/</url>
    <content><![CDATA[
<!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">
      <title>ProjectEuler_Solution_31_40</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      
      <link rel="stylesheet" href="/js/src/katex/katex.min.css">
      
      

      
      
      
      
      
      

      <style>
      /**
 * prism.js Github theme based on GitHub's theme.
 * @author Sam Clarke
 */
code[class*="language-"],
pre[class*="language-"] {
  color: #333;
  background: none;
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.4;

  -moz-tab-size: 8;
  -o-tab-size: 8;
  tab-size: 8;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
  padding: .8em;
  overflow: auto;
  /* border: 1px solid #ddd; */
  border-radius: 3px;
  /* background: #fff; */
  background: #f5f5f5;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
  white-space: normal;
  background: #f5f5f5;
}

.token.comment,
.token.blockquote {
  color: #969896;
}

.token.cdata {
  color: #183691;
}

.token.doctype,
.token.punctuation,
.token.variable,
.token.macro.property {
  color: #333;
}

.token.operator,
.token.important,
.token.keyword,
.token.rule,
.token.builtin {
  color: #a71d5d;
}

.token.string,
.token.url,
.token.regex,
.token.attr-value {
  color: #183691;
}

.token.property,
.token.number,
.token.boolean,
.token.entity,
.token.atrule,
.token.constant,
.token.symbol,
.token.command,
.token.code {
  color: #0086b3;
}

.token.tag,
.token.selector,
.token.prolog {
  color: #63a35c;
}

.token.function,
.token.namespace,
.token.pseudo-element,
.token.class,
.token.class-name,
.token.pseudo-class,
.token.id,
.token.url-reference .token.variable,
.token.attr-name {
  color: #795da3;
}

.token.entity {
  cursor: help;
}

.token.title,
.token.title .token.punctuation {
  font-weight: bold;
  color: #1d3e81;
}

.token.list {
  color: #ed6a43;
}

.token.inserted {
  background-color: #eaffea;
  color: #55a532;
}

.token.deleted {
  background-color: #ffecec;
  color: #bd2c00;
}

.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}


/* JSON */
.language-json .token.property {
  color: #183691;
}

.language-markup .token.tag .token.punctuation {
  color: #333;
}

/* CSS */
code.language-css,
.language-css .token.function {
  color: #0086b3;
}

/* YAML */
.language-yaml .token.atrule {
  color: #63a35c;
}

code.language-yaml {
  color: #183691;
}

/* Ruby */
.language-ruby .token.function {
  color: #333;
}

/* Markdown */
.language-markdown .token.url {
  color: #795da3;
}

/* Makefile */
.language-makefile .token.symbol {
  color: #795da3;
}

.language-makefile .token.variable {
  color: #183691;
}

.language-makefile .token.builtin {
  color: #0086b3;
}

/* Bash */
.language-bash .token.keyword {
  color: #0086b3;
}

/* highlight */
pre[data-line] {
  position: relative;
  padding: 1em 0 1em 3em;
}
pre[data-line] .line-highlight-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  background-color: transparent;
  display: block;
  width: 100%;
}

pre[data-line] .line-highlight {
  position: absolute;
  left: 0;
  right: 0;
  padding: inherit 0;
  margin-top: 1em;
  background: hsla(24, 20%, 50%,.08);
  background: linear-gradient(to right, hsla(24, 20%, 50%,.1) 70%, hsla(24, 20%, 50%,0));
  pointer-events: none;
  line-height: inherit;
  white-space: pre;
}

pre[data-line] .line-highlight:before, 
pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-start);
  position: absolute;
  top: .4em;
  left: .6em;
  min-width: 1em;
  padding: 0 .5em;
  background-color: hsla(24, 20%, 50%,.4);
  color: hsl(24, 20%, 95%);
  font: bold 65%/1.5 sans-serif;
  text-align: center;
  vertical-align: .3em;
  border-radius: 999px;
  text-shadow: none;
  box-shadow: 0 1px white;
}

pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-end);
  top: auto;
  bottom: .4em;
}html body{font-family:"Helvetica Neue",Helvetica,"Segoe UI",Arial,freesans,sans-serif;font-size:16px;line-height:1.6;color:#333;background-color:#fff;overflow:initial;box-sizing:border-box;word-wrap:break-word}html body>:first-child{margin-top:0}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{line-height:1.2;margin-top:1em;margin-bottom:16px;color:#000}html body h1{font-size:2.25em;font-weight:300;padding-bottom:.3em}html body h2{font-size:1.75em;font-weight:400;padding-bottom:.3em}html body h3{font-size:1.5em;font-weight:500}html body h4{font-size:1.25em;font-weight:600}html body h5{font-size:1.1em;font-weight:600}html body h6{font-size:1em;font-weight:600}html body h1,html body h2,html body h3,html body h4,html body h5{font-weight:600}html body h5{font-size:1em}html body h6{color:#5c5c5c}html body strong{color:#000}html body del{color:#5c5c5c}html body a:not([href]){color:inherit;text-decoration:none}html body a{color:#08c;text-decoration:none}html body a:hover{color:#00a3f5;text-decoration:none}html body img{max-width:100%}html body>p{margin-top:0;margin-bottom:16px;word-wrap:break-word}html body>ul,html body>ol{margin-bottom:16px}html body ul,html body ol{padding-left:2em}html body ul.no-list,html body ol.no-list{padding:0;list-style-type:none}html body ul ul,html body ul ol,html body ol ol,html body ol ul{margin-top:0;margin-bottom:0}html body li{margin-bottom:0}html body li.task-list-item{list-style:none}html body li>p{margin-top:0;margin-bottom:0}html body .task-list-item-checkbox{margin:0 .2em .25em -1.8em;vertical-align:middle}html body .task-list-item-checkbox:hover{cursor:pointer}html body blockquote{margin:16px 0;font-size:inherit;padding:0 15px;color:#5c5c5c;border-left:4px solid #d6d6d6}html body blockquote>:first-child{margin-top:0}html body blockquote>:last-child{margin-bottom:0}html body hr{height:4px;margin:32px 0;background-color:#d6d6d6;border:0 none}html body table{margin:10px 0 15px 0;border-collapse:collapse;border-spacing:0;display:block;width:100%;overflow:auto;word-break:normal;word-break:keep-all}html body table th{font-weight:bold;color:#000}html body table td,html body table th{border:1px solid #d6d6d6;padding:6px 13px}html body dl{padding:0}html body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:bold}html body dl dd{padding:0 16px;margin-bottom:16px}html body code{font-family:Menlo,Monaco,Consolas,'Courier New',monospace;font-size:.85em !important;color:#000;background-color:#f0f0f0;border-radius:3px;padding:.2em 0}html body code::before,html body code::after{letter-spacing:-0.2em;content:"\00a0"}html body pre>code{padding:0;margin:0;font-size:.85em !important;word-break:normal;white-space:pre;background:transparent;border:0}html body .highlight{margin-bottom:16px}html body .highlight pre,html body pre{padding:1em;overflow:auto;font-size:.85em !important;line-height:1.45;border:#d6d6d6;border-radius:3px}html body .highlight pre{margin-bottom:0;word-break:normal}html body pre code,html body pre tt{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}html body pre code:before,html body pre tt:before,html body pre code:after,html body pre tt:after{content:normal}html body p,html body blockquote,html body ul,html body ol,html body dl,html body pre{margin-top:0;margin-bottom:16px}html body kbd{color:#000;border:1px solid #d6d6d6;border-bottom:2px solid #c7c7c7;padding:2px 4px;background-color:#f0f0f0;border-radius:3px}@media print{html body{background-color:#fff}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{color:#000;page-break-after:avoid}html body blockquote{color:#5c5c5c}html body pre{page-break-inside:avoid}html body table{display:table}html body img{display:block;max-width:100%;max-height:100%}html body pre,html body code{word-wrap:break-word;white-space:pre}}.markdown-preview{width:100%;height:100%;box-sizing:border-box}.markdown-preview .pagebreak,.markdown-preview .newpage{page-break-before:always}.markdown-preview pre.line-numbers{position:relative;padding-left:3.8em;counter-reset:linenumber}.markdown-preview pre.line-numbers>code{position:relative}.markdown-preview pre.line-numbers .line-numbers-rows{position:absolute;pointer-events:none;top:1em;font-size:100%;left:0;width:3em;letter-spacing:-1px;border-right:1px solid #999;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.markdown-preview pre.line-numbers .line-numbers-rows>span{pointer-events:none;display:block;counter-increment:linenumber}.markdown-preview pre.line-numbers .line-numbers-rows>span:before{content:counter(linenumber);color:#999;display:block;padding-right:.8em;text-align:right}.markdown-preview .mathjax-exps .MathJax_Display{text-align:center !important}.markdown-preview:not([for="preview"]) .code-chunk .btn-group{display:none}.markdown-preview:not([for="preview"]) .code-chunk .status{display:none}.markdown-preview:not([for="preview"]) .code-chunk .output-div{margin-bottom:16px}.scrollbar-style::-webkit-scrollbar{width:8px}.scrollbar-style::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}.scrollbar-style::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode]){position:relative;width:100%;height:100%;top:0;left:0;margin:0;padding:0;overflow:auto}html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{position:relative;top:0}@media screen and (min-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em calc(50% - 457px + 2em)}}@media screen and (max-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{font-size:14px !important;padding:1em}}@media print{html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{display:none}}html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{position:fixed;bottom:8px;left:8px;font-size:28px;cursor:pointer;color:inherit;z-index:99;width:32px;text-align:center;opacity:.4}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] #sidebar-toc-btn{opacity:1}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc{position:fixed;top:0;left:0;width:300px;height:100%;padding:32px 0 48px 0;font-size:14px;box-shadow:0 0 4px rgba(150,150,150,0.33);box-sizing:border-box;overflow:auto;background-color:inherit}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar{width:8px}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc a{text-decoration:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{padding:0 1.6em;margin-top:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc li{margin-bottom:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{list-style-type:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{left:300px;width:calc(100% -  300px);padding:2em calc(50% - 457px -  150px);margin:0;box-sizing:border-box}@media screen and (max-width:1274px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{width:100%}}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .markdown-preview{left:50%;transform:translateX(-50%)}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .md-sidebar-toc{display:none}
/* Please visit the URL below for more information: */
/*   https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css */

      </style>
    </head>
    <body for="html-export">
      <div class="mume markdown-preview  ">

<blockquote>
<p>&#x7F57;&#x9A6C;&#x4E0D;&#x662F;&#x4E00;&#x5929;&#x5EFA;&#x6210;&#x7684;&#xFF0C;&#x4F60;&#x4E5F;&#x4E0D;&#x4F1A;&#x4E00;&#x4E0B;&#x6210;&#x4E3A;&#x68A6;&#x60F3;&#x4E2D;&#x7684;&#x4EBA;&#xFF0C;&#x4F46;&#x662F;&#x53EA;&#x8981;&#x5728;&#x5B66;&#x4E60;&#x5728;&#x52AA;&#x529B;&#xFF0C;&#x5C31;&#x662F;&#x8D8A;&#x6765;&#x8D8A;&#x63A5;&#x8FD1;&#x7684;&#x3002;</p>
</blockquote>

<p>&#x7EE7;&#x7EED;&#x4E0A;&#x4E00;&#x6B21;&#x7684;Project Euler&#x7684;&#x9898;&#x89E3;&#xFF0C;&#x4E0D;&#x89C1;&#x5F97;&#x6700;&#x4F18;&#xFF0C;&#x4E5F;&#x4E0D;&#x89C1;&#x5F97;&#x4F18;&#x96C5;&#xFF0C;&#x4F46;&#x662F;&#x7B54;&#x6848;&#x662F;&#x5BF9;&#x7684;&#xFF0C;&#x601D;&#x8DEF;&#x4E5F;&#x662F;&#x6CA1;&#x95EE;&#x9898;&#x7684;&#x3002;&#x8FD9;&#x6B21;&#x662F;31~40&#x9898;&#x3002;</p>

<p>(&#x5947;&#x602A;&#xFF0C;&#x8FD9;&#x4EBA;&#x600E;&#x4E48;&#x53C8;&#x5F00;&#x59CB;&#x7528;python&#x5199;&#x4E86;</p>

<h2 class="mume-header" id="problem-31-coin-sumshttpsprojecteulernetproblem31"><a href="https://projecteuler.net/problem=31" target="_blank" rel="noopener">Problem 31: Coin sums</a></h2>

<p>&#x55EF;&#x3002;&#x3002;&#x633A;&#x7ECF;&#x5178;&#x633A;&#x5E38;&#x89C1;&#x7684;&#x5B8C;&#x5168;&#x80CC;&#x5305;DP&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x6EE1;&#x8111;&#x5B50;&#x4E0D;&#x77E5;&#x9053;&#x5728;&#x60F3;&#x4EC0;&#x4E48;&#xFF0C;&#x6123;&#x662F;&#x6CA1;&#x505A;&#x51FA;&#x6765;&#xFF0C;&#x540E;&#x6765;&#x770B;&#x4E86;&#x770B;&#x522B;&#x4EBA;&#x7684;&#x63D0;&#x793A;&#x624D;&#x60F3;&#x5230;&#x5E94;&#x8BE5;&#x6309;&#x7167;&#x786C;&#x5E01;&#x79CD;&#x7C7B;&#x53BB;&#x5FAA;&#x73AF;&#x3002;&#x4E00;&#x76F4;&#x5728;&#x60F3;&#x600E;&#x4E48;&#x53BB;&#x5904;&#x7406;&#x91CD;&#x590D;&#x7684;&#x60C5;&#x51B5;&#x3002;</p>
<p><a href="https://projecteuler.net/overview=031" target="_blank" rel="noopener">&#x8FD9;&#x91CC;</a>&#x662F;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x8BE6;&#x7EC6;&#x89E3;&#x91CA;<br>
<a href="https://blog.csdn.net/na_beginning/article/details/62884939" target="_blank" rel="noopener">&#x8FD9;&#x91CC;</a>&#x662F;&#x5B8C;&#x5168;&#x80CC;&#x5305;&#x3001;01&#x80CC;&#x5305;&#x3001;&#x591A;&#x91CD;&#x80CC;&#x5305;&#x7684;&#x6BD4;&#x8F83;&#x7684;&#x53C2;&#x8003;&#x8D44;&#x6599;&#xFF08;&#x6211;&#x6CA1;&#x770B;</p>
  <a id="more"></a>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">pro31</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># &#x5B8C;&#x5168;&#x80CC;&#x5305;DP</span>
    coin <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span>
    methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">300</span>
    methods<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> k <span class="token keyword">in</span> coin<span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> k<span class="token punctuation">:</span>
                methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> methods<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>methods<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="problem-32-pandigital-productshttpsprojecteulernetproblem32"><a href="https://projecteuler.net/problem=32" target="_blank" rel="noopener">Problem 32: Pandigital products</a></h2>

<p>&#x5F88;&#x8822;&#x7684;&#x4E00;&#x4E2A;&#x505A;&#x6CD5;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x53BB;&#x904D;&#x5386;&#x5224;&#x65AD;&#x7684;</p>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">pro32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        numl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        k <span class="token operator">=</span> i
        <span class="token keyword">while</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> k <span class="token operator">%</span> <span class="token number">10</span> <span class="token keyword">not</span> <span class="token keyword">in</span> numl<span class="token punctuation">:</span>
                numl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
                k <span class="token operator">=</span> k<span class="token operator">//</span><span class="token number">10</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    numll <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                    k <span class="token operator">=</span> j
                    <span class="token keyword">while</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span> <span class="token keyword">not</span> <span class="token keyword">in</span> numl<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span> <span class="token keyword">not</span> <span class="token keyword">in</span> numll<span class="token punctuation">)</span><span class="token punctuation">:</span>
                            numll<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
                            k <span class="token operator">=</span> k<span class="token operator">//</span><span class="token number">10</span>
                        <span class="token keyword">else</span><span class="token punctuation">:</span>
                            <span class="token keyword">break</span>
                    <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        k <span class="token operator">=</span> i<span class="token operator">//</span>j
                        <span class="token keyword">while</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span> <span class="token keyword">not</span> <span class="token keyword">in</span> numl<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span> <span class="token keyword">not</span> <span class="token keyword">in</span> numll<span class="token punctuation">)</span><span class="token punctuation">:</span>
                                numll<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
                                k <span class="token operator">=</span> k<span class="token operator">//</span><span class="token number">10</span>
                            <span class="token keyword">else</span><span class="token punctuation">:</span>
                                <span class="token keyword">break</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>numl<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>numll<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">not</span> <span class="token keyword">in</span> numl<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">not</span> <span class="token keyword">in</span> numll<span class="token punctuation">)</span><span class="token punctuation">:</span>
                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%d  %d  %d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token operator">//</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> out<span class="token punctuation">:</span>
                                out <span class="token operator">+=</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="problem-33-digit-cancelling-fractionshttpsprojecteulernetproblem3"><a href="https://projecteuler.net/problem=3" target="_blank" rel="noopener">Problem 33: Digit cancelling fractions</a></h2>

<p>&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7B2C;&#x4E00;&#x6B21;&#x8003;&#x8651;&#x7684;&#x65F6;&#x5019;&#x8003;&#x8651;&#x9519;&#x4E86;&#xFF0C;&#x4EE5;&#x4E3A;&#x5206;&#x5B50;&#x548C;&#x5206;&#x6BCD;&#x76F8;&#x540C;&#x7684;&#x6570;&#x5B57;&#x80AF;&#x5B9A;&#x4E00;&#x4E2A;&#x5728;&#x5341;&#x4F4D;&#x4E00;&#x4E2A;&#x5728;&#x4E2A;&#x4F4D;&#x7684;&#xFF0C;&#x5BFC;&#x81F4;&#x4E00;&#x5F00;&#x59CB;&#x7B54;&#x6848;&#x662F;&#x9519;&#x8BEF;&#x7684;&#x3002;&#x5176;&#x5B9E;&#x53EF;&#x4EE5;&#x5728;&#x5916;&#x5C42;&#x5FAA;&#x73AF;&#x589E;&#x52A0;&#x4E00;&#x4E9B;&#x5224;&#x65AD;&#xFF0C;&#x8FD9;&#x6837;&#x901F;&#x5EA6;&#x4F1A;&#x5FEB;&#x4E00;&#x4E9B;&#x3002;&#x3002;&#x3002;</p>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">pro33</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token builtin">int</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">//</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token string">&apos;&apos;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token operator">/</span>k<span class="token punctuation">:</span>
                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">elif</span> k <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token string">&apos;&apos;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token operator">/</span>k<span class="token punctuation">:</span>
                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="problem-34-digit-factorialshttpsprojecteulernetproblem34"><a href="https://projecteuler.net/problem=34" target="_blank" rel="noopener">Problem 34: Digit factorials</a></h2>

<p>&#x7B97;&#x5C31;&#x5BF9;&#x4E86;</p>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">pro34</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    out <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        k <span class="token operator">=</span> i
        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token builtin">sum</span> <span class="token operator">+=</span> math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
            k <span class="token operator">=</span> k<span class="token operator">//</span><span class="token number">10</span>
        <span class="token keyword">if</span> <span class="token builtin">sum</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            out <span class="token operator">+=</span> i
    <span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="problem-35-circular-primeshttpsprojecteulernetproblem35"><a href="https://projecteuler.net/problem=35" target="_blank" rel="noopener">Problem 35: Circular primes</a></h2>

<p>&#x904D;&#x5386;&#xFF0C;&#x5224;&#x65AD;&#x8D28;&#x6570;&#x7684;&#x7A0B;&#x5E8F;&#x53C8;&#x5199;&#x4E86;python&#x7248;&#x7684;&#xFF0C;&#x5728;&#x6700;&#x540E;&#x8D34;&#x4E0A;&#x6765;</p>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">pro35</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    out <span class="token operator">=</span> <span class="token number">4</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> isPrime<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">:</span>
                i <span class="token operator">=</span> <span class="token number">11</span>
            num <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                j <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> isPrime<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    num <span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token keyword">break</span>
            <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
                out <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="problem-36-double-base-palindromeshttpsprojecteulernetproblem36"><a href="https://projecteuler.net/problem=36" target="_blank" rel="noopener">Problem 36: Double-base palindromes</a></h2>

<p>&#x904D;&#x5386;&#xFF0C;&#x4E0D;&#x8BB2;&#xFF08;&#x4E0D;&#x8FC7;python&#x786E;&#x5B9E;&#x884C;&#x6570;&#x5C11;&#x5F88;&#x591A;</p>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">pro36</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    out <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        k <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">if</span> k <span class="token operator">==</span> k<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            k <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> k <span class="token operator">==</span> k<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
                out <span class="token operator">+=</span> i
    <span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="problem-37-truncatable-primeshttpsprojecteulernetproblem37"><a href="https://projecteuler.net/problem=37" target="_blank" rel="noopener">Problem 37: Truncatable primes</a></h2>

<p>&#x904D;&#x5386;&#x3002;&#x3002;&#x3002;</p>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">pro37</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    out <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> isPrime<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            n <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> isPrime<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    n <span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token keyword">break</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> isPrime<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    n <span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token keyword">break</span>
            <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
                out <span class="token operator">+=</span> i
    <span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="problem-38-pandigital-multipleshttpsprojecteulernetproblem38"><a href="https://projecteuler.net/problem=38" target="_blank" rel="noopener">Problem 38: Pandigital multiples</a></h2>

<p>&#x540C;&#x4E0A;&#x3002;&#x3002;&#x3002;&#xFF08;&#x8FD9;&#x6B21;&#x9898;&#x6CA1;&#x6709;&#x597D;&#x73A9;&#x7684;&#x5440;</p>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">pro38</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        leng <span class="token operator">=</span> <span class="token number">0</span>
        k <span class="token operator">=</span> i
        <span class="token keyword">while</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> k <span class="token operator">%</span> <span class="token number">10</span> <span class="token keyword">not</span> <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
                nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
            k <span class="token operator">=</span> k<span class="token operator">//</span><span class="token number">10</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        leng <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            k <span class="token operator">=</span> j<span class="token operator">*</span>i
            <span class="token keyword">while</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> k <span class="token operator">%</span> <span class="token number">10</span> <span class="token keyword">not</span> <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
                    nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
                k <span class="token operator">=</span> k<span class="token operator">//</span><span class="token number">10</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span>leng <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            leng <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>leng <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">not</span> <span class="token keyword">in</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="problem-39-integer-right-triangleshttpsprojecteulernetproblem39"><a href="https://projecteuler.net/problem=39" target="_blank" rel="noopener">Problem 39: Integer right triangles</a></h2>

<p>&#x904D;&#x5386;&#x3002;&#x3002;&#xFF0C;&#x8FD9;&#x4E2A;&#x9898;&#x5224;&#x65AD;&#x6761;&#x4EF6;&#x53EF;&#x4EE5;&#x4ED4;&#x7EC6;&#x601D;&#x8003;&#x4E00;&#x4E0B;&#xFF0C;&#x80FD;&#x8282;&#x7EA6;&#x5F88;&#x591A;&#x65E0;&#x6548;&#x7684;&#x8BA1;&#x7B97;</p>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">pro39</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># solution&#x8BA1;&#x7B97;&#x6709;&#x95EE;&#x9898;&#xFF0C;&#x6709;&#x91CD;&#x590D;&#x60C5;&#x51B5;&#xFF0C;&#x4F46;&#x662F;&#x9898;&#x76EE;&#x4E0D;&#x8981;&#x6C42;~~~</span>
    solution <span class="token operator">=</span> <span class="token number">0</span>
    out <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> p <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        so <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>p<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                c <span class="token operator">=</span> p<span class="token operator">-</span>a<span class="token operator">-</span>b
                <span class="token keyword">if</span> c <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> a<span class="token operator">*</span>a <span class="token operator">==</span> b<span class="token operator">*</span>b<span class="token operator">+</span>c<span class="token operator">*</span>c<span class="token punctuation">:</span>
                    so <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> so <span class="token operator">&gt;</span> solution<span class="token punctuation">:</span>
            solution <span class="token operator">=</span> so
            out <span class="token operator">=</span> p
    <span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="problem-40-champernownes-constanthttpsprojecteulernetproblem40"><a href="https://projecteuler.net/problem=40" target="_blank" rel="noopener">Problem 40: Champernowne&apos;s constant</a></h2>

<p>&#x8822;&#x904D;&#x5386;</p>
<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">pro40</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># &#x8822;&#x529E;&#x6CD5; is coming</span>
    out <span class="token operator">=</span> <span class="token number">1</span>
    count <span class="token operator">=</span> <span class="token number">1</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        k <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> count <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
                out <span class="token operator">=</span> out<span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
            k <span class="token operator">=</span> k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="prime-python">Prime (python)</h2>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token string">&apos;prime&apos;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        isPrime<span class="token punctuation">.</span>prime <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> isPrime<span class="token punctuation">.</span>prime<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> n <span class="token keyword">in</span> isPrime<span class="token punctuation">.</span>prime
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        i <span class="token operator">=</span> isPrime<span class="token punctuation">.</span>prime<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span>
        <span class="token keyword">while</span> n <span class="token operator">&gt;</span> isPrime<span class="token punctuation">.</span>prime<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            num <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">for</span> k <span class="token keyword">in</span> isPrime<span class="token punctuation">.</span>prime<span class="token punctuation">:</span>
                <span class="token keyword">if</span> i <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    num <span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token keyword">break</span>
                <span class="token keyword">if</span> k <span class="token operator">&gt;</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">break</span>
            <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                isPrime<span class="token punctuation">.</span>prime<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            i <span class="token operator">+=</span> <span class="token number">2</span>
        <span class="token keyword">return</span> n <span class="token keyword">in</span> isPrime<span class="token punctuation">.</span>prime
</pre><pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword">def</span> <span class="token function">isPrimeS</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> n <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>
</pre>
      </div>
      
      
    
    
    
    
    
    
    
    
  
    </body></html>]]></content>
      <tags>
        <tag>Project Euler</tag>
      </tags>
  </entry>
  <entry>
    <title>Project Euler  题解：21~30</title>
    <url>/2019/07/23/ProjectEuler_Solution_21_30/</url>
    <content><![CDATA[
<!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">
      <title>Project Euler  &#x9898;&#x89E3;&#xFF1A;21~30</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      
      <link rel="stylesheet" href="/js/src/katex/katex.min.css">
      
      

      
      
      
      
      
      

      <style>
      /**
 * prism.js Github theme based on GitHub's theme.
 * @author Sam Clarke
 */
code[class*="language-"],
pre[class*="language-"] {
  color: #333;
  background: none;
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.4;

  -moz-tab-size: 8;
  -o-tab-size: 8;
  tab-size: 8;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
  padding: .8em;
  overflow: auto;
  /* border: 1px solid #ddd; */
  border-radius: 3px;
  /* background: #fff; */
  background: #f5f5f5;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
  white-space: normal;
  background: #f5f5f5;
}

.token.comment,
.token.blockquote {
  color: #969896;
}

.token.cdata {
  color: #183691;
}

.token.doctype,
.token.punctuation,
.token.variable,
.token.macro.property {
  color: #333;
}

.token.operator,
.token.important,
.token.keyword,
.token.rule,
.token.builtin {
  color: #a71d5d;
}

.token.string,
.token.url,
.token.regex,
.token.attr-value {
  color: #183691;
}

.token.property,
.token.number,
.token.boolean,
.token.entity,
.token.atrule,
.token.constant,
.token.symbol,
.token.command,
.token.code {
  color: #0086b3;
}

.token.tag,
.token.selector,
.token.prolog {
  color: #63a35c;
}

.token.function,
.token.namespace,
.token.pseudo-element,
.token.class,
.token.class-name,
.token.pseudo-class,
.token.id,
.token.url-reference .token.variable,
.token.attr-name {
  color: #795da3;
}

.token.entity {
  cursor: help;
}

.token.title,
.token.title .token.punctuation {
  font-weight: bold;
  color: #1d3e81;
}

.token.list {
  color: #ed6a43;
}

.token.inserted {
  background-color: #eaffea;
  color: #55a532;
}

.token.deleted {
  background-color: #ffecec;
  color: #bd2c00;
}

.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}


/* JSON */
.language-json .token.property {
  color: #183691;
}

.language-markup .token.tag .token.punctuation {
  color: #333;
}

/* CSS */
code.language-css,
.language-css .token.function {
  color: #0086b3;
}

/* YAML */
.language-yaml .token.atrule {
  color: #63a35c;
}

code.language-yaml {
  color: #183691;
}

/* Ruby */
.language-ruby .token.function {
  color: #333;
}

/* Markdown */
.language-markdown .token.url {
  color: #795da3;
}

/* Makefile */
.language-makefile .token.symbol {
  color: #795da3;
}

.language-makefile .token.variable {
  color: #183691;
}

.language-makefile .token.builtin {
  color: #0086b3;
}

/* Bash */
.language-bash .token.keyword {
  color: #0086b3;
}

/* highlight */
pre[data-line] {
  position: relative;
  padding: 1em 0 1em 3em;
}
pre[data-line] .line-highlight-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  background-color: transparent;
  display: block;
  width: 100%;
}

pre[data-line] .line-highlight {
  position: absolute;
  left: 0;
  right: 0;
  padding: inherit 0;
  margin-top: 1em;
  background: hsla(24, 20%, 50%,.08);
  background: linear-gradient(to right, hsla(24, 20%, 50%,.1) 70%, hsla(24, 20%, 50%,0));
  pointer-events: none;
  line-height: inherit;
  white-space: pre;
}

pre[data-line] .line-highlight:before, 
pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-start);
  position: absolute;
  top: .4em;
  left: .6em;
  min-width: 1em;
  padding: 0 .5em;
  background-color: hsla(24, 20%, 50%,.4);
  color: hsl(24, 20%, 95%);
  font: bold 65%/1.5 sans-serif;
  text-align: center;
  vertical-align: .3em;
  border-radius: 999px;
  text-shadow: none;
  box-shadow: 0 1px white;
}

pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-end);
  top: auto;
  bottom: .4em;
}html body{font-family:"Helvetica Neue",Helvetica,"Segoe UI",Arial,freesans,sans-serif;font-size:16px;line-height:1.6;color:#333;background-color:#fff;overflow:initial;box-sizing:border-box;word-wrap:break-word}html body>:first-child{margin-top:0}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{line-height:1.2;margin-top:1em;margin-bottom:16px;color:#000}html body h1{font-size:2.25em;font-weight:300;padding-bottom:.3em}html body h2{font-size:1.75em;font-weight:400;padding-bottom:.3em}html body h3{font-size:1.5em;font-weight:500}html body h4{font-size:1.25em;font-weight:600}html body h5{font-size:1.1em;font-weight:600}html body h6{font-size:1em;font-weight:600}html body h1,html body h2,html body h3,html body h4,html body h5{font-weight:600}html body h5{font-size:1em}html body h6{color:#5c5c5c}html body strong{color:#000}html body del{color:#5c5c5c}html body a:not([href]){color:inherit;text-decoration:none}html body a{color:#08c;text-decoration:none}html body a:hover{color:#00a3f5;text-decoration:none}html body img{max-width:100%}html body>p{margin-top:0;margin-bottom:16px;word-wrap:break-word}html body>ul,html body>ol{margin-bottom:16px}html body ul,html body ol{padding-left:2em}html body ul.no-list,html body ol.no-list{padding:0;list-style-type:none}html body ul ul,html body ul ol,html body ol ol,html body ol ul{margin-top:0;margin-bottom:0}html body li{margin-bottom:0}html body li.task-list-item{list-style:none}html body li>p{margin-top:0;margin-bottom:0}html body .task-list-item-checkbox{margin:0 .2em .25em -1.8em;vertical-align:middle}html body .task-list-item-checkbox:hover{cursor:pointer}html body blockquote{margin:16px 0;font-size:inherit;padding:0 15px;color:#5c5c5c;border-left:4px solid #d6d6d6}html body blockquote>:first-child{margin-top:0}html body blockquote>:last-child{margin-bottom:0}html body hr{height:4px;margin:32px 0;background-color:#d6d6d6;border:0 none}html body table{margin:10px 0 15px 0;border-collapse:collapse;border-spacing:0;display:block;width:100%;overflow:auto;word-break:normal;word-break:keep-all}html body table th{font-weight:bold;color:#000}html body table td,html body table th{border:1px solid #d6d6d6;padding:6px 13px}html body dl{padding:0}html body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:bold}html body dl dd{padding:0 16px;margin-bottom:16px}html body code{font-family:Menlo,Monaco,Consolas,'Courier New',monospace;font-size:.85em !important;color:#000;background-color:#f0f0f0;border-radius:3px;padding:.2em 0}html body code::before,html body code::after{letter-spacing:-0.2em;content:"\00a0"}html body pre>code{padding:0;margin:0;font-size:.85em !important;word-break:normal;white-space:pre;background:transparent;border:0}html body .highlight{margin-bottom:16px}html body .highlight pre,html body pre{padding:1em;overflow:auto;font-size:.85em !important;line-height:1.45;border:#d6d6d6;border-radius:3px}html body .highlight pre{margin-bottom:0;word-break:normal}html body pre code,html body pre tt{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}html body pre code:before,html body pre tt:before,html body pre code:after,html body pre tt:after{content:normal}html body p,html body blockquote,html body ul,html body ol,html body dl,html body pre{margin-top:0;margin-bottom:16px}html body kbd{color:#000;border:1px solid #d6d6d6;border-bottom:2px solid #c7c7c7;padding:2px 4px;background-color:#f0f0f0;border-radius:3px}@media print{html body{background-color:#fff}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{color:#000;page-break-after:avoid}html body blockquote{color:#5c5c5c}html body pre{page-break-inside:avoid}html body table{display:table}html body img{display:block;max-width:100%;max-height:100%}html body pre,html body code{word-wrap:break-word;white-space:pre}}.markdown-preview{width:100%;height:100%;box-sizing:border-box}.markdown-preview .pagebreak,.markdown-preview .newpage{page-break-before:always}.markdown-preview pre.line-numbers{position:relative;padding-left:3.8em;counter-reset:linenumber}.markdown-preview pre.line-numbers>code{position:relative}.markdown-preview pre.line-numbers .line-numbers-rows{position:absolute;pointer-events:none;top:1em;font-size:100%;left:0;width:3em;letter-spacing:-1px;border-right:1px solid #999;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.markdown-preview pre.line-numbers .line-numbers-rows>span{pointer-events:none;display:block;counter-increment:linenumber}.markdown-preview pre.line-numbers .line-numbers-rows>span:before{content:counter(linenumber);color:#999;display:block;padding-right:.8em;text-align:right}.markdown-preview .mathjax-exps .MathJax_Display{text-align:center !important}.markdown-preview:not([for="preview"]) .code-chunk .btn-group{display:none}.markdown-preview:not([for="preview"]) .code-chunk .status{display:none}.markdown-preview:not([for="preview"]) .code-chunk .output-div{margin-bottom:16px}.scrollbar-style::-webkit-scrollbar{width:8px}.scrollbar-style::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}.scrollbar-style::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode]){position:relative;width:100%;height:100%;top:0;left:0;margin:0;padding:0;overflow:auto}html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{position:relative;top:0}@media screen and (min-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em calc(50% - 457px + 2em)}}@media screen and (max-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{font-size:14px !important;padding:1em}}@media print{html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{display:none}}html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{position:fixed;bottom:8px;left:8px;font-size:28px;cursor:pointer;color:inherit;z-index:99;width:32px;text-align:center;opacity:.4}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] #sidebar-toc-btn{opacity:1}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc{position:fixed;top:0;left:0;width:300px;height:100%;padding:32px 0 48px 0;font-size:14px;box-shadow:0 0 4px rgba(150,150,150,0.33);box-sizing:border-box;overflow:auto;background-color:inherit}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar{width:8px}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc a{text-decoration:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{padding:0 1.6em;margin-top:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc li{margin-bottom:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{list-style-type:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{left:300px;width:calc(100% -  300px);padding:2em calc(50% - 457px -  150px);margin:0;box-sizing:border-box}@media screen and (max-width:1274px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{width:100%}}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .markdown-preview{left:50%;transform:translateX(-50%)}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .md-sidebar-toc{display:none}
/* Please visit the URL below for more information: */
/*   https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css */

      </style>
    </head>
    <body for="html-export">
      <div class="mume markdown-preview  ">

<p>&#x7EE7;&#x7EED;&#x4E0A;&#x4E00;&#x6B21;&#x7684;Project Euler&#x7684;&#x9898;&#x89E3;&#xFF0C;&#x4E0D;&#x89C1;&#x5F97;&#x6700;&#x4F18;&#xFF0C;&#x4E5F;&#x4E0D;&#x89C1;&#x5F97;&#x4F18;&#x96C5;&#xFF0C;&#x4F46;&#x662F;&#x7B54;&#x6848;&#x662F;&#x5BF9;&#x7684;&#xFF0C;&#x601D;&#x8DEF;&#x4E5F;&#x662F;&#x6CA1;&#x95EE;&#x9898;&#x7684;&#x3002;&#x8FD9;&#x6B21;&#x662F;21~30&#x9898;&#x3002;</p>

<h2 class="mume-header" id="problem-21amicable-numbershttpsprojecteulernetproblem21"><a href="https://projecteuler.net/problem=21" target="_blank" rel="noopener">Problem 21:Amicable numbers</a></h2>

<p>&#x5BF9;&#x4E8E;x&#xFF0C;&#x9664;&#x81EA;&#x5DF1;&#x4EE5;&#x5916;&#x7684;&#x56E0;&#x6570;&#x7684;&#x548C;&#x5B9A;&#x4E49;&#x4E3A;d(x)&#xFF0C;&#x6C42;&#x51FA;1000&#x4EE5;&#x4E0B;&#x7684;&#x6240;&#x6709;&#x6EE1;&#x8DB3;<code>d(a)=d(b) &amp;&amp; a!=b</code>&#x7684;&#x6570;&#x5BF9;&#x5E76;&#x6C42;&#x548C;&#x3002;</p>
<p>&#x904D;&#x5386;-&gt;&#x6C42;&#x6240;&#x6709;&#x56E0;&#x6570;-&gt;&#x6C42;&#x548C;&#x8BB0;&#x5F55;-&gt;&#x904D;&#x5386;&#x5224;&#x65AD;&#x5E76;&#x6C42;&#x548C;</p>
  <a id="more"></a>
  <pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem21</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> mm<span class="token punctuation">;</span>
    <span class="token keyword">int</span> out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> k<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        mm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> i<span class="token punctuation">,</span> sum <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//cout &lt;&lt; i &lt;&lt; &quot;  &quot; &lt;&lt; sum &lt;&lt; endl;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> mm<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mm<span class="token punctuation">[</span>i<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">.</span>first <span class="token operator">&amp;&amp;</span> i<span class="token punctuation">.</span>first <span class="token operator">!=</span> i<span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            out <span class="token operator">+=</span> i<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-22names-scoreshttpsprojecteulernetproblem22"><a href="https://projecteuler.net/problem=22" target="_blank" rel="noopener">Problem 22:Names scores</a></h2>

<p>&#x6709;&#x4E00;&#x7FA4;&#x540D;&#x5B57;&#xFF0C;&#x8981;&#x6C42;&#x6392;&#x5E8F;&#xFF0C;&#x6392;&#x5E8F;&#x4E4B;&#x540E;&#x6BCF;&#x4E2A;&#x540D;&#x5B57;&#x7684;&#x6570;&#x5B57;&#x548C;&#x4E58;&#x4EE5;&#x4F4D;&#x6570;&#x518D;&#x6C42;&#x548C;&#x3002;<br>
emmmmm&#xFF0C;&#x8FD9;&#x4E2A;&#x9898;&#x4F3C;&#x4E4E;&#x505A;&#x5F97;&#x6709;&#x4E00;&#x70B9;&#x70B9;&#x6284;&#x8FD1;&#x8DEF;&#xFF0C;&#x76F4;&#x63A5;STL&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x904D;&#x5386;&#x6C42;&#x548C;&#x5373;&#x53EF;&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem22</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    string trianglefilename <span class="token operator">=</span> <span class="token string">&quot;p022_names.txt&quot;</span><span class="token punctuation">;</span>
    ifstream fin<span class="token punctuation">;</span>
    fin<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>trianglefilename<span class="token punctuation">,</span> ios<span class="token operator">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> lines<span class="token punctuation">;</span>
    string s<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>fin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        lines<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    fin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    lines <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>lines<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&apos;,&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        lines<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> lines<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>lines<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lines<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> lines<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> i <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        out <span class="token operator">+=</span> sum <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-23non-abundant-sumshttpsprojecteulernetproblem23"><a href="https://projecteuler.net/problem=23" target="_blank" rel="noopener">Problem 23:Non-abundant sums</a></h2>

<p>&#x5B8C;&#x7F8E;&#x6570;&#xFF0C;&#x9664;&#x4E86;&#x672C;&#x8EAB;&#x4EE5;&#x5916;&#x7684;&#x56E0;&#x6570;&#x7684;&#x548C;&#x7B49;&#x4E8E;&#x81EA;&#x8EAB;&#x3002;<br>
deficient&#xFF0C;&#x56E0;&#x6570;&#x548C;&#x5C0F;&#x4E8E;&#x81EA;&#x8EAB;&#xFF1B;abundant&#xFF0C;&#x56E0;&#x6570;&#x548C;&#x5927;&#x4E8E;&#x81EA;&#x8EAB;&#x3002;<br>
&#x8FD9;&#x9898;&#x592A;&#x96BE;&#x89E3;&#x91CA;&#x4E86;&#xFF0C;&#x76F4;&#x63A5;&#x9898;&#x76EE;&#x6284;&#x8FC7;&#x6765;&#x81EA;&#x5DF1;&#x770B;&#x9898;&#x76EE;&#x5427;&#x3002;</p>
<blockquote>
<p>A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.</p>
<p>A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.</p>
<p>As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.</p>
<p>Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.</p>
</blockquote>
<p>&#x4E5F;&#x6CA1;&#x5565;&#x8BF4;&#x7684;&#xFF0C;&#x904D;&#x5386;&#x5457;&#xFF0C;&#x5728;&#x8003;&#x8651;&#x8981;&#x4E0D;&#x8981;&#x8FD9;&#x79CD;&#x9898;&#x5C31;&#x4E0D;&#x8BF4;&#x4E86;&#xFF0C;&#x76F4;&#x63A5;&#x8D34;&#x4EE3;&#x7801;&#x597D;&#x4E86;&#x3002;&#x3002;&#x3002;&#x3002;&#x90FD;&#x662F;&#x66B4;&#x529B;&#x904D;&#x5386;&#xFF0C;&#x5E76;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x53EF;&#x8BF4;&#x7684;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem23</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vv<span class="token punctuation">;</span>
    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> mm<span class="token punctuation">;</span>
    <span class="token keyword">int</span> out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">28123</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> k<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> vv<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> mm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">28124</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> vv<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span>vv<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mm<span class="token punctuation">[</span>i<span class="token operator">-</span>vv<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> flag <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>out <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-24lexicographic-permutationshttpsprojecteulernetproblem24"><a href="https://projecteuler.net/problem=24" target="_blank" rel="noopener">Problem 24:Lexicographic permutations</a></h2>

<blockquote>
<p>A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:</p>
<p>012   021   102   120   201   210</p>
<p>What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?</p>
</blockquote>
<p>&#x6536;&#x56DE;&#x4E0A;&#x4E00;&#x9898;&#x8BF4;&#x7684;&#x8BDD;&#xFF01;&#x8FD9;&#x9053;&#x9898;&#x5C31;&#x5F88;&#x6709;&#x610F;&#x601D;&#x4E86;&#xFF0C;&#x770B;&#x4E0A;&#x53BB;&#x662F;&#x4E00;&#x9053;&#x6392;&#x5217;&#x7EC4;&#x5408;&#x7684;&#x9898;&#x554A;&#xFF0C;&#x4F46;&#x662F;&#x4E0B;&#x9762;&#x4EE3;&#x7801;&#x8DD1;&#x51FA;&#x6765;&#x7684;&#x7ED3;&#x679C;&#x5E76;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x7684;&#x6700;&#x7EC8;&#x7B54;&#x6848;&#x3002;&#x8FD9;&#x9053;&#x9898;&#x53EF;&#x4EE5;&#x7528;STL&#x7684;<code>next_permutation</code>&#x51FD;&#x6570;&#x505A;&#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x65E0;&#x8DA3;&#x3002;</p>
<p>&#x6240;&#x4EE5;&#x7A0D;&#x52A0;&#x5206;&#x6790;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#xFF0C;&#x6700;&#x5C0F;&#x7684;&#x6570;&#x5B57;&#x662F;0123456789&#xFF0C;&#x7136;&#x540E;&#x5982;&#x679C;&#x524D;&#x516B;&#x4F4D;&#x4E0D;&#x7684;&#x8BDD;&#xFF0C;&#x6709;2&#x79CD;&#x53EF;&#x80FD;&#x6027;&#x3002;&#x524D;&#x4E03;&#x4F4D;&#x4E0D;&#x52A8;&#x7684;&#x8BDD;&#xFF0C;&#x6709;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>&#xD7;</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">2\times3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">&#xD7;</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>&#x79CD;&#x53EF;&#x80FD;&#x6027;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;n&#x4F4D;&#x6570;&#x5B57;&#x53D8;&#x52A8;&#xFF0C;&#x6709;<code>n!</code>&#x7684;&#x53EF;&#x80FD;&#x6027;&#x3002;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x505A;&#x8FD9;&#x4E2A;&#x6392;&#x5217;&#x662F;&#x6BCF;&#x4E00;&#x4F4D;&#x662F;<code>n!</code>&#x8FDB;&#x4F4D;&#x5236;&#x7684;&#x3002;&#x8FD9;&#x6837;&#x5C06;1000000&#x5C3D;&#x53EF;&#x80FD;&#x9AD8;&#x7684;&#x6574;&#x9664;&#x4E0B;&#x6765;&#xFF0C;&#x8BA1;&#x7B97;&#x51FA;&#x6765;&#x7684;&#x6570;&#x5B57;&#x5C31;&#x662F;&#x67D0;&#x4E00;&#x4F4D;&#x8BE5;<strong>&#x8FDB;&#x51E0;&#x4F4D;</strong>&#x3002;</p>
<p>&#x4E3E;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x6BD4;&#x5982;&#x6C42;0,1,2,3&#x7684;&#x7B2C;14&#x5C0F;&#x7684;&#x6570;&#x5B57;&#x3002;&#x8FDB;&#x4F4D;&#x5206;&#x522B;&#x4E3A;6,2,1,14&#x51CF;1&#x540E;&#x6574;&#x9664;&#xFF0C;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>13</mn><mo>=</mo><mn>6</mn><mo>&#xD7;</mo><mn>2</mn><mo>+</mo><mn>2</mn><mo>&#xD7;</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo>&#xD7;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">13=6\times2+2\times0+1\times1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">&#xD7;</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">&#xD7;</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">&#xD7;</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>&#x5206;&#x522B;&#x8FDB;&#x4F4D;2,0,1&#x4F4D;&#xFF1B;&#x7136;&#x540E;&#x5728;&#x6BCF;&#x4E00;&#x4F4D;&#x4E0A;&#x9009;&#x53D6;&#x672A;&#x9009;&#x8FC7;&#x7684;&#x7B2C;&#x8FDB;&#x4F4D;&#x6570;&#x5B57;&#x5C0F;&#x7684;&#x6570;&#xFF0C;&#x8FD9;&#x6837;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x4E3A;0&#x8FDB;&#x4F4D;2&#x4F4D;&#xFF0C;&#x662F;2&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x5B57;&#x662F;0&#x8FDB;&#x4F4D;0&#x4F4D;&#x662F;0&#xFF0C;&#x7B2C;&#x4E09;&#x4E2A;&#x6570;&#x5B57;&#x662F;1&#x8FDB;&#x4F4D;1&#x4F4D;&#x662F;3&#xFF0C;&#x7B2C;&#x56DB;&#x4E2A;&#x6570;&#x5B57;&#x662F;&#x5269;&#x4E0B;&#x4E00;&#x4E2A;&#x6570;&#x5B57;1&#xFF0C;&#x56DB;&#x4E2A;&#x6570;&#x5B57;&#x4E3A;2,0,3,1&#xFF0C;&#x6240;&#x4EE5;&#x6700;&#x540E;&#x7B54;&#x6848;&#x4E3A;2031&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem24</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> nn<span class="token punctuation">;</span>
    nn<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>nn<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nn<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> nn<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1000000</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    string out <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> nn<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> nn<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;  &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        out <span class="token operator">=</span> out <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        num <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-251000-digit-fibonacci-numberhttpsprojecteulernetproblem25"><a href="https://projecteuler.net/problem=25" target="_blank" rel="noopener">Problem 25:1000-digit Fibonacci number</a></h2>

<p>&#x6C42;&#x7B2C;&#x51E0;&#x4E2A;&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;&#x7684;&#x503C;&#xFF0C;&#x62E5;&#x6709;1000&#x4F4D;&#x3002;</p>
<p>&#x4F9D;&#x65E7;&#x7528;&#x4E4B;&#x524D;&#x5199;&#x7684;&#x5927;&#x6574;&#x6570;&#x52A0;&#x6CD5;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem25</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> fib<span class="token punctuation">;</span>
    fib<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fib<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fib<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fib<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">BIGadds</span><span class="token punctuation">(</span>fib<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fib<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>fib<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> fib<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-26reciprocal-cycleshttpsprojecteulernetproblem26"><a href="https://projecteuler.net/problem=26" target="_blank" rel="noopener">Problem 26:Reciprocal cycles</a></h2>

<p>&#x597D;&#x50CF;&#x4ED6;&#x4EEC;&#x7BA1;&#x8FD9;&#x4E2A;&#x4E1C;&#x897F;&#x53EB;&#x5FAA;&#x73AF;&#x8282;&#xFF0C;&#x90A3;&#x5C31;&#x662F;&#x6C42;1000&#x4EE5;&#x4E0B;&#x7684;&#x6570;&#x5B57;d&#xFF0C;&#x4F7F;&#x5F97;1/d&#x62E5;&#x6709;&#x6700;&#x957F;&#x5FAA;&#x73AF;&#x8282;&#x3002;<br>
&#x7528;&#x6D6E;&#x70B9;&#x6570;&#x662F;&#x4E0D;&#x53EF;&#x80FD;&#x7684;&#x4E86;&#xFF0C;&#x7528;&#x811A;&#x6307;&#x5934;&#x60F3;&#x4E5F;&#x662F;&#x4E0D;&#x53EF;&#x80FD;&#x7684;&#x3002;&#x53EA;&#x80FD;&#x7528;&#x6A21;&#x62DF;&#x624B;&#x52A8;&#x9664;&#x6CD5;&#x7684;&#x65B9;&#x5F0F;&#x53BB;&#x505A;&#x3002;&#x5F53;&#x9664;&#x4E0D;&#x5C3D;&#x7684;&#x65F6;&#x5019;&#x9664;&#x6570;&#x4E58;&#x4EE5;&#x5341;&#x5E76;&#x52A0;&#x4E00;&#x4F4D;&#x8BA1;&#x6570;&#x3002;<br>
&#x6240;&#x4EE5;&#x5173;&#x952E;&#x662F;&#x600E;&#x4E48;&#x5224;&#x65AD;&#x51FA;&#x73B0;&#x4E86;&#x5FAA;&#x73AF;&#x5462;&#xFF0C;&#x5224;&#x65AD;&#x6570;&#x5B57;&#x4E00;&#x6837;&#x5E76;&#x4E0D;&#x80FD;&#x8868;&#x793A;&#x51FA;&#x73B0;&#x4E86;&#x5FAA;&#x73AF;&#xFF0C;&#x5173;&#x952E;&#x662F;&#x5224;&#x65AD;&#x9664;&#x6570;&#x51FA;&#x73B0;&#x4E86;&#x5FAA;&#x73AF;&#xFF0C;&#xFF08;&#x8FD9;&#x8FB9;&#x770B;&#x5230;&#x6709;&#x5730;&#x65B9;&#x8BF4;&#x662F;&#x51FA;&#x73B0;&#x4E86;1&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF0C;&#x6BD4;&#x5982;1/6&#x5C31;&#x4E0D;&#x662F;&#xFF09;&#xFF0C;&#x505A;&#x9664;&#x6CD5;&#x7684;&#x540C;&#x65F6;&#x5C06;&#x9664;&#x6570;&#x653E;&#x5230;&#x4E00;&#x4E2A;map&#x5185;&#xFF0C;&#x5E76;&#x5C06;&#x5F53;&#x524D;&#x9664;&#x6570;&#x7684;&#x4F4D;&#x6570;&#x5B58;&#x5230;map&#x5185;&#xFF0C;&#x5F53;&#x5B58;&#x50A8;&#x65F6;map&#x7684;&#x5BF9;&#x5E94;key&#x5185;&#x5DF2;&#x7ECF;&#x6709;&#x503C;&#x7684;&#x65F6;&#x5019;&#x8BF4;&#x660E;&#x51FA;&#x73B0;&#x4E86;&#x5FAA;&#x73AF;&#xFF0C;&#x4E24;&#x4E2A;&#x4F4D;&#x6570;&#x76F8;&#x51CF;&#x5373;&#x662F;&#x5FAA;&#x73AF;&#x8282;&#x7684;&#x957F;&#x5EA6;&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem26</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 4.29s</span>
    <span class="token keyword">int</span> out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> true_out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\t&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> mm<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
            num <span class="token operator">=</span> num <span class="token operator">%</span> i<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mm<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> mm<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> j <span class="token operator">-</span> mm<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">-</span>mm<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> out<span class="token punctuation">)</span>true_out <span class="token operator">=</span> i<span class="token punctuation">;</span>
                out <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> j <span class="token operator">-</span> mm<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> true_out <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-27quadratic-primeshttpsprojecteulernetproblem27"><a href="https://projecteuler.net/problem=27" target="_blank" rel="noopener">Problem 27:Quadratic primes</a></h2>

<p>&#x66B4;&#x529B;&#x904D;&#x5386;&#xFF0C;&#x53E6;&#x5916;&#x8FD9;&#x91CC;&#x66F4;&#x65B0;&#x4E86;&#x4E00;&#x4E0B;&#x5224;&#x65AD;&#x8D28;&#x6570;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x80FD;&#x5FEB;&#x4E00;&#x70B9;&#xFF0C;&#x4E5F;&#x8D34;&#x5728;&#x4E0B;&#x9762;&#x5427;&#x3002;<br>
&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x516C;&#x5F0F;&#x86EE;&#x6709;&#x610F;&#x601D;&#x7684;&#xFF0C;&#x60F3;&#x60F3;&#x8001;&#x4E00;&#x8F88;&#x7684;&#x6570;&#x5B66;&#x5BB6;&#x4EEC;&#x53EF;&#x80FD;&#x4E00;&#x4E2A;&#x5947;&#x601D;&#x5999;&#x60F3;&#x6216;&#x8005;&#x8D39;&#x52B2;&#x5FC3;&#x601D;&#x7684;&#x8BA1;&#x7B97;&#x9A8C;&#x8BC1;&#xFF0C;&#x80FD;&#x90FD;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x5F88;&#x795E;&#x5947;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x4F46;&#x662F;&#x5230;&#x6211;&#x4EEC;&#x8FD9;&#x4EE3;&#x7684;&#x65F6;&#x5019;&#x751A;&#x81F3;&#x53EF;&#x4EE5;&#x628A;&#x8FD9;&#x79CD;&#x7ED3;&#x679C;&#x901A;&#x7528;&#x5316;&#x7684;&#x53BB;&#x9A8C;&#x8BC1;&#x548C;&#x8BA1;&#x7B97;&#xFF0C;&#x5E76;&#x4E14;&#x6BEB;&#x4E0D;&#x8D39;&#x529B;&#xFF0C;&#x79D1;&#x6280;&#x7684;&#x53D1;&#x5C55;&#x771F;&#x7684;&#x662F;&#x5DE8;&#x5927;&#x7684;&#x52A8;&#x529B;&#xFF0C;&#x5C06;&#x65E7;&#x65F6;&#x4EE3;&#x7684;&#x6210;&#x679C;&#x6BEB;&#x4E0D;&#x8D39;&#x529B;&#x7684;&#x78BE;&#x538B;&#x8FC7;&#x53BB;&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem27</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> realout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">;</span> b <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token operator">+</span>a<span class="token operator">*</span>i<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        out <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        realout <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> realout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> prime<span class="token punctuation">;</span>
    prime<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>prime<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>prime<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>prime<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> ss <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> k <span class="token operator">=</span> prime<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k <span class="token operator">!=</span> prime<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token operator">*</span>k<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>k<span class="token punctuation">)</span> <span class="token operator">&gt;</span> ss<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prime<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//cout &lt;&lt; &quot;new Prime:&quot; &lt;&lt; i &lt;&lt; endl;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> number<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</pre><h2 class="mume-header" id="problem-28number-spiral-diagonalshttpsprojecteulernetproblem28"><a href="https://projecteuler.net/problem=28" target="_blank" rel="noopener">Problem 28:Number spiral diagonals</a></h2>

<p>&#x624B;&#x52A8;&#x8BA1;&#x7B97;&#x7684;&#xFF0C;&#x591A;&#x5199;&#x51E0;&#x5708;&#x627E;&#x4E00;&#x4E0B;&#x89C4;&#x5F8B;&#xFF0C;&#x6BCF;&#x4E00;&#x5708;&#x51E0;&#x4E2A;&#x6570;&#x5DEE;&#x591A;&#x5C11;&#xFF0C;&#x5708;&#x4E0E;&#x5708;&#x4E4B;&#x95F4;&#x5DEE;&#x591A;&#x5C11;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem28</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> out <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">500</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        out <span class="token operator">+=</span> i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">;</span>
        i <span class="token operator">+=</span> k<span class="token punctuation">;</span>
        k <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>
        j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> out<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-29distinct-powershttpsprojecteulernetproblem29"><a href="https://projecteuler.net/problem=29" target="_blank" rel="noopener">Problem 29:Distinct powers</a></h2>

<p>&#x8FD9;&#x9053;&#x9898;&#x505A;&#x7684;&#x771F;&#x7684;&#x662F;&#xFF0C;&#x592A;&#x6284;&#x8FD1;&#x8DEF;&#xFF0C;&#x76F4;&#x63A5;&#x7528;&#x5927;&#x6574;&#x6570;&#x4E58;&#x6CD5;+set&#x89E3;&#x51B3;&#x4E86;&#x3002;&#x4ED4;&#x7EC6;&#x60F3;&#x60F3;&#x5982;&#x679C;&#x5224;&#x65AD;&#x7684;&#x8BDD;&#xFF0C;&#x6328;&#x4E2A;&#x6570;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x5224;&#x65AD;&#x56E0;&#x6570;&#x4F3C;&#x4E4E;&#x4E5F;&#x662F;&#x53EF;&#x884C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x60C5;&#x51B5;&#x592A;&#x591A;&#xFF0C;&#x53EF;&#x80FD;&#x6F0F;&#x6389;&#xFF0C;&#x8D5E;&#x7F8E;&#x79D1;&#x6280;&#xFF0C;&#x8D5E;&#x7F8E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem29</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> ss<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            string num <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
            stringstream s<span class="token punctuation">;</span>
            s <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                num <span class="token operator">=</span> <span class="token function">BIGtimes</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            ss<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> ss<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Time:541.863000</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-30digit-fifth-powershttpsprojecteulernetproblem30"><a href="https://projecteuler.net/problem=30" target="_blank" rel="noopener">Problem 30:Digit fifth powers</a></h2>

<p>&#x55EF;&#xFF0C;&#x6C34;&#x4ED9;&#x82B1;&#x6570;&#x8FD8;&#x662F;&#x5565;&#x6765;&#x7740;&#xFF0C;&#x7B97;&#x5C31;&#x5BF9;&#x4E86;&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem30</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">400000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//if (i % 10000 == 0) cout &lt;&lt; i &lt;&lt; endl;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            n <span class="token operator">+=</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> out <span class="token operator">+=</span> i<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre>
      </div>
      
      
    
    
    
    
    
    
    
    
  
    </body></html>]]></content>
      <tags>
        <tag>Project Euler</tag>
      </tags>
  </entry>
  <entry>
    <title>Project Euler  题解：11~20</title>
    <url>/2019/07/23/ProjectEuler_Solution_11_20/</url>
    <content><![CDATA[<!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">
      <title>Project Euler  &#x9898;&#x89E3;&#xFF1A;11~20</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      
      <link rel="stylesheet" href="/js/src/katex/katex.min.css">
      
      

      
      
      
      
      
      

      <style>
      /**
 * prism.js Github theme based on GitHub's theme.
 * @author Sam Clarke
 */
code[class*="language-"],
pre[class*="language-"] {
  color: #333;
  background: none;
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.4;

  -moz-tab-size: 8;
  -o-tab-size: 8;
  tab-size: 8;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
  padding: .8em;
  overflow: auto;
  /* border: 1px solid #ddd; */
  border-radius: 3px;
  /* background: #fff; */
  background: #f5f5f5;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
  white-space: normal;
  background: #f5f5f5;
}

.token.comment,
.token.blockquote {
  color: #969896;
}

.token.cdata {
  color: #183691;
}

.token.doctype,
.token.punctuation,
.token.variable,
.token.macro.property {
  color: #333;
}

.token.operator,
.token.important,
.token.keyword,
.token.rule,
.token.builtin {
  color: #a71d5d;
}

.token.string,
.token.url,
.token.regex,
.token.attr-value {
  color: #183691;
}

.token.property,
.token.number,
.token.boolean,
.token.entity,
.token.atrule,
.token.constant,
.token.symbol,
.token.command,
.token.code {
  color: #0086b3;
}

.token.tag,
.token.selector,
.token.prolog {
  color: #63a35c;
}

.token.function,
.token.namespace,
.token.pseudo-element,
.token.class,
.token.class-name,
.token.pseudo-class,
.token.id,
.token.url-reference .token.variable,
.token.attr-name {
  color: #795da3;
}

.token.entity {
  cursor: help;
}

.token.title,
.token.title .token.punctuation {
  font-weight: bold;
  color: #1d3e81;
}

.token.list {
  color: #ed6a43;
}

.token.inserted {
  background-color: #eaffea;
  color: #55a532;
}

.token.deleted {
  background-color: #ffecec;
  color: #bd2c00;
}

.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}


/* JSON */
.language-json .token.property {
  color: #183691;
}

.language-markup .token.tag .token.punctuation {
  color: #333;
}

/* CSS */
code.language-css,
.language-css .token.function {
  color: #0086b3;
}

/* YAML */
.language-yaml .token.atrule {
  color: #63a35c;
}

code.language-yaml {
  color: #183691;
}

/* Ruby */
.language-ruby .token.function {
  color: #333;
}

/* Markdown */
.language-markdown .token.url {
  color: #795da3;
}

/* Makefile */
.language-makefile .token.symbol {
  color: #795da3;
}

.language-makefile .token.variable {
  color: #183691;
}

.language-makefile .token.builtin {
  color: #0086b3;
}

/* Bash */
.language-bash .token.keyword {
  color: #0086b3;
}

/* highlight */
pre[data-line] {
  position: relative;
  padding: 1em 0 1em 3em;
}
pre[data-line] .line-highlight-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  background-color: transparent;
  display: block;
  width: 100%;
}

pre[data-line] .line-highlight {
  position: absolute;
  left: 0;
  right: 0;
  padding: inherit 0;
  margin-top: 1em;
  background: hsla(24, 20%, 50%,.08);
  background: linear-gradient(to right, hsla(24, 20%, 50%,.1) 70%, hsla(24, 20%, 50%,0));
  pointer-events: none;
  line-height: inherit;
  white-space: pre;
}

pre[data-line] .line-highlight:before, 
pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-start);
  position: absolute;
  top: .4em;
  left: .6em;
  min-width: 1em;
  padding: 0 .5em;
  background-color: hsla(24, 20%, 50%,.4);
  color: hsl(24, 20%, 95%);
  font: bold 65%/1.5 sans-serif;
  text-align: center;
  vertical-align: .3em;
  border-radius: 999px;
  text-shadow: none;
  box-shadow: 0 1px white;
}

pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-end);
  top: auto;
  bottom: .4em;
}html body{font-family:"Helvetica Neue",Helvetica,"Segoe UI",Arial,freesans,sans-serif;font-size:16px;line-height:1.6;color:#333;background-color:#fff;overflow:initial;box-sizing:border-box;word-wrap:break-word}html body>:first-child{margin-top:0}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{line-height:1.2;margin-top:1em;margin-bottom:16px;color:#000}html body h1{font-size:2.25em;font-weight:300;padding-bottom:.3em}html body h2{font-size:1.75em;font-weight:400;padding-bottom:.3em}html body h3{font-size:1.5em;font-weight:500}html body h4{font-size:1.25em;font-weight:600}html body h5{font-size:1.1em;font-weight:600}html body h6{font-size:1em;font-weight:600}html body h1,html body h2,html body h3,html body h4,html body h5{font-weight:600}html body h5{font-size:1em}html body h6{color:#5c5c5c}html body strong{color:#000}html body del{color:#5c5c5c}html body a:not([href]){color:inherit;text-decoration:none}html body a{color:#08c;text-decoration:none}html body a:hover{color:#00a3f5;text-decoration:none}html body img{max-width:100%}html body>p{margin-top:0;margin-bottom:16px;word-wrap:break-word}html body>ul,html body>ol{margin-bottom:16px}html body ul,html body ol{padding-left:2em}html body ul.no-list,html body ol.no-list{padding:0;list-style-type:none}html body ul ul,html body ul ol,html body ol ol,html body ol ul{margin-top:0;margin-bottom:0}html body li{margin-bottom:0}html body li.task-list-item{list-style:none}html body li>p{margin-top:0;margin-bottom:0}html body .task-list-item-checkbox{margin:0 .2em .25em -1.8em;vertical-align:middle}html body .task-list-item-checkbox:hover{cursor:pointer}html body blockquote{margin:16px 0;font-size:inherit;padding:0 15px;color:#5c5c5c;border-left:4px solid #d6d6d6}html body blockquote>:first-child{margin-top:0}html body blockquote>:last-child{margin-bottom:0}html body hr{height:4px;margin:32px 0;background-color:#d6d6d6;border:0 none}html body table{margin:10px 0 15px 0;border-collapse:collapse;border-spacing:0;display:block;width:100%;overflow:auto;word-break:normal;word-break:keep-all}html body table th{font-weight:bold;color:#000}html body table td,html body table th{border:1px solid #d6d6d6;padding:6px 13px}html body dl{padding:0}html body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:bold}html body dl dd{padding:0 16px;margin-bottom:16px}html body code{font-family:Menlo,Monaco,Consolas,'Courier New',monospace;font-size:.85em !important;color:#000;background-color:#f0f0f0;border-radius:3px;padding:.2em 0}html body code::before,html body code::after{letter-spacing:-0.2em;content:"\00a0"}html body pre>code{padding:0;margin:0;font-size:.85em !important;word-break:normal;white-space:pre;background:transparent;border:0}html body .highlight{margin-bottom:16px}html body .highlight pre,html body pre{padding:1em;overflow:auto;font-size:.85em !important;line-height:1.45;border:#d6d6d6;border-radius:3px}html body .highlight pre{margin-bottom:0;word-break:normal}html body pre code,html body pre tt{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}html body pre code:before,html body pre tt:before,html body pre code:after,html body pre tt:after{content:normal}html body p,html body blockquote,html body ul,html body ol,html body dl,html body pre{margin-top:0;margin-bottom:16px}html body kbd{color:#000;border:1px solid #d6d6d6;border-bottom:2px solid #c7c7c7;padding:2px 4px;background-color:#f0f0f0;border-radius:3px}@media print{html body{background-color:#fff}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{color:#000;page-break-after:avoid}html body blockquote{color:#5c5c5c}html body pre{page-break-inside:avoid}html body table{display:table}html body img{display:block;max-width:100%;max-height:100%}html body pre,html body code{word-wrap:break-word;white-space:pre}}.markdown-preview{width:100%;height:100%;box-sizing:border-box}.markdown-preview .pagebreak,.markdown-preview .newpage{page-break-before:always}.markdown-preview pre.line-numbers{position:relative;padding-left:3.8em;counter-reset:linenumber}.markdown-preview pre.line-numbers>code{position:relative}.markdown-preview pre.line-numbers .line-numbers-rows{position:absolute;pointer-events:none;top:1em;font-size:100%;left:0;width:3em;letter-spacing:-1px;border-right:1px solid #999;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.markdown-preview pre.line-numbers .line-numbers-rows>span{pointer-events:none;display:block;counter-increment:linenumber}.markdown-preview pre.line-numbers .line-numbers-rows>span:before{content:counter(linenumber);color:#999;display:block;padding-right:.8em;text-align:right}.markdown-preview .mathjax-exps .MathJax_Display{text-align:center !important}.markdown-preview:not([for="preview"]) .code-chunk .btn-group{display:none}.markdown-preview:not([for="preview"]) .code-chunk .status{display:none}.markdown-preview:not([for="preview"]) .code-chunk .output-div{margin-bottom:16px}.scrollbar-style::-webkit-scrollbar{width:8px}.scrollbar-style::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}.scrollbar-style::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode]){position:relative;width:100%;height:100%;top:0;left:0;margin:0;padding:0;overflow:auto}html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{position:relative;top:0}@media screen and (min-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em calc(50% - 457px + 2em)}}@media screen and (max-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{font-size:14px !important;padding:1em}}@media print{html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{display:none}}html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{position:fixed;bottom:8px;left:8px;font-size:28px;cursor:pointer;color:inherit;z-index:99;width:32px;text-align:center;opacity:.4}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] #sidebar-toc-btn{opacity:1}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc{position:fixed;top:0;left:0;width:300px;height:100%;padding:32px 0 48px 0;font-size:14px;box-shadow:0 0 4px rgba(150,150,150,0.33);box-sizing:border-box;overflow:auto;background-color:inherit}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar{width:8px}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc a{text-decoration:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{padding:0 1.6em;margin-top:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc li{margin-bottom:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{list-style-type:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{left:300px;width:calc(100% -  300px);padding:2em calc(50% - 457px -  150px);margin:0;box-sizing:border-box}@media screen and (max-width:1274px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{width:100%}}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .markdown-preview{left:50%;transform:translateX(-50%)}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .md-sidebar-toc{display:none}
/* Please visit the URL below for more information: */
/*   https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css */

      </style>
    </head>
    <body for="html-export">
      <div class="mume markdown-preview  ">
<p>&#x7EE7;&#x7EED;&#x4E0A;&#x4E00;&#x6B21;&#x7684;Project Euler&#x7684;&#x9898;&#x89E3;&#xFF0C;&#x4E0D;&#x89C1;&#x5F97;&#x6700;&#x4F18;&#xFF0C;&#x4E5F;&#x4E0D;&#x89C1;&#x5F97;&#x4F18;&#x96C5;&#xFF0C;&#x4F46;&#x662F;&#x7B54;&#x6848;&#x662F;&#x5BF9;&#x7684;&#xFF0C;&#x601D;&#x8DEF;&#x4E5F;&#x662F;&#x6CA1;&#x95EE;&#x9898;&#x7684;&#x3002;&#x8FD9;&#x6B21;&#x662F;11~20&#x9898;&#x3002;</p>

<h2 class="mume-header" id="problem-11largest-product-in-a-gridhttpsprojecteulernetproblem11"><a href="https://projecteuler.net/problem=11" target="_blank" rel="noopener">Problem 11:Largest product in a grid</a></h2>

<p>&#x5728;&#x4E00;&#x4E2A;20x20&#x7684;&#x8868;&#x683C;&#x5185;&#x5728;&#x6A2A;&#x7AD6;&#x659C;&#x56DB;&#x4E2A;&#x65B9;&#x5411;&#x4E0A;&#x627E;&#x8FDE;&#x7EED;&#x56DB;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x6700;&#x5927;&#x4E58;&#x79EF;&#x3002;</p>
<p>&#x66B4;&#x529B;&#x904D;&#x5386;&#x5C31;&#x5BF9;&#x4E86;&#xFF0C;&#x8F93;&#x5165;&#x76F4;&#x63A5;&#x590D;&#x5236;&#x8FC7;&#x6765;&#x901A;&#x8FC7;&#x6587;&#x672C;&#x8F93;&#x5165;&#xFF0C;&#x7ED9;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x7684; <code>vector&lt;vector&lt;int&gt;&gt;</code> &#xFF0C;&#x5F00;&#x59CB;&#x53EF;&#x52B2;&#x7684;&#x904D;&#x5386;&#xFF0C;&#x8BA1;&#x7B97;&#x56DB;&#x4E2A;&#x65B9;&#x5411;&#x3002;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x8FB9;&#x754C;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#xFF0C;&#x8FD9;&#x91CC;&#x5206;&#x6210;&#x4E86;&#x4E24;&#x90E8;&#x5206;&#xFF0C;&#x4E00;&#x90E8;&#x5206;&#x5411;&#x53F3;&#xFF0C;&#x4E0B;&#xFF0C;&#x53F3;&#x4E0B;&#x904D;&#x5386;&#xFF0C;&#x4E00;&#x90E8;&#x5206;&#x5411;&#x5DE6;&#x4E0A;&#x904D;&#x5386;&#xFF0C;&#x540C;&#x6837;&#x80FD;&#x904D;&#x5386;&#x6240;&#x6709;&#x60C5;&#x51B5;&#xFF0C;&#x540C;&#x65F6;&#x907F;&#x514D;&#x4E86;&#x8FB9;&#x754C;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#x3002;</p>
  <a id="more"></a>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem11</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	string input <span class="token operator">=</span><span class="token string">&quot;08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\
		49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\
		81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\
		52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\
		22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\
		24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\
		32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\
		67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\
		24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\
		21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\
		78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\
		16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\
		86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\
		19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\
		04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\
		88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\
		04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\
		20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\
		20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\
		01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48&quot;</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> nums<span class="token punctuation">;</span>
	stringstream ss<span class="token punctuation">;</span>
	ss <span class="token operator">&lt;&lt;</span> input<span class="token punctuation">;</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>ss <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> nums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">int</span> nn <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			out <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> nn<span class="token punctuation">)</span><span class="token punctuation">;</span>
			nn <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			out <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> nn<span class="token punctuation">)</span><span class="token punctuation">;</span>
			nn <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			out <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> nn<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">19</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">int</span> nn <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">-</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			out <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> nn<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	cout <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</pre><h2 class="mume-header" id="problem-12highly-divisible-triangular-numberhttpsprojecteulernetproblem12"><a href="https://projecteuler.net/problem=12" target="_blank" rel="noopener">Problem 12:Highly divisible triangular number</a></h2>

<p>&#x9898;&#x76EE;&#x5199;&#x7684;&#x633A;&#x7ED5;&#x7684;&#xFF0C;&#x6309;&#x6B65;&#x9AA4;&#x505A;&#x5C31;&#x597D;&#x4E86;&#xFF0C;&#x5148;&#x662F;&#x4E00;&#x4E2A;<code>1 ~ n</code>&#x7684;&#x7B49;&#x5DEE;&#x6570;&#x5217;&#x7684;&#x548C;&#xFF0C;&#x6211;&#x8FD9;&#x91CC;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#x9EBB;&#x70E6;&#x4E86;&#xFF0C;&#x5728;&#x6BCF;&#x4E2A;&#x5468;&#x671F;&#x4E0A;&#x52A0;<code>i</code>&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;&#x7136;&#x540E;&#x8BA1;&#x7B97;<code>1 ~ sqrt(k)</code>&#x4E4B;&#x95F4;&#x7684;&#x80FD;&#x88AB;&#x6574;&#x9664;&#x7684;&#x6570;&#x5B57;&#x6570;&#x91CF;&#xFF0C;&#x4E58;&#x4EE5;&#x4E8C;&#x5C31;&#x662F;&#x56E0;&#x6570;&#x6570;&#x91CF;&#xFF0C;&#x8FD9;&#x8FB9;&#x6CA1;&#x6709;&#x5355;&#x72EC;&#x5224;&#x65AD;<code>k</code>&#x662F;&#x5E73;&#x65B9;&#x6570;&#x7684;&#x60C5;&#x51B5;&#xFF08;&#x56E0;&#x4E3A;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x6839;&#x672C;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;<code>k=i*(i+1)/2</code>&#xFF09;&#xFF0C;&#x6700;&#x540E;&#x5224;&#x65AD;&#x4E00;&#x4E0B;&#x6570;&#x91CF;&#x5927;&#x4E8E;500&#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x5373;&#x53EF;&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem12</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> k <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				count <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ans:&quot;</span> <span class="token operator">&lt;&lt;</span> k <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-13large-sumhttpsprojecteulernetproblem13"><a href="https://projecteuler.net/problem=13" target="_blank" rel="noopener">Problem 13:Large sum</a></h2>

<p>&#x628A;&#x4E0B;&#x5217;100&#x4E2A;&#x4E94;&#x5341;&#x4F4D;&#x7684;&#x6570;&#x5B57;&#x76F8;&#x52A0;&#xFF0C;&#x53D6;&#x548C;&#x7684;&#x524D;&#x5341;&#x4F4D;&#x3002;</p>
<p>&#x672C;&#x6765;&#x8003;&#x8651;&#x662F;&#x4E2A;&#x5927;&#x6574;&#x6570;&#x76F8;&#x52A0;&#xFF0C;&#x4F46;&#x662F;&#x7ED3;&#x679C;&#x53EA;&#x8981;&#x524D;&#x5341;&#x4F4D;&#x554A;&#xFF01;&#x524D;&#x5341;&#x4F4D;&#xFF01;&#x6240;&#x4EE5;&#x4E00;&#x4E2A;<code>long long</code>&#x662F;&#x8DB3;&#x591F;&#x7528;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x53EA;&#x52A0;&#x524D;&#x9762;&#x7684;&#x6570;&#x5B57;&#x5C31;&#x53EF;&#x4EE5;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x52A0;&#x6574;&#x4E2A;&#x7684;50&#x4F4D;&#x6570;&#x5B57;&#x3002;100&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x8BDD;&#x56E0;&#x4E3A;&#x8FDB;&#x4F4D;&#xFF0C;&#x9700;&#x8981;&#x52A0;&#x524D;12&#x4F4D;&#xFF0C;&#x6700;&#x540E;&#x7ED3;&#x679C;&#x53D6;&#x524D;&#x5341;&#x4F4D;&#x6570;&#x5B57;&#x5373;&#x53EF;&#x3002;&#x4E3A;&#x4EC0;&#x4E48;&#x6211;&#x53D6;&#x4E86;11&#x4F4D;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x968F;&#x4FBF;&#x5199;&#x7684;&#xFF0C;&#x53D1;&#x73B0;&#x7B54;&#x6848;&#x662F;&#x5BF9;&#x7684;&#x5C31;&#x8FC7;&#x53BB;&#x4E86;:)</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem13</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	string num <span class="token operator">=</span> &quot;<span class="token number">37107287533902102798797998220837590246510135740250</span>\
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token number">53503534226472524250874054075591789781264330331690</span>&quot;<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> nums<span class="token punctuation">;</span>
	nums <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">&apos;\t&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		stringstream ss<span class="token punctuation">;</span>
		ss <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">long</span> <span class="token keyword">long</span> nn<span class="token punctuation">;</span>
		ss <span class="token operator">&gt;&gt;</span> nn<span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> nn <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		sum <span class="token operator">+=</span> nn<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> nums<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-14longest-collatz-sequencehttpsprojecteulernetproblem14"><a href="https://projecteuler.net/problem=14" target="_blank" rel="noopener">Problem 14:Longest Collatz sequence</a></h2>

<p>&#x5C0F;&#x65F6;&#x5019;&#x73A9;&#x7684;&#x6570;&#x5B66;&#x6E38;&#x620F;&#x91CC;&#x9762;&#x7684;&#x9898;&#x76EE;&#xFF0C;&#x957F;&#x5927;&#x4E86;&#x53D1;&#x73B0;&#x662F;&#x4E2A;&#x5F88;&#x6709;&#x540D;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x751A;&#x81F3;&#x8FD8;&#x6CA1;&#x6709;&#x88AB;&#x89E3;&#x51B3;&#x3002;&#x88AB;&#x79F0;&#x4F5C;&#x514B;&#x62C9;&#x5179;&#x95EE;&#x9898;&#xFF08;Collatz problem&#xFF09;&#x4E5F;&#x88AB;&#x53EB;&#x505A;hailstone&#x95EE;&#x9898;&#x3001;3n+1&#x95EE;&#x9898;&#x3001;Hasse&#x7B97;&#x6CD5;&#x95EE;&#x9898;&#x3001;Kakutani&#x7B97;&#x6CD5;&#x95EE;&#x9898;&#x3001;Thwaites&#x731C;&#x60F3;&#x6216;&#x8005;Ulam&#x95EE;&#x9898;&#x3002;</p>
<p>&#x8FD9;&#x9053;&#x9898;&#x662F;&#x95EE;&#x4E00;&#x767E;&#x4E07;&#x4EE5;&#x4E0B;&#x7684;&#x6570;&#x5B57;&#x4E2D;&#xFF0C;&#x54EA;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x94FE;&#x6700;&#x957F;&#xFF0C;&#x904D;&#x5386;&#x5C31;&#x597D;&#x4E86;&#xFF0C;&#x8BB0;&#x5F55;&#x6B65;&#x957F;&#x3002;&#x552F;&#x4E00;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x867D;&#x7136;&#x5F00;&#x59CB;&#x8BA1;&#x7B97;&#x7684;&#x6570;&#x5B57;&#x5C0F;&#x4E8E;&#x4E00;&#x767E;&#x4E07;&#xFF0C;&#x4F46;&#x662F;&#x4E2D;&#x95F4;&#x6570;&#x5B57;&#x4F1A;&#x8D85;&#x8FC7;int&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;<code>long long</code>&#x8BA1;&#x7B97;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem14</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> out <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> steps <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span>
		<span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			step<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> i <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">&gt;</span> steps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			steps <span class="token operator">=</span> step<span class="token punctuation">;</span>
			out <span class="token operator">=</span> k<span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> k <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;  &quot;</span> <span class="token operator">&lt;&lt;</span> step <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ans:&quot;</span> <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-15lattice-pathshttpsprojecteulernetproblem15"><a href="https://projecteuler.net/problem=15" target="_blank" rel="noopener">Problem 15:Lattice paths</a></h2>

<p>&#x8FD9;&#x4E2A;&#x9898;&#x662F;&#x505A;&#x8FC7;&#x5F88;&#x591A;&#x904D;&#x7684;&#x4E86;&#xFF0C;&#x7B80;&#x5355;&#x7684;DP&#x95EE;&#x9898;&#x3002;</p>
<p>&#x53E6;&#x5916;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x6392;&#x5217;&#x7EC4;&#x5408;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x56DB;&#x5341;&#x4E2A;&#x6B65;&#x9AA4;&#x4E2D;&#x63D2;&#x5165;&#x4E8C;&#x5341;&#x4E2A;&#x53F3;&#xFF0C;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mn>40</mn><mn>20</mn></msubsup></mrow><annotation encoding="application/x-tex">C_{40}^{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">&#x200B;</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem15</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 2  6</span>
	<span class="token comment">// 3  20</span>
	<span class="token comment">// DP</span>
<span class="token macro property">#<span class="token directive keyword">define</span> edge 20</span>
	<span class="token keyword">long</span> <span class="token keyword">long</span> nums<span class="token punctuation">[</span>edge<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>edge<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edge <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edge <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> edge <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ans:&quot;</span> <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">[</span>edge<span class="token punctuation">]</span><span class="token punctuation">[</span>edge<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-16power-digit-sumhttpsprojecteulernetproblem16"><a href="https://projecteuler.net/problem=16" target="_blank" rel="noopener">Problem 16:Power digit sum</a></h2>

<p>&#x55EF;&#xFF0C;&#x8FD9;&#x4E2A;&#x9898;&#x7528;&#x7684;&#x5927;&#x6574;&#x6570;&#x4E58;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x89C1;&#x4E4B;&#x524D;&#x7684;&#x6587;&#x7AE0;&#x5B9E;&#x73B0;&#xFF0C;&#x6700;&#x540E;&#x7D2F;&#x52A0;&#x6BCF;&#x4E00;&#x4F4D;&#x6570;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;&#x8FD9;&#x9053;&#x9898;&#x7528;&#x7684;&#x4E58;2&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	string num <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
	
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> ii<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> ii<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		string num2 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> num<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>
			n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> up<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			stringstream ss<span class="token punctuation">;</span>
			ss <span class="token operator">&lt;&lt;</span> n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
			num2 <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> num2<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>up <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> num2 <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> num2<span class="token punctuation">;</span>
		num <span class="token operator">=</span> num2<span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> num2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		sum <span class="token operator">+=</span> num<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ans:&quot;</span> <span class="token operator">&lt;&lt;</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><h2 class="mume-header" id="problem-17number-letter-countshttpsprojecteulernetproblem17"><a href="https://projecteuler.net/problem=17" target="_blank" rel="noopener">Problem 17:Number letter counts</a></h2>

<p>&#x82F1;&#x8BED;&#x65E0;&#x80FD;&#xFF0C;&#x6328;&#x4E2A;&#x6570;&#x3002;</p>
<h2 class="mume-header" id="problem-18maximum-path-sum-ihttpsprojecteulernetproblem18"><a href="https://projecteuler.net/problem=18" target="_blank" rel="noopener">Problem 18:Maximum path sum I</a></h2>

<p>&#x5BFB;&#x627E;&#x4E00;&#x6761;&#x4ECE;&#x9876;&#x7AEF;&#x5230;&#x5E95;&#x7AEF;&#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x4F7F;&#x5F97;&#x8DEF;&#x5F84;&#x4E0A;&#x7684;&#x6570;&#x5B57;&#x603B;&#x548C;&#x6700;&#x5927;&#x3002;DP</p>
<p>&#x4ECE;&#x5E95;&#x7AEF;&#x5411;&#x4E0A;&#x7B97;&#xFF0C;&#x8BB0;&#x5F55;&#x6BCF;&#x4E00;&#x4E2A;&#x503C;&#x5230;&#x4E0B;&#x4E00;&#x884C;&#x7684;&#x53EF;&#x80FD;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x7B97;&#x5230;&#x6700;&#x540E;&#x5269;&#x4E0B;&#x552F;&#x4E00;&#x4E00;&#x4E2A;&#x503C;&#xFF0C;&#x5373;&#x4E3A;&#x9898;&#x76EE;&#x8981;&#x6C42;&#x7684;&#x6700;&#x5927;&#x503C;&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem18</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	string triangle <span class="token operator">=</span> <span class="token string">&quot;75\
	95 64\
	17 47 82\
	18 35 87 10\
	20 04 82 47 65\
	19 01 23 75 03 34\
	88 02 77 73 07 63 67\
	99 65 04 28 06 16 70 92\
	41 41 26 56 83 40 80 70 33\
	41 48 72 33 47 32 37 16 94 29\
	53 71 44 65 25 43 91 52 97 51 14\
	70 11 33 28 77 73 17 78 39 68 17 57\
	91 71 52 38 17 14 91 43 58 50 27 29 48\
	63 66 04 68 89 53 67 30 73 16 69 87 40 31\
	04 62 98 27 23 09 70 98 73 93 38 53 60 04 23&quot;</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> trianglenum<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>lines <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>triangle<span class="token punctuation">,</span> <span class="token string">&apos;\t&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> numlines<span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> nums <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>lines<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&apos; &apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			stringstream ss<span class="token punctuation">;</span>
			ss <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> nn<span class="token punctuation">;</span>
			ss <span class="token operator">&gt;&gt;</span> nn<span class="token punctuation">;</span>
			numlines<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		trianglenum<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>numlines<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	cout <span class="token operator">&lt;&lt;</span> trianglenum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> trianglenum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> trianglenum<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">int</span> nn <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>trianglenum<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> trianglenum<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			trianglenum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> trianglenum<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> nn<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ans:&quot;</span> <span class="token operator">&lt;&lt;</span> trianglenum<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><p>&#x53E6;&#x5916;&#x9898;&#x76EE;&#x8BF4;&#x660E;&#x91CC;&#x8BF4;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x6570;&#x91CF;&#x7EA7;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x904D;&#x5386;&#x6765;&#x5B9E;&#x73B0;&#xFF0C;&#x7136;&#x540E;&#x8054;&#x52A8;&#x4E86;<a href="https://projecteuler.net/problem=67" target="_blank" rel="noopener">Problem 67:Counting Sundays</a>&#xFF0C;&#x662F;&#x540C;&#x6837;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x6709;100&#x884C;&#xFF0C;&#x505A;&#x6CD5;&#x4E0E;&#x8FD9;&#x9053;&#x9898;&#x4E00;&#x6837;&#xFF0C;&#x4EE3;&#x7801;&#x4E5F;&#x8D34;&#x5230;&#x8FD9;&#x91CC;&#x5427;&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem67</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	string trianglefilename <span class="token operator">=</span> <span class="token string">&quot;p067_triangle.txt&quot;</span><span class="token punctuation">;</span>
	ifstream fin<span class="token punctuation">;</span>
	fin<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>trianglefilename<span class="token punctuation">,</span> ios<span class="token operator">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> lines<span class="token punctuation">;</span>
	string s<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>fin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		lines<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	fin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> trianglenum<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> numlines<span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> nums <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>lines<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&apos; &apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			stringstream ss<span class="token punctuation">;</span>
			ss <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> nn<span class="token punctuation">;</span>
			ss <span class="token operator">&gt;&gt;</span> nn<span class="token punctuation">;</span>
			numlines<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		trianglenum<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>numlines<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	cout <span class="token operator">&lt;&lt;</span> trianglenum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> trianglenum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> trianglenum<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">int</span> nn <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>trianglenum<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> trianglenum<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			trianglenum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> trianglenum<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> nn<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ans:&quot;</span> <span class="token operator">&lt;&lt;</span> trianglenum<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</pre><h2 class="mume-header" id="problem-19counting-sundayshttpsprojecteulernetproblem19"><a href="https://projecteuler.net/problem=19" target="_blank" rel="noopener">Problem 19:Counting Sundays</a></h2>

<p>&#x6570;</p>
<h2 class="mume-header" id="problem-20factorial-digit-sumhttpsprojecteulernetproblem20"><a href="https://projecteuler.net/problem=20" target="_blank" rel="noopener">Problem 20:Factorial digit sum</a></h2>

<p>&#x8BA1;&#x7B97;100&#x7684;&#x9636;&#x4E58;&#x7684;&#x6570;&#x5B57;&#x548C;&#x3002;&#x548C;&#x4E4B;&#x524D;&#x7684;&#x9898;&#x76EE;&#x4E00;&#x6837;&#xFF0C;&#x7528;&#x5927;&#x6574;&#x6570;&#x4E58;&#x6CD5;&#xFF0C;&#x89C1;&#x4E4B;&#x524D;&#x7684;&#x6587;&#x7AE0;&#x3002;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token keyword">void</span> <span class="token function">problem20</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	string out <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		stringstream ss<span class="token punctuation">;</span>
		ss <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
		out <span class="token operator">=</span> <span class="token function">BIGtimes</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span>ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">int</span> outnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> out<span class="token punctuation">)</span>
		outnum <span class="token operator">+=</span> i <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> outnum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre>
      </div>
      
      
    
    
    
    
    
    
    
    
  
    </body></html>]]></content>
      <tags>
        <tag>Project Euler</tag>
      </tags>
  </entry>
  <entry>
    <title>Stanford CS224n Lecture.1</title>
    <url>/2019/07/23/CS224N_Lec1/</url>
    <content><![CDATA[<h1 id="Lecture-1-Introduction-to-NLP-and-Deep-Learning"><a href="#Lecture-1-Introduction-to-NLP-and-Deep-Learning" class="headerlink" title="Lecture 1: Introduction to NLP and Deep Learning"></a>Lecture 1: Introduction to NLP and Deep Learning</h1><h2 id="What-is-Natural-Language-Processing"><a href="#What-is-Natural-Language-Processing" class="headerlink" title="What is Natural Language Processing"></a>What is Natural Language Processing</h2><h3 id="Intersecting-of"><a href="#Intersecting-of" class="headerlink" title="Intersecting of"></a>Intersecting of</h3><ul>
<li>computer science </li>
<li>artificial intelligence</li>
<li>linguistics<h3 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h3></li>
</ul>
<p>let computer process or “understand” NL to perform tasks</p>
<ul>
<li>Performing tasks</li>
<li>question answering</li>
</ul>
<p>Fully understanding and representing the meaning of language is a difficult goal.</p>
  <a id="more"></a>
<h3 id="NLP-Levels"><a href="#NLP-Levels" class="headerlink" title="NLP Levels"></a>NLP Levels</h3><p>speech     text</p>
<p>Phonetic/Phonological Analysis    OCR/Tokenization</p>
<p>Morphological analysis  (单词结构的形态分析)</p>
<p>Syntactic analysis (句法分析)</p>
<p>Semantic Interpertation (语义理解)</p>
<p>Discourse Processing (上下文，语篇处理)</p>
<h3 id="A-tiny-sample-of-NLP-Applications"><a href="#A-tiny-sample-of-NLP-Applications" class="headerlink" title="(A tiny sample of) NLP Applications"></a>(A tiny sample of) NLP Applications</h3><ul>
<li>Spell checking, keyword search, finding synonyms</li>
<li>Extracting information from websites</li>
<li>Classifying</li>
<li>Machine translation</li>
<li>Spoken dialog systems</li>
<li>Complex question answering</li>
</ul>
<h3 id="NLP-in-industry-…-is-taking-off"><a href="#NLP-in-industry-…-is-taking-off" class="headerlink" title="NLP in industry … is taking off"></a>NLP in industry … is taking off</h3><ul>
<li>Search (written and spoken)   like Spell Check</li>
<li>Online advertisement matching</li>
<li>Automated/assisted translation</li>
<li>Sentiment analysis for marketing of finance/trading</li>
<li>Speech recognition</li>
<li>Chatbots/Dialog agents</li>
</ul>
<h2 id="What’s-special-about-human-language"><a href="#What’s-special-about-human-language" class="headerlink" title="What’s special about human language"></a>What’s special about human language</h2><p>a system specifically constructed to convey the speaker/writer’s meaning</p>
<ul>
<li>deliberate communication</li>
<li>little kids can quickly learn</li>
</ul>
<p>and A human language is a discrete/symbolic/categorical signaling system:</p>
<ul>
<li>symbolic signaling system</li>
<li>with very minor exceptions for expressive signaling</li>
<li>symbols are not just an invention of logic/classical AI</li>
</ul>
<p>The categorical symbols of a language can be encoded as a signal for communication in several ways:</p>
<ul>
<li>Sound</li>
<li>Gesture</li>
<li>Images(writing)</li>
</ul>
<p>A human language is a <strong>symbolic/categorical signaling system</strong></p>
<p>a brain encoding appears to be a <strong>continuous pattern of activation</strong>, and the symbols are transmitted via <strong>continuous signals</strong> of sound/vision.</p>
<h2 id="What’s-Deep-Learning-DL"><a href="#What’s-Deep-Learning-DL" class="headerlink" title="What’s Deep Learning(DL)"></a>What’s Deep Learning(DL)</h2><p><strong>Deep learning</strong> is a subfield of <strong>machine learning</strong>.   blablablabla…</p>
<ul>
<li><strong>Representation Learning</strong> attempts to auto matically learn good features or representations.</li>
<li><strong>Deep Learning</strong> algorithms attempt to learn (multiple levels of) representation and an output</li>
<li>From “raw” inpus <strong>x</strong></li>
</ul>
<p>强调类似于“端到端”的模式</p>
<h3 id="On-the-history-of-and-term-“Deep-Learning”"><a href="#On-the-history-of-and-term-“Deep-Learning”" class="headerlink" title="On the history of and term “Deep Learning”"></a>On the history of and term “Deep Learning”</h3><p>focus on <strong>neural networks</strong> blabla…</p>
<h3 id="Reasons-for-Exploring-Deep-Learning"><a href="#Reasons-for-Exploring-Deep-Learning" class="headerlink" title="Reasons for Exploring Deep Learning"></a>Reasons for Exploring Deep Learning</h3><ul>
<li>Manually designed features are often over-specified, incomplete and take a long time to design and validate</li>
<li><strong>Lerned Features</strong> are easy to adapt, fast to learn.</li>
<li>Deep learning provides a very flexible, (almost?) universal, learnable framework for <strong>representing</strong> world, visual and linguistic information.</li>
<li>Deep Learning can learn <strong>unsupervised</strong> (from raw text) and <strong>supervised</strong> (with specific labels like positive/negative)</li>
</ul>
<p>good performing and CPU/GPUs quickly processing and more and more data.</p>
<h3 id="Deep-Learning-for-Speech"><a href="#Deep-Learning-for-Speech" class="headerlink" title="Deep Learning for Speech"></a>Deep Learning for Speech</h3><ul>
<li>starts with speech recognition</li>
<li>ImageNet vision compitation</li>
</ul>
<h2 id="Why-is-NLP-hard"><a href="#Why-is-NLP-hard" class="headerlink" title="Why is NLP hard"></a>Why is NLP hard</h2><ul>
<li>Complexity in representing, learning and using linguistic/situational/world/world/visual knowledge</li>
<li>Human languages are ambiguous (unlick programming and other formal languages)</li>
<li>Human language interpretation depends on real world, common sense, and contextual knowledge</li>
</ul>
<blockquote>
<p>We’re these unbelievably complicated beings drifting through a void, trying in vain to connect with one another by blindly flinging words out into the darknees. Every trace of phrasing, and spelling and tone and timing carries countless signals and contexts and subtexts and more. And every listener interprets these signals in their own way. Language isn’t a formal system of language, It’s glorious chaos. You can never know for sure what any words will mean to anyone. All you can do is try to get better at guessing how your words affect people. So, you have a chance of finding the ones that will make them feel something like you want them to feel. Everything else is pointless.</p>
</blockquote>
<h2 id="Deep-NLP-Deep-Learning-NLP"><a href="#Deep-NLP-Deep-Learning-NLP" class="headerlink" title="Deep NLP = Deep Learning + NLP"></a>Deep NLP = Deep Learning + NLP</h2><p>using representation learning and deep learning methods to solve NLP problems.</p>
<h2 id="Do-what"><a href="#Do-what" class="headerlink" title="Do what"></a>Do what</h2><ul>
<li>Word similarities</li>
<li>Representations of NLP Levels: Morphology</li>
<li>NLP Tools: Parsing for sentence structure</li>
<li>RepreSemantions of NLP Levels: Semantics</li>
<li>NLP Applications: Sentiment Analysis</li>
<li>Question Answering</li>
<li>Dialogue agents / Response Generation</li>
<li>Machine Translation</li>
<li>Neural Machine Translation</li>
</ul>
<h2 id="Conclusion-Representation-for-all-levels-Vectors"><a href="#Conclusion-Representation-for-all-levels-Vectors" class="headerlink" title="Conclusion:Representation for all levels? Vectors"></a>Conclusion:Representation for all levels? Vectors</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li>EE information theory</li>
<li>Chen Danqi</li>
</ul>
]]></content>
      <tags>
        <tag>Lessons</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Project Euler  题解：1~10</title>
    <url>/2019/06/12/ProjectEuler_Solution_1_10/</url>
    <content><![CDATA[<blockquote>
<p>Working is not boring, Earning money is boring.</p>
</blockquote>
<p>自己做的Project Euler的题解，不见得最优，也不见得优雅，但是答案是对的。基本上可以暴力求解的都是直接暴力求的。</p>
<h2 id="Problem-1-Multiples-of-3-and-5"><a href="#Problem-1-Multiples-of-3-and-5" class="headerlink" title="Problem 1:Multiples of 3 and 5"></a><a href="https://projecteuler.net/problem=1" target="_blank" rel="noopener">Problem 1:Multiples of 3 and 5</a></h2><p>暴力遍历，能整除3或者5的话累加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">problem1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">			num += i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <a id="more"></a>
<h2 id="Problem-2-Even-Fibonacci-numbers"><a href="#Problem-2-Even-Fibonacci-numbers" class="headerlink" title="Problem 2:Even Fibonacci numbers"></a><a href="https://projecteuler.net/problem=2" target="_blank" rel="noopener">Problem 2:Even Fibonacci numbers</a></h2><p>把4000000以下的 fib 数列都求出来，再遍历一般累加奇数。</p>
<p>这里其实 fib 数列的奇偶性是有规律的，按照 奇-奇-偶 的形式无限循环，所以也可以用数列的第几项是否能被3整除来判断。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">problem2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fib;</span><br><span class="line">	fib.push_back(<span class="number">1</span>);</span><br><span class="line">	fib.push_back(<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">while</span> (fib.back() &lt; (<span class="number">4000000</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		fib.push_back(fib.at(fib.<span class="built_in">size</span>() - <span class="number">1</span>) + fib.at(fib.<span class="built_in">size</span>() - <span class="number">2</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> f : fib)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (f &lt; <span class="number">4000000</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; f &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">if</span> (f % <span class="number">2</span> == <span class="number">0</span>) num += f;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Problem-3-Largest-prime-factor"><a href="#Problem-3-Largest-prime-factor" class="headerlink" title="Problem 3:Largest prime factor"></a><a href="https://projecteuler.net/problem=3" target="_blank" rel="noopener">Problem 3:Largest prime factor</a></h2><p>从小打到大找因数，当找到一个因数之后将原始数字除以这个因数，再继续判断。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">problem3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> &gt; nums;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> num = <span class="number">600851475143</span>;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> n = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span> (n &lt;= num)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (num % n == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			nums.push_back(n);</span><br><span class="line">			num = num / n;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			n++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> i : nums)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> nums.back();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Problem-4-Largest-palindrome-product"><a href="#Problem-4-Largest-palindrome-product" class="headerlink" title="Problem 4:Largest palindrome product"></a><a href="https://projecteuler.net/problem=4" target="_blank" rel="noopener">Problem 4:Largest palindrome product</a></h2><p>暴力遍历，判断是回文数后记录最大值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">problem4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">100</span>; m &lt;= <span class="number">999</span>; m++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">100</span>; n &lt;= <span class="number">999</span>; n++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">stringstream</span> ss;</span><br><span class="line">			<span class="keyword">int</span> nn = n * m;</span><br><span class="line">			ss &lt;&lt; nn;</span><br><span class="line">			<span class="built_in">string</span> aa = ss.str();</span><br><span class="line">			<span class="built_in">string</span> bb = aa;</span><br><span class="line">			reverse(bb.<span class="built_in">begin</span>(), bb.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//			cout &lt;&lt; aa &lt;&lt; "  " &lt;&lt; bb;</span></span><br><span class="line">			<span class="keyword">if</span> (aa.compare(bb) == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				num = MAX(num, n * m);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Problem-5-Smallest-multiple"><a href="#Problem-5-Smallest-multiple" class="headerlink" title="Problem 5:Smallest multiple"></a><a href="https://projecteuler.net/problem=5" target="_blank" rel="noopener">Problem 5:Smallest multiple</a></h2><p>这个没写程序，直接在计算器里乘了一下。。。</p>
<h2 id="Problem-6-Sum-square-difference"><a href="#Problem-6-Sum-square-difference" class="headerlink" title="Problem 6:Sum square difference"></a><a href="https://projecteuler.net/problem=6" target="_blank" rel="noopener">Problem 6:Sum square difference</a></h2><p>嗯，算数题，算就对了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">problem6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num1=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		num1 += i * i;</span><br><span class="line">		num2 += i;</span><br><span class="line">	&#125;</span><br><span class="line">	num2 = num2 * num2;</span><br><span class="line">	<span class="keyword">return</span> num2 - num1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Problem-7-10001st-prime"><a href="#Problem-7-10001st-prime" class="headerlink" title="Problem 7:10001st prime"></a><a href="https://projecteuler.net/problem=7" target="_blank" rel="noopener">Problem 7:10001st prime</a></h2><p>判断素数，前面有一篇文章有详细解释。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">problem7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; ; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt; i; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i % k == <span class="number">0</span>) &#123;</span><br><span class="line">				n++; <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>) &#123; prime.push_back(i); <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">		<span class="keyword">if</span> (prime.<span class="built_in">size</span>() == <span class="number">10001</span>) <span class="keyword">return</span> prime.back();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Problem-8-Largest-product-in-a-series"><a href="#Problem-8-Largest-product-in-a-series" class="headerlink" title="Problem 8:Largest product in a series"></a><a href="https://projecteuler.net/problem=8" target="_blank" rel="noopener">Problem 8:Largest product in a series</a></h2><p>暴力遍历</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">problem8</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> out = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">string</span> number = <span class="string">"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> i : number)</span><br><span class="line">	&#123;</span><br><span class="line">		numbers.push_back(i - <span class="number">48</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.<span class="built_in">size</span>() - <span class="number">13</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> num = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; i + <span class="number">13</span>; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			num = num * numbers.at(k);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt;<span class="string">"  "</span>&lt;&lt;out&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		out = MAX(out, num);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*for (int i = 0; i &lt; 13; i++)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		num = num * numbers.at(i);</span></span><br><span class="line"><span class="comment">		out = num;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	for (int i = 13; i &lt; numbers.size(); i++)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		num = num * numbers.at(i);</span></span><br><span class="line"><span class="comment">		num = num / numbers.at(i - 13);</span></span><br><span class="line"><span class="comment">		out = MAX(out, num);</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Problem-9-Special-Pythagorean-triplet"><a href="#Problem-9-Special-Pythagorean-triplet" class="headerlink" title="Problem 9:Special Pythagorean triplet"></a><a href="https://projecteuler.net/problem=9" target="_blank" rel="noopener">Problem 9:Special Pythagorean triplet</a></h2><p>暴力遍历</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">problem9</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (a = <span class="number">1</span>; a &lt; <span class="number">1000</span>; a++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (b = <span class="number">1</span>; b &lt; <span class="number">1000</span>; b++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> cc = a * a + b * b;</span><br><span class="line">			<span class="keyword">int</span> c = <span class="number">1000</span> - a - b;</span><br><span class="line">			<span class="keyword">if</span> (c * c == cc)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"a"</span> &lt;&lt; a &lt;&lt; <span class="string">"b"</span> &lt;&lt; b &lt;&lt; <span class="string">"c"</span> &lt;&lt; c &lt;&lt; <span class="string">"out:"</span>&lt;&lt;a*b*c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Problem-10-Summation-of-primes"><a href="#Problem-10-Summation-of-primes" class="headerlink" title="Problem 10:Summation of primes"></a><a href="https://projecteuler.net/problem=10" target="_blank" rel="noopener">Problem 10:Summation of primes</a></h2><p>同 Problem 7 看之前的文章。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">problem10</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i&lt;<span class="number">2000000</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> ss = <span class="built_in">sqrt</span>(i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; prime.<span class="built_in">size</span>(); k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i % prime.at(k) == <span class="number">0</span>) &#123;</span><br><span class="line">				n++; <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (prime.at(k) &gt; ss) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//for (int k = 2; k &lt; i; k++)</span></span><br><span class="line">		<span class="comment">//&#123;</span></span><br><span class="line">		<span class="comment">//	if (i % k == 0) &#123;</span></span><br><span class="line">		<span class="comment">//		n++; break;</span></span><br><span class="line">		<span class="comment">//	&#125;</span></span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>) &#123; prime.push_back(i); sum += i; <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Project Euler</tag>
      </tags>
  </entry>
  <entry>
    <title>大整数加法和大整数乘法</title>
    <url>/2019/06/11/BIG_add_BIG_times/</url>
    <content><![CDATA[<blockquote>
<p>有时候会在问自己，是不够爱，还是缺少爱的能力。</p>
</blockquote>
<p>做 Project Euler 的过程中很多大整数运算，所以先撸了一个大整数加法和大整数,使用string作为输入输出参数</p>
<p>大整数加法代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 大整数加法</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BIGadd</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">	<span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>)<span class="keyword">return</span> nums.at(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">string</span> out = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> maxdig = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> i : nums) maxdig = MAX(maxdig, i.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; ; k++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (nums.at(i).<span class="built_in">size</span>() &gt; k)</span><br><span class="line">				sum += nums.at(i).at(nums.at(i).<span class="built_in">size</span>() - k - <span class="number">1</span>) - <span class="number">48</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (sum == <span class="number">0</span> &amp;&amp; k&gt;=maxdig) <span class="keyword">return</span> out;</span><br><span class="line">		out = (<span class="keyword">char</span>)(sum % <span class="number">10</span> + <span class="number">48</span>) + out;</span><br><span class="line">		sum = sum / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <a id="more"></a>
<p>大整数乘法代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 大整数乘法 配套上面的使用</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BIGtimes</span><span class="params">(<span class="built_in">string</span> m, <span class="built_in">string</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; adds;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">string</span> <span class="built_in">line</span>=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">int</span>  sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = m.<span class="built_in">size</span>() - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += (n.at(i) - <span class="number">48</span>) * (m.at(k) - <span class="number">48</span>);</span><br><span class="line">			<span class="built_in">line</span> = (<span class="keyword">char</span>)(sum % <span class="number">10</span> + <span class="number">48</span>)+<span class="built_in">line</span>;</span><br><span class="line">			sum = sum / <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sum!=<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">line</span> = (<span class="keyword">char</span>)(sum % <span class="number">10</span> + <span class="number">48</span>)+<span class="built_in">line</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = n.<span class="built_in">size</span>()<span class="number">-1</span>; k &gt; i; k--)<span class="built_in">line</span> = <span class="built_in">line</span> + <span class="string">'0'</span>;</span><br><span class="line">		adds.push_back(<span class="built_in">line</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> BIGadd(adds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>验证质数</title>
    <url>/2019/06/05/fast_prime_number/</url>
    <content><![CDATA[

<!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">
      <title>fast_prime_number</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      
      <link rel="stylesheet" href="/js/src/katex/katex.min.css">
      
      
      
      
      
      
      
      
      

      <style> 
      /**
 * prism.js Github theme based on GitHub's theme.
 * @author Sam Clarke
 */
code[class*="language-"],
pre[class*="language-"] {
  color: #333;
  background: none;
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.4;

  -moz-tab-size: 8;
  -o-tab-size: 8;
  tab-size: 8;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
  padding: .8em;
  overflow: auto;
  /* border: 1px solid #ddd; */
  border-radius: 3px;
  /* background: #fff; */
  background: #f5f5f5;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
  white-space: normal;
  background: #f5f5f5;
}

.token.comment,
.token.blockquote {
  color: #969896;
}

.token.cdata {
  color: #183691;
}

.token.doctype,
.token.punctuation,
.token.variable,
.token.macro.property {
  color: #333;
}

.token.operator,
.token.important,
.token.keyword,
.token.rule,
.token.builtin {
  color: #a71d5d;
}

.token.string,
.token.url,
.token.regex,
.token.attr-value {
  color: #183691;
}

.token.property,
.token.number,
.token.boolean,
.token.entity,
.token.atrule,
.token.constant,
.token.symbol,
.token.command,
.token.code {
  color: #0086b3;
}

.token.tag,
.token.selector,
.token.prolog {
  color: #63a35c;
}

.token.function,
.token.namespace,
.token.pseudo-element,
.token.class,
.token.class-name,
.token.pseudo-class,
.token.id,
.token.url-reference .token.variable,
.token.attr-name {
  color: #795da3;
}

.token.entity {
  cursor: help;
}

.token.title,
.token.title .token.punctuation {
  font-weight: bold;
  color: #1d3e81;
}

.token.list {
  color: #ed6a43;
}

.token.inserted {
  background-color: #eaffea;
  color: #55a532;
}

.token.deleted {
  background-color: #ffecec;
  color: #bd2c00;
}

.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}


/* JSON */
.language-json .token.property {
  color: #183691;
}

.language-markup .token.tag .token.punctuation {
  color: #333;
}

/* CSS */
code.language-css,
.language-css .token.function {
  color: #0086b3;
}

/* YAML */
.language-yaml .token.atrule {
  color: #63a35c;
}

code.language-yaml {
  color: #183691;
}

/* Ruby */
.language-ruby .token.function {
  color: #333;
}

/* Markdown */
.language-markdown .token.url {
  color: #795da3;
}

/* Makefile */
.language-makefile .token.symbol {
  color: #795da3;
}

.language-makefile .token.variable {
  color: #183691;
}

.language-makefile .token.builtin {
  color: #0086b3;
}

/* Bash */
.language-bash .token.keyword {
  color: #0086b3;
}

/* highlight */
pre[data-line] {
  position: relative;
  padding: 1em 0 1em 3em;
}
pre[data-line] .line-highlight-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  background-color: transparent;
  display: block;
  width: 100%;
}

pre[data-line] .line-highlight {
  position: absolute;
  left: 0;
  right: 0;
  padding: inherit 0;
  margin-top: 1em;
  background: hsla(24, 20%, 50%,.08);
  background: linear-gradient(to right, hsla(24, 20%, 50%,.1) 70%, hsla(24, 20%, 50%,0));
  pointer-events: none;
  line-height: inherit;
  white-space: pre;
}

pre[data-line] .line-highlight:before, 
pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-start);
  position: absolute;
  top: .4em;
  left: .6em;
  min-width: 1em;
  padding: 0 .5em;
  background-color: hsla(24, 20%, 50%,.4);
  color: hsl(24, 20%, 95%);
  font: bold 65%/1.5 sans-serif;
  text-align: center;
  vertical-align: .3em;
  border-radius: 999px;
  text-shadow: none;
  box-shadow: 0 1px white;
}

pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-end);
  top: auto;
  bottom: .4em;
}html body{font-family:"Helvetica Neue",Helvetica,"Segoe UI",Arial,freesans,sans-serif;font-size:16px;line-height:1.6;color:#333;background-color:#fff;overflow:initial;box-sizing:border-box;word-wrap:break-word}html body>:first-child{margin-top:0}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{line-height:1.2;margin-top:1em;margin-bottom:16px;color:#000}html body h1{font-size:2.25em;font-weight:300;padding-bottom:.3em}html body h2{font-size:1.75em;font-weight:400;padding-bottom:.3em}html body h3{font-size:1.5em;font-weight:500}html body h4{font-size:1.25em;font-weight:600}html body h5{font-size:1.1em;font-weight:600}html body h6{font-size:1em;font-weight:600}html body h1,html body h2,html body h3,html body h4,html body h5{font-weight:600}html body h5{font-size:1em}html body h6{color:#5c5c5c}html body strong{color:#000}html body del{color:#5c5c5c}html body a:not([href]){color:inherit;text-decoration:none}html body a{color:#08c;text-decoration:none}html body a:hover{color:#00a3f5;text-decoration:none}html body img{max-width:100%}html body>p{margin-top:0;margin-bottom:16px;word-wrap:break-word}html body>ul,html body>ol{margin-bottom:16px}html body ul,html body ol{padding-left:2em}html body ul.no-list,html body ol.no-list{padding:0;list-style-type:none}html body ul ul,html body ul ol,html body ol ol,html body ol ul{margin-top:0;margin-bottom:0}html body li{margin-bottom:0}html body li.task-list-item{list-style:none}html body li>p{margin-top:0;margin-bottom:0}html body .task-list-item-checkbox{margin:0 .2em .25em -1.8em;vertical-align:middle}html body .task-list-item-checkbox:hover{cursor:pointer}html body blockquote{margin:16px 0;font-size:inherit;padding:0 15px;color:#5c5c5c;border-left:4px solid #d6d6d6}html body blockquote>:first-child{margin-top:0}html body blockquote>:last-child{margin-bottom:0}html body hr{height:4px;margin:32px 0;background-color:#d6d6d6;border:0 none}html body table{margin:10px 0 15px 0;border-collapse:collapse;border-spacing:0;display:block;width:100%;overflow:auto;word-break:normal;word-break:keep-all}html body table th{font-weight:bold;color:#000}html body table td,html body table th{border:1px solid #d6d6d6;padding:6px 13px}html body dl{padding:0}html body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:bold}html body dl dd{padding:0 16px;margin-bottom:16px}html body code{font-family:Menlo,Monaco,Consolas,'Courier New',monospace;font-size:.85em !important;color:#000;background-color:#f0f0f0;border-radius:3px;padding:.2em 0}html body code::before,html body code::after{letter-spacing:-0.2em;content:"\00a0"}html body pre>code{padding:0;margin:0;font-size:.85em !important;word-break:normal;white-space:pre;background:transparent;border:0}html body .highlight{margin-bottom:16px}html body .highlight pre,html body pre{padding:1em;overflow:auto;font-size:.85em !important;line-height:1.45;border:#d6d6d6;border-radius:3px}html body .highlight pre{margin-bottom:0;word-break:normal}html body pre code,html body pre tt{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}html body pre code:before,html body pre tt:before,html body pre code:after,html body pre tt:after{content:normal}html body p,html body blockquote,html body ul,html body ol,html body dl,html body pre{margin-top:0;margin-bottom:16px}html body kbd{color:#000;border:1px solid #d6d6d6;border-bottom:2px solid #c7c7c7;padding:2px 4px;background-color:#f0f0f0;border-radius:3px}@media print{html body{background-color:#fff}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{color:#000;page-break-after:avoid}html body blockquote{color:#5c5c5c}html body pre{page-break-inside:avoid}html body table{display:table}html body img{display:block;max-width:100%;max-height:100%}html body pre,html body code{word-wrap:break-word;white-space:pre}}.markdown-preview{width:100%;height:100%;box-sizing:border-box}.markdown-preview .pagebreak,.markdown-preview .newpage{page-break-before:always}.markdown-preview pre.line-numbers{position:relative;padding-left:3.8em;counter-reset:linenumber}.markdown-preview pre.line-numbers>code{position:relative}.markdown-preview pre.line-numbers .line-numbers-rows{position:absolute;pointer-events:none;top:1em;font-size:100%;left:0;width:3em;letter-spacing:-1px;border-right:1px solid #999;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.markdown-preview pre.line-numbers .line-numbers-rows>span{pointer-events:none;display:block;counter-increment:linenumber}.markdown-preview pre.line-numbers .line-numbers-rows>span:before{content:counter(linenumber);color:#999;display:block;padding-right:.8em;text-align:right}.markdown-preview .mathjax-exps .MathJax_Display{text-align:center !important}.markdown-preview:not([for="preview"]) .code-chunk .btn-group{display:none}.markdown-preview:not([for="preview"]) .code-chunk .status{display:none}.markdown-preview:not([for="preview"]) .code-chunk .output-div{margin-bottom:16px}.scrollbar-style::-webkit-scrollbar{width:8px}.scrollbar-style::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}.scrollbar-style::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode]){position:relative;width:100%;height:100%;top:0;left:0;margin:0;padding:0;overflow:auto}html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{position:relative;top:0}@media screen and (min-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em calc(50% - 457px + 2em)}}@media screen and (max-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{font-size:14px !important;padding:1em}}@media print{html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{display:none}}html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{position:fixed;bottom:8px;left:8px;font-size:28px;cursor:pointer;color:inherit;z-index:99;width:32px;text-align:center;opacity:.4}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] #sidebar-toc-btn{opacity:1}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc{position:fixed;top:0;left:0;width:300px;height:100%;padding:32px 0 48px 0;font-size:14px;box-shadow:0 0 4px rgba(150,150,150,0.33);box-sizing:border-box;overflow:auto;background-color:inherit}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar{width:8px}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc a{text-decoration:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{padding:0 1.6em;margin-top:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc li{margin-bottom:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{list-style-type:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{left:300px;width:calc(100% -  300px);padding:2em calc(50% - 457px -  150px);margin:0;box-sizing:border-box}@media screen and (max-width:1274px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{width:100%}}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .markdown-preview{left:50%;transform:translateX(-50%)}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .md-sidebar-toc{display:none}
/* Please visit the URL below for more information: */
/*   https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css */
 
      </style>
    </head>
    <body for="html-export">
      <div class="mume markdown-preview  ">
      <ul>
<li><a href="#%E9%97%AE%E9%A2%98">&#x95EE;&#x9898;</a></li>
<li><a href="#%E6%9A%B4%E5%8A%9B%E6%B1%82%E8%A7%A3">&#x66B4;&#x529B;&#x6C42;&#x89E3;</a></li>
<li><a href="#%E8%A7%A3%E7%AD%94%E5%88%86%E6%9E%90">&#x89E3;&#x7B54;&#x5206;&#x6790;</a></li>
<li><a href="#%E5%AF%B9%E4%BA%8E%E5%BE%AA%E7%8E%AF%E6%AC%A1%E6%95%B0">&#x5BF9;&#x4E8E;&#x5FAA;&#x73AF;&#x6B21;&#x6570;</a></li>
<li><a href="#%E5%AF%B9%E4%BA%8E%E5%88%A4%E6%96%AD%E8%8C%83%E5%9B%B4">&#x5BF9;&#x4E8E;&#x5224;&#x65AD;&#x8303;&#x56F4;</a></li>
</ul>
<blockquote>
<p>&#x82E5;&#x4E0D;&#x662F;&#x56E0;&#x4E3A;&#x7231;&#x7740;&#x4F60;&#xFF0C;&#x600E;&#x4E48;&#x4F1A;&#x591C;&#x6DF1;&#x8FD8;&#x6CA1;&#x7761;&#x610F;&#x3002;&#x6BCF;&#x4E2A;&#x5FF5;&#x5934;&#x90FD;&#x5173;&#x4E8E;&#x4F60;&#xFF0C;&#x6211;&#x60F3;&#x4F60; &#x60F3;&#x4F60; &#x597D;&#x60F3;&#x4F60;&#x3002;<br>
&#x82E5;&#x4E0D;&#x662F;&#x56E0;&#x4E3A;&#x7231;&#x7740;&#x4F60;&#xFF0C;&#x600E;&#x4F1A;&#x4E0D;&#x7ECF;&#x610F;&#x5C31;&#x53F9;&#x606F;&#x3002;&#x6709;&#x79CD;&#x4E0D;&#x5B8C;&#x6574;&#x7684;&#x5FC3;&#x60C5;&#xFF0C;&#x7231;&#x4F60; &#x7231;&#x4F60; &#x7231;&#x7740;&#x4F60;&#x3002;</p>
</blockquote>
<h2 class="mume-header" id="%E9%97%AE%E9%A2%98">&#x95EE;&#x9898;</h2>

<p>&#x6700;&#x8FD1;&#x505A;&#x4E86;&#x4E00;&#x4E9B; Project Euler &#x7684;&#x9898;&#x76EE;&#x3002;&#x76EE;&#x524D;&#x53EA;&#x505A;&#x4E86;&#x524D;&#x5341;&#x9898;&#xFF0C;&#x611F;&#x89C9;&#x548C;&#x4E00;&#x822C;&#x7684;&#x7F16;&#x7A0B;&#x9898;&#x76EE;&#x6BD4;&#x8FD8;&#x662F;&#x633A;&#x6709;&#x610F;&#x601D;&#x7684;&#xFF0C;&#x5355;&#x4E00;&#x6848;&#x4F8B;&#xFF0C;&#x4E0D;&#x9650;&#x65F6;&#x95F4;&#xFF0C;&#x4E0D;&#x9650;&#x505A;&#x6CD5;&#xFF0C;&#x53EA;&#x8981;&#x505A;&#x51FA;&#x6765;&#x7684;&#x5C31;&#x53EF;&#x4EE5;&#xFF0C;&#x4F60;&#x613F;&#x610F;&#x7684;&#x8BDD;&#x66B4;&#x529B;&#x6C42;&#x89E3;&#xFF0C;&#x624B;&#x52A8;&#x53BB;&#x7B97;&#x90FD;&#x53EF;&#x4EE5;&#xFF0C;&#x8FD8;&#x662F;&#x633A;&#x6709;&#x610F;&#x601D;&#x7684;&#x3002;</p>
<p>&#x524D;&#x9762;&#x6709;&#x51E0;&#x9053;&#x5173;&#x4E8E;&#x8D28;&#x6570; (Prime Number) &#x7684;&#x9898;&#x76EE;&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x6570;&#x662F;&#x5426;&#x662F;&#x8D28;&#x6570;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8FD9;&#x6B21;&#x7684;&#x95EE;&#x9898;&#x4E86;&#x3002;</p>

<p><a href="https://projecteuler.net/problem=7" target="_blank" rel="noopener"><strong>Problem 7.</strong> 10001st prime</a></p>

<blockquote>
<p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.<br>
What is the 10 001st prime number?</p>
</blockquote>
<p><a href="https://projecteuler.net/problem=10" target="_blank" rel="noopener"><strong>Problem 10.</strong> Summation of primes</a></p>
<blockquote>
<p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.<br>
Find the sum of all the primes below two million.</p>
</blockquote>
  <a id="more"></a>
<h2 class="mume-header" id="%E6%9A%B4%E5%8A%9B%E6%B1%82%E8%A7%A3">&#x66B4;&#x529B;&#x6C42;&#x89E3;</h2>

<p>&#x6211;&#x5728;&#x505A;&#x9898;&#x76EE;&#x7684;&#x65F6;&#x5019;&#x662F;&#x5C06;&#x6240;&#x6709;&#x8D28;&#x6570;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x4F9D;&#x6B21;&#x5217;&#x51FA;&#x6765;&#xFF0C;&#x8FD9;&#x91CC;&#x6682;&#x4E14;&#x4E0D;&#x533A;&#x5206;&#x5217;&#x51FA;&#x5168;&#x90E8;&#x6307;&#x6570;&#x548C;&#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x6570;&#x662F;&#x5426;&#x662F;&#x8D28;&#x6570;&#xFF0C;&#x540E;&#x9762;&#x4F1A;&#x63D0;&#x5230;&#x533A;&#x522B;&#x3002;</p>
<p>&#x76F4;&#x63A5;&#x4EE3;&#x7801;&#xFF0C;&#x5BF9;&#x5E94;&#x9898;&#x76EE;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token comment">//&#x6C42;&#x7B2C;10001&#x4E2A;&#x8D28;&#x6570;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> prime<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> prime<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>prime<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10001</span><span class="token punctuation">)</span> <span class="token keyword">return</span> prime<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><p>&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x5224;&#x65AD;&#x6BCF;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x6570;&#x5B57; i &#x5224;&#x65AD; 2 &#x5230; i &#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x88AB; i &#x6574;&#x9664;&#xFF0C;&#x53EF;&#x4EE5;&#x6574;&#x9664;&#x7684;&#x8BDD;&#x8BA1;&#x6570; +1&#xFF0C;&#x8BF4;&#x660E;&#x8BE5;&#x6570;&#x662F;&#x5408;&#x6570;&#xFF0C;&#x5168;&#x90E8;&#x6570;&#x5B57;&#x5224;&#x65AD;&#x5B8C; n=0 &#x7684;&#x8BDD;&#x662F;&#x8D28;&#x6570;&#x3002;</p>
<p>&#x7B80;&#x5355;&#x5427;&#xFF0C;&#x66B4;&#x529B;&#x5427;&#xFF0C;&#x8822;&#x5427;&#x3002;</p>
<h2 class="mume-header" id="%E8%A7%A3%E7%AD%94%E5%88%86%E6%9E%90">&#x89E3;&#x7B54;&#x5206;&#x6790;</h2>

<p>Project Euler &#x4E0A;&#x63D0;&#x4F9B;&#x7684;&#x4E00;&#x4EFD;&#x5224;&#x65AD;&#x8D28;&#x6570;&#x7684;&#x7A0B;&#x5E8F;&#x5982;&#x4E0B;</p>
<pre data-role="codeBlock" data-info="c" class="language-c">Function <span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token keyword">if</span> n<span class="token operator">=</span><span class="token number">1</span> then <span class="token keyword">return</span> false
<span class="token keyword">else</span>
<span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">4</span> then <span class="token keyword">return</span> true <span class="token comment">//2 and 3 are prime</span>
<span class="token keyword">else</span>
<span class="token keyword">if</span> n mod <span class="token number">2</span><span class="token operator">=</span><span class="token number">0</span> then <span class="token keyword">return</span> false
<span class="token keyword">else</span>
<span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">9</span> then <span class="token keyword">return</span> true <span class="token comment">//we have already excluded 4,6 and 8.</span>
<span class="token keyword">else</span>
<span class="token keyword">if</span> n mod <span class="token number">3</span><span class="token operator">=</span><span class="token number">0</span> then <span class="token keyword">return</span> false
<span class="token keyword">else</span>
r<span class="token operator">=</span><span class="token function">floor</span><span class="token punctuation">(</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">// sqrt(n) rounded to the greatest integer r so that r*r&lt;=n</span>
f<span class="token operator">=</span><span class="token number">5</span>
 <span class="token keyword">while</span> f<span class="token operator">&lt;=</span>r
<span class="token keyword">if</span> n mod f<span class="token operator">=</span><span class="token number">0</span> then <span class="token keyword">return</span> <span class="token function">false</span> <span class="token punctuation">(</span>and step out of the function<span class="token punctuation">)</span>
<span class="token keyword">if</span> n <span class="token function">mod</span><span class="token punctuation">(</span>f<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span> then <span class="token keyword">return</span> <span class="token function">false</span> <span class="token punctuation">(</span>and step out of the function<span class="token punctuation">)</span>
f<span class="token operator">=</span>f<span class="token operator">+</span><span class="token number">6</span>
endwhile
<span class="token keyword">return</span> <span class="token function">true</span> <span class="token punctuation">(</span>in all other cases<span class="token punctuation">)</span>
End Function
</pre><p>&#x524D;&#x9762;&#x4E00;&#x4E9B;&#x90FD;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x6574;&#x4E2A;&#x7A0B;&#x5E8F;&#x57FA;&#x4E8E;&#x4EE5;&#x4E0B;&#x5047;&#x8BBE;&#xFF1A;</p>
<ul>
<li>1 is not a prime.</li>
<li>All primes except 2 are odd.</li>
<li>All primes greater than 3 can be written in the form 6k+/-1.</li>
<li>Any number n can have only one primefactor greater than sqrt(n) .</li>
<li>The consequence for primality testing of a number n is: if we cannot find a number f less than or equal sqrt(n) that divides n then n is prime: the only primefactor of n is n itself</li>
</ul>
<p>&#x5176;&#x4E2D;&#x6700;&#x91CD;&#x8981;&#x7684;&#x662F;&#x7B2C;&#x4E09;&#x6761;&#xFF0C;<strong>&#x6240;&#x6709;&#x5927;&#x4E8E;3&#x7684;&#x8D28;&#x6570;&#x90FD;&#x53EF;&#x4EE5;&#x5199;&#x6210; <code>6k+/-1</code> &#x7684;&#x5F62;&#x5F0F;</strong>&#x3002;</p>
<p>&#x8BC1;&#x660E;&#x5982;&#x4E0B;&#xFF1A;</p>
<p>&#x5927;&#x4E8E;6&#x7684;&#x81EA;&#x7136;&#x6570;&#x90FD;&#x53EF;&#x4EE5;&#x5199;&#x6210; <code>6k</code> <code>6k+1</code> <code>6k+2</code> <code>6k+3</code> <code>6k+4</code> <code>6k+5</code> &#x516D;&#x79CD;&#x5F62;&#x5F0F;&#xFF08;&#x5176;&#x4E2D;k&gt;=1&#xFF09;&#x3002;&#x4F9D;&#x6B21;&#x5224;&#x65AD;&#x53EF;&#x4EE5;&#x77E5;&#x9053;</p>
<ul>
<li><code>6k</code> &#x53EF;&#x88AB;6&#x6574;&#x9664;</li>
<li><code>6k+2=2(3k+1)</code> &#x53EF;&#x88AB;2&#x6574;&#x9664;</li>
<li><code>6k+3=3(2k+1)</code> &#x53EF;&#x88AB;3&#x6574;&#x9664;</li>
<li><code>6k+4=2(3k+2)</code> &#x53EF;&#x88AB;2&#x6574;&#x9664;</li>
</ul>
<p>&#x56E0;&#x6B64;&#x4E0A;&#x9762;&#x56DB;&#x9879;&#x5747;&#x4E3A;&#x5408;&#x6570;&#xFF0C;&#x8D28;&#x6570;&#x5FC5;&#x5B9A;&#x5B58;&#x5728;&#x4E8E; <code>6k+1</code> &#x548C; <code>6k+5</code> &#x4E24;&#x9879;&#x4E2D;&#xFF0C;&#x5176;&#x4E2D; <code>6k+5</code> &#x53C8;&#x53EF;&#x4EE5;&#x6539;&#x5199;&#x4E3A; <code>6k-1</code> &#xFF0C;&#x56E0;&#x6B64;&#x5F97;&#x8BC1;&#x3002;</p>
<p>&#x7136;&#x540E;&#x8FD8;&#x6709;&#x7B2C;&#x56DB;&#x6761;&#xFF0C;&#x5BF9;&#x4E8E;n&#x7684;&#x56E0;&#x6570;&#x6765;&#x8BB2;&#xFF0C;&#x5176;&#x56E0;&#x6570;&#x5FC5;&#x5B9A;&#x5C0F;&#x4E8E;sqrt(n)&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x9700;&#x8981;&#x5728;&#x5927;&#x4E8E;sqrt(n)&#x7684;&#x8303;&#x56F4;&#x5185;&#x5BFB;&#x627E;n&#x7684;&#x56E0;&#x6570;&#x3002;</p>
<h2 class="mume-header" id="%E5%AF%B9%E4%BA%8E%E5%BE%AA%E7%8E%AF%E6%AC%A1%E6%95%B0">&#x5BF9;&#x4E8E;&#x5FAA;&#x73AF;&#x6B21;&#x6570;</h2>

<p>&#x56E0;&#x6B64;&#x5BF9;&#x5224;&#x65AD;&#x8D28;&#x6570;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6539;&#x8FDB;&#x662F;&#x4FEE;&#x6539;&#x5FAA;&#x73AF;&#x6B21;&#x6570;&#x5C0F;&#x4E8E;sqrt(n)&#xFF0C;&#x770B;&#x4EE3;&#x7801;&#xFF1A;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token comment">//&#x6C42;&#x7B2C;10001&#x4E2A;&#x8D28;&#x6570;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> prime<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ss <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> ss<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> prime<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>prime<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10001</span><span class="token punctuation">)</span> <span class="token keyword">return</span> prime<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><p>&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x6570;i&#xFF0C;&#x53EA;&#x5224;&#x65AD;&#x5230;sqrt(i)&#xFF0C;&#x5982;&#x679C;&#x9664;&#x4EE5;2&#x5230;sqrt(i)&#x4F59;&#x6570;&#x5747;&#x4E0D;&#x4E3A;0&#xFF0C;&#x5219;i&#x4E3A;&#x8D28;&#x6570;&#x3002;</p>
<h2 class="mume-header" id="%E5%AF%B9%E4%BA%8E%E5%88%A4%E6%96%AD%E8%8C%83%E5%9B%B4">&#x5BF9;&#x4E8E;&#x5224;&#x65AD;&#x8303;&#x56F4;</h2>

<p>&#x53E6;&#x4E00;&#x4E2A;&#x601D;&#x8003;&#x662F;&#x5173;&#x4E8E; <code>6k+/-1</code> &#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x611F;&#x89C9;&#x5E76;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x6309;&#x7167; <code>6k+/-1</code> &#x7684;&#x89C4;&#x5219;&#x53BB;&#x5199;&#x5224;&#x65AD;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x56E0;&#x4E3A;&#x5F88;&#x660E;&#x663E;&#x8FD9;&#x4E2A;&#x7ED3;&#x8BBA;&#x7684;&#x5F97;&#x6765;&#x662F;&#x901A;&#x8FC7;&#x5BF9;6&#x4EE5;&#x4E0B;&#x7684;&#x8D28;&#x6570;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#x5F97;&#x5230;&#x7684;&#xFF0C;&#x7C7B;&#x4F3C;&#x7684;&#x89C4;&#x5F8B;&#x5982;&#x679C;&#x6211;&#x5BF9;30&#x3001;&#x751A;&#x81F3;210&#x53BB;&#x5224;&#x65AD;&#x7684;&#x8BDD;&#x90FD;&#x80FD;&#x591F;&#x5F97;&#x5230;&#x8BA1;&#x7B97;&#x91CF;&#x66F4;&#x5C11;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x6240;&#x4EE5;&#x7A0D;&#x52A0;&#x601D;&#x8003;&#x5176;&#x5B9E;&#x53EF;&#x4EE5;&#x60F3;&#x5230;&#x6211;&#x4EEC;&#x5BF9;&#x524D;&#x9762;&#x7684;&#x5F88;&#x591A;&#x5224;&#x65AD;&#x662F;&#x91CD;&#x590D;&#x7684;&#xFF0C;&#x4F8B;&#x5982;&#x5982;&#x679C;&#x5224;&#x65AD;&#x4E86;2&#x4E0D;&#x662F;i&#x7684;&#x56E0;&#x6570;&#x7684;&#x8BDD;&#xFF0C;4&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#x4E86;&#xFF0C;2&#x7684;&#x6240;&#x6709;&#x500D;&#x6570;&#x90FD;&#x4E0D;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#x4E86;&#xFF0C;&#x8FD9;&#x4E9B;&#x5224;&#x65AD;&#x90FD;&#x662F;&#x65E0;&#x7528;&#x7684;&#x3002;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#x7684;&#x8BDD;&#x662F;3&#xFF0C;5&#x3002;&#x5947;&#x5999;&#x7684;&#x662F;&#x8FD9;&#x4E2A;&#x9700;&#x8981;&#x5224;&#x65AD;&#x7684;&#x6570;&#x5217;&#x5F88;&#x660E;&#x663E;&#x5C31;&#x662F;&#x8D28;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x5728;&#x5224;&#x65AD;&#x662F;&#x5426;&#x80FD;&#x591F;&#x6574;&#x9664;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EA;&#x5224;&#x65AD;&#x5C0F;&#x4E8E;sqrt(i)&#x7684;&#x8D28;&#x6570;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;</p>
<pre data-role="codeBlock" data-info="c++" class="language-cpp"><span class="token comment">//&#x6C42;&#x7B2C;10001&#x4E2A;&#x8D28;&#x6570;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> prime<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ss <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> prime<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> prime<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>prime<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&gt;</span> ss<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> prime<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>prime<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10001</span><span class="token punctuation">)</span> <span class="token keyword">return</span> prime<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</pre><p>DONE! &#x5728;&#x76EE;&#x524D;&#x7684;&#x610F;&#x4E49;&#x4E0A;&#x8FD9;&#x4E2A;&#x5224;&#x65AD;&#x8D28;&#x6570;&#x7684;&#x7A0B;&#x5E8F;&#x5DF2;&#x7ECF;&#x6BD4;&#x8F83;&#x4F18;&#x96C5;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x4E0D;&#x7981;&#x8BA9;&#x4EBA;&#x6709;&#x65B0;&#x7684;&#x601D;&#x8003;&#x3002;&#x76EE;&#x524D;&#x8FD9;&#x4E2A;&#x7A0B;&#x5E8F;&#x5224;&#x65AD;&#x67D0;&#x4E2A;&#x6570;&#x9700;&#x8981;&#x628A;&#x6BD4;&#x8FD9;&#x4E2A;&#x6570;&#x5C0F;&#x7684;&#x8D28;&#x6570;&#x5168;&#x90E8;&#x6C42;&#x51FA;&#x6765;&#xFF0C;&#x662F;&#x5426;&#x6709;&#x66F4;&#x5FEB;&#x6377;&#x7684;&#x529E;&#x6CD5;&#x3002;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x63D0;&#x524D;&#x8BA1;&#x7B97;&#x4E00;&#x4E2A;&#x8D28;&#x6570;&#x8868;&#x53BB;&#x52A0;&#x901F;&#x7A0B;&#x5E8F;&#x7684;&#x8BA1;&#x7B97;&#xFF1F;&#x6211;&#x76EE;&#x524D;&#x4E5F;&#x5BF9;&#x66F4;&#x597D;&#x7684;&#x529E;&#x6CD5;&#x4E00;&#x65E0;&#x6240;&#x77E5;&#xFF0C;&#x671F;&#x5F85;&#x540E;&#x9762;&#x8FDB;&#x884C;&#x8FDB;&#x4E00;&#x6B65;&#x7684;&#x7814;&#x7A76;&#x5B66;&#x4E60;&#x518D;&#x56DE;&#x6765;&#x66F4;&#x65B0;&#x3002;</p>

      </div>
      
      
    
    
    
    
    
    
    
    
  
    </body></html>]]></content>
      <tags>
        <tag>Project Euler</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>在Jetson TX1上安装Caffe--安装与问题排除</title>
    <url>/2017/03/11/JetsonTX1_caffe_problem/</url>
    <content><![CDATA[<!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">
      <title>&#x5728;Jetson TX1&#x4E0A;&#x5B89;&#x88C5;Caffe--&#x5B89;&#x88C5;&#x4E0E;&#x95EE;&#x9898;&#x6392;&#x9664;</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      
      <link rel="stylesheet" href="/js/src/katex/katex.min.css">
      
      


      
      
      
      
      
      

      <style>
      /**
 * prism.js Github theme based on GitHub's theme.
 * @author Sam Clarke
 */
code[class*="language-"],
pre[class*="language-"] {
  color: #333;
  background: none;
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.4;

  -moz-tab-size: 8;
  -o-tab-size: 8;
  tab-size: 8;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
  padding: .8em;
  overflow: auto;
  /* border: 1px solid #ddd; */
  border-radius: 3px;
  /* background: #fff; */
  background: #f5f5f5;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
  white-space: normal;
  background: #f5f5f5;
}

.token.comment,
.token.blockquote {
  color: #969896;
}

.token.cdata {
  color: #183691;
}

.token.doctype,
.token.punctuation,
.token.variable,
.token.macro.property {
  color: #333;
}

.token.operator,
.token.important,
.token.keyword,
.token.rule,
.token.builtin {
  color: #a71d5d;
}

.token.string,
.token.url,
.token.regex,
.token.attr-value {
  color: #183691;
}

.token.property,
.token.number,
.token.boolean,
.token.entity,
.token.atrule,
.token.constant,
.token.symbol,
.token.command,
.token.code {
  color: #0086b3;
}

.token.tag,
.token.selector,
.token.prolog {
  color: #63a35c;
}

.token.function,
.token.namespace,
.token.pseudo-element,
.token.class,
.token.class-name,
.token.pseudo-class,
.token.id,
.token.url-reference .token.variable,
.token.attr-name {
  color: #795da3;
}

.token.entity {
  cursor: help;
}

.token.title,
.token.title .token.punctuation {
  font-weight: bold;
  color: #1d3e81;
}

.token.list {
  color: #ed6a43;
}

.token.inserted {
  background-color: #eaffea;
  color: #55a532;
}

.token.deleted {
  background-color: #ffecec;
  color: #bd2c00;
}

.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}


/* JSON */
.language-json .token.property {
  color: #183691;
}

.language-markup .token.tag .token.punctuation {
  color: #333;
}

/* CSS */
code.language-css,
.language-css .token.function {
  color: #0086b3;
}

/* YAML */
.language-yaml .token.atrule {
  color: #63a35c;
}

code.language-yaml {
  color: #183691;
}

/* Ruby */
.language-ruby .token.function {
  color: #333;
}

/* Markdown */
.language-markdown .token.url {
  color: #795da3;
}

/* Makefile */
.language-makefile .token.symbol {
  color: #795da3;
}

.language-makefile .token.variable {
  color: #183691;
}

.language-makefile .token.builtin {
  color: #0086b3;
}

/* Bash */
.language-bash .token.keyword {
  color: #0086b3;
}

/* highlight */
pre[data-line] {
  position: relative;
  padding: 1em 0 1em 3em;
}
pre[data-line] .line-highlight-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  background-color: transparent;
  display: block;
  width: 100%;
}

pre[data-line] .line-highlight {
  position: absolute;
  left: 0;
  right: 0;
  padding: inherit 0;
  margin-top: 1em;
  background: hsla(24, 20%, 50%,.08);
  background: linear-gradient(to right, hsla(24, 20%, 50%,.1) 70%, hsla(24, 20%, 50%,0));
  pointer-events: none;
  line-height: inherit;
  white-space: pre;
}

pre[data-line] .line-highlight:before, 
pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-start);
  position: absolute;
  top: .4em;
  left: .6em;
  min-width: 1em;
  padding: 0 .5em;
  background-color: hsla(24, 20%, 50%,.4);
  color: hsl(24, 20%, 95%);
  font: bold 65%/1.5 sans-serif;
  text-align: center;
  vertical-align: .3em;
  border-radius: 999px;
  text-shadow: none;
  box-shadow: 0 1px white;
}

pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-end);
  top: auto;
  bottom: .4em;
}html body{font-family:"Helvetica Neue",Helvetica,"Segoe UI",Arial,freesans,sans-serif;font-size:16px;line-height:1.6;color:#333;background-color:#fff;overflow:initial;box-sizing:border-box;word-wrap:break-word}html body>:first-child{margin-top:0}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{line-height:1.2;margin-top:1em;margin-bottom:16px;color:#000}html body h1{font-size:2.25em;font-weight:300;padding-bottom:.3em}html body h2{font-size:1.75em;font-weight:400;padding-bottom:.3em}html body h3{font-size:1.5em;font-weight:500}html body h4{font-size:1.25em;font-weight:600}html body h5{font-size:1.1em;font-weight:600}html body h6{font-size:1em;font-weight:600}html body h1,html body h2,html body h3,html body h4,html body h5{font-weight:600}html body h5{font-size:1em}html body h6{color:#5c5c5c}html body strong{color:#000}html body del{color:#5c5c5c}html body a:not([href]){color:inherit;text-decoration:none}html body a{color:#08c;text-decoration:none}html body a:hover{color:#00a3f5;text-decoration:none}html body img{max-width:100%}html body>p{margin-top:0;margin-bottom:16px;word-wrap:break-word}html body>ul,html body>ol{margin-bottom:16px}html body ul,html body ol{padding-left:2em}html body ul.no-list,html body ol.no-list{padding:0;list-style-type:none}html body ul ul,html body ul ol,html body ol ol,html body ol ul{margin-top:0;margin-bottom:0}html body li{margin-bottom:0}html body li.task-list-item{list-style:none}html body li>p{margin-top:0;margin-bottom:0}html body .task-list-item-checkbox{margin:0 .2em .25em -1.8em;vertical-align:middle}html body .task-list-item-checkbox:hover{cursor:pointer}html body blockquote{margin:16px 0;font-size:inherit;padding:0 15px;color:#5c5c5c;border-left:4px solid #d6d6d6}html body blockquote>:first-child{margin-top:0}html body blockquote>:last-child{margin-bottom:0}html body hr{height:4px;margin:32px 0;background-color:#d6d6d6;border:0 none}html body table{margin:10px 0 15px 0;border-collapse:collapse;border-spacing:0;display:block;width:100%;overflow:auto;word-break:normal;word-break:keep-all}html body table th{font-weight:bold;color:#000}html body table td,html body table th{border:1px solid #d6d6d6;padding:6px 13px}html body dl{padding:0}html body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:bold}html body dl dd{padding:0 16px;margin-bottom:16px}html body code{font-family:Menlo,Monaco,Consolas,'Courier New',monospace;font-size:.85em !important;color:#000;background-color:#f0f0f0;border-radius:3px;padding:.2em 0}html body code::before,html body code::after{letter-spacing:-0.2em;content:"\00a0"}html body pre>code{padding:0;margin:0;font-size:.85em !important;word-break:normal;white-space:pre;background:transparent;border:0}html body .highlight{margin-bottom:16px}html body .highlight pre,html body pre{padding:1em;overflow:auto;font-size:.85em !important;line-height:1.45;border:#d6d6d6;border-radius:3px}html body .highlight pre{margin-bottom:0;word-break:normal}html body pre code,html body pre tt{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}html body pre code:before,html body pre tt:before,html body pre code:after,html body pre tt:after{content:normal}html body p,html body blockquote,html body ul,html body ol,html body dl,html body pre{margin-top:0;margin-bottom:16px}html body kbd{color:#000;border:1px solid #d6d6d6;border-bottom:2px solid #c7c7c7;padding:2px 4px;background-color:#f0f0f0;border-radius:3px}@media print{html body{background-color:#fff}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{color:#000;page-break-after:avoid}html body blockquote{color:#5c5c5c}html body pre{page-break-inside:avoid}html body table{display:table}html body img{display:block;max-width:100%;max-height:100%}html body pre,html body code{word-wrap:break-word;white-space:pre}}.markdown-preview{width:100%;height:100%;box-sizing:border-box}.markdown-preview .pagebreak,.markdown-preview .newpage{page-break-before:always}.markdown-preview pre.line-numbers{position:relative;padding-left:3.8em;counter-reset:linenumber}.markdown-preview pre.line-numbers>code{position:relative}.markdown-preview pre.line-numbers .line-numbers-rows{position:absolute;pointer-events:none;top:1em;font-size:100%;left:0;width:3em;letter-spacing:-1px;border-right:1px solid #999;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.markdown-preview pre.line-numbers .line-numbers-rows>span{pointer-events:none;display:block;counter-increment:linenumber}.markdown-preview pre.line-numbers .line-numbers-rows>span:before{content:counter(linenumber);color:#999;display:block;padding-right:.8em;text-align:right}.markdown-preview .mathjax-exps .MathJax_Display{text-align:center !important}.markdown-preview:not([for="preview"]) .code-chunk .btn-group{display:none}.markdown-preview:not([for="preview"]) .code-chunk .status{display:none}.markdown-preview:not([for="preview"]) .code-chunk .output-div{margin-bottom:16px}.scrollbar-style::-webkit-scrollbar{width:8px}.scrollbar-style::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}.scrollbar-style::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode]){position:relative;width:100%;height:100%;top:0;left:0;margin:0;padding:0;overflow:auto}html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{position:relative;top:0}@media screen and (min-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em calc(50% - 457px + 2em)}}@media screen and (max-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{font-size:14px !important;padding:1em}}@media print{html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{display:none}}html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{position:fixed;bottom:8px;left:8px;font-size:28px;cursor:pointer;color:inherit;z-index:99;width:32px;text-align:center;opacity:.4}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] #sidebar-toc-btn{opacity:1}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc{position:fixed;top:0;left:0;width:300px;height:100%;padding:32px 0 48px 0;font-size:14px;box-shadow:0 0 4px rgba(150,150,150,0.33);box-sizing:border-box;overflow:auto;background-color:inherit}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar{width:8px}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc a{text-decoration:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{padding:0 1.6em;margin-top:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc li{margin-bottom:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{list-style-type:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{left:300px;width:calc(100% -  300px);padding:2em calc(50% - 457px -  150px);margin:0;box-sizing:border-box}@media screen and (max-width:1274px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{width:100%}}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .markdown-preview{left:50%;transform:translateX(-50%)}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .md-sidebar-toc{display:none}
/* Please visit the URL below for more information: */
/*   https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css */

      </style>
    </head>
    <body for="html-export">
      <div class="mume markdown-preview  ">
      <div class="code-chunk" data-id="code-chunk-id-0" data-cmd="toc"><div class="input-div"><div class="btn-group"><div class="run-btn btn"><span>&#x25B6;&#xFE0E;</span></div><div class="run-all-btn btn">all</div></div><div class="status">running...</div></div><div class="output-div"></div></div><ul>
<li><a href="#%E4%B8%80-%E5%9C%A8%E5%AE%89%E8%A3%85caffe%E4%B9%8B%E5%89%8D%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E4%BE%9D%E8%B5%96%E9%A1%B9%E7%9A%84%E5%AE%89%E8%A3%85"> &#x4E00;&#x3001;&#x5728;&#x5B89;&#x88C5;Caffe&#x4E4B;&#x524D;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x4F9D;&#x8D56;&#x9879;&#x7684;&#x5B89;&#x88C5;</a></li>
<li><a href="#%E4%BA%8C-%E4%B8%8B%E8%BD%BDcaffe%E6%BA%90%E7%A0%81%E5%B9%B6%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91"> &#x4E8C;&#x3001;&#x4E0B;&#x8F7D;Caffe&#x6E90;&#x7801;&#x5E76;&#x5BF9;&#x5176;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;</a></li>
<li><a href="#%E4%B8%89-caffe%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF-nvcc-fatal-unsupported-gpu-architecture-compute_60"> &#x4E09;&#x3001;Caffe&#x7F16;&#x8BD1;&#x9519;&#x8BEF; nvcc fatal : Unsupported gpu architecture &apos;compute_60&apos;</a></li>
<li><a href="#%E5%9B%9B-%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF"> &#x56DB;&#x3001;&#x57FA;&#x51C6;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x9519;&#x8BEF;</a></li>
<li><a href="#%E4%BA%94-%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B5%84%E6%96%99"> &#x4E94;&#x3001;&#x6D4B;&#x8BD5;&#x4E0E;&#x8D44;&#x6599;</a></li>
</ul>
<p><strong>&#x8001;&#x6587;&#x7AE0;&#x642C;&#x8FD0;</strong></p>
<blockquote>
<p>&#x6700;&#x8FD1;&#x60F3;&#x5728;Jetson TX1&#x8FD9;&#x4E2A;&#x677F;&#x5B50;&#x4E0A;&#x5B66;&#x4E60;Caffe&#x548C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E00;&#x4E9B;&#x5185;&#x5BB9;&#xFF0C;&#x4E8E;&#x662F;&#x628A;&#x5B89;&#x88C5;Caffe&#x7684;&#x8FC7;&#x7A0B;&#x548C;&#x5176;&#x4E2D;&#x9047;&#x5230;&#x7684;&#x95EE;&#x9898;&#x505A;&#x4E00;&#x4E2A;&#x5B66;&#x4E60;&#x7B14;&#x8BB0;&#x3002;<br>
&#x9996;&#x5148;&#x6B63;&#x5E38;&#x7684;&#x5B89;&#x88C5;&#x53EF;&#x4EE5;&#x53C2;&#x8003;Caffe&#x7684;&#x5B98;&#x7F51;&#x548C;&#x7F51;&#x4E0A;&#x6570;&#x4E0D;&#x6E05;&#x7684;&#x6559;&#x7A0B;&#xFF0C;&#x8FD9;&#x91CC;&#x4E0D;&#x518D;&#x8BB0;&#x5F55;&#x4E86;&#xFF0C;&#x91CD;&#x70B9;&#x8BF4;&#x5B89;&#x88C5;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x95EE;&#x9898;&#x4E0E;&#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x3002;</p>
</blockquote>


<hr>
<h2 class="mume-header" id="%E4%B8%80-%E5%9C%A8%E5%AE%89%E8%A3%85caffe%E4%B9%8B%E5%89%8D%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E4%BE%9D%E8%B5%96%E9%A1%B9%E7%9A%84%E5%AE%89%E8%A3%85">&#x4E00;&#x3001;&#x5728;&#x5B89;&#x88C5;Caffe&#x4E4B;&#x524D;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x4F9D;&#x8D56;&#x9879;&#x7684;&#x5B89;&#x88C5;</h2>

<p>&#x8FD9;&#x91CC;&#x5F88;&#x591A;&#x5730;&#x65B9;&#x90FD;&#x8BB2;&#x5230;&#x4E86;&#xFF0C;&#x9700;&#x8981;&#x5B89;&#x88C5;&#x4E00;&#x4E9B;&#x4F9D;&#x8D56;&#x5E93;&#xFF0C;&#x4E0B;&#x9762;&#x662F;&#x627E;&#x5230;&#x7684;&#x6BD4;&#x8F83;&#x5168;&#x7684;</p>
  <a id="more"></a>
<pre data-role="codeBlock" data-info="bash" class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libprotobuf-dev protobuf-compiler gfortran \
libboost-dev cmake libleveldb-dev libsnappy-dev libopencv-dev\
libboost-thread-dev libboost-system-dev \
libatlas-base-dev libhdf5-serial-dev libgflags-dev \
libgoogle-glog-dev liblmdb-dev gcc-4.7 g++-4.7
</pre><p>&#x4F46;&#x662F;&#x5728;&#x8FD9;&#x5176;&#x4E2D;&#x4E2D;&#x5728;&#x7ED9;JetsonTX1&#x5B89;&#x88C5;libopencv-dev&#x65F6;&#x4F1A;&#x65E0;&#x6CD5;&#x5B89;&#x88C5;&#xFF0C;&#x56E0;&#x4E3A;&#x5B89;&#x88C5;&#x4E86;libopencv4tegra&#xFF0C;&#x8FD9;&#x4E2A;&#x662F;NVDIA&#x5B98;&#x65B9;&#x7ED9;&#x677F;&#x5B50;&#x5DF2;&#x7ECF;&#x88C5;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x4E00;&#x822C;&#x60C5;&#x51B5;&#x4E0B;&#x8FD9;&#x4E2A;&#x5305;&#x4E0D;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x5B89;&#x88C5;&#x76F4;&#x63A5;&#x8DF3;&#x8FC7;&#x65E0;&#x89C6;&#x9519;&#x8BEF;&#x4FE1;&#x606F;&#x5C31;&#x597D;&#x3002;</p>
<hr>
<h2 class="mume-header" id="%E4%BA%8C-%E4%B8%8B%E8%BD%BDcaffe%E6%BA%90%E7%A0%81%E5%B9%B6%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91">&#x4E8C;&#x3001;&#x4E0B;&#x8F7D;Caffe&#x6E90;&#x7801;&#x5E76;&#x5BF9;&#x5176;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;</h2>

<p>&#x8FD9;&#x91CC;&#x5EFA;&#x8BAE;&#x53C2;&#x8003;</p>
<blockquote>
<p><a href="http://blog.csdn.net/mydear_11000/article/details/51968065" target="_blank" rel="noopener">Tegra TX1 &#x5B89;&#x88C5;&#x914D;&#x7F6E; + caffe run</a></p>
</blockquote>
<p>&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x8BB2;&#x5230;&#x9700;&#x8981;&#x4F7F;&#x7528;g++4.7&#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#xFF0C;&#x56E0;&#x4E3A;&#x9ED8;&#x8BA4;&#x4F7F;&#x7528;&#x7684;g++4.8&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x4F1A;&#x53D1;&#x751F;&#x9519;&#x8BEF;&#xFF0C;&#x6211;&#x7B2C;&#x4E00;&#x6B21;&#x5E76;&#x6CA1;&#x6709;&#x770B;&#x5230;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#xFF0C;&#x6240;&#x4EE5;&#x4E5F;&#x7406;&#x6240;&#x5F53;&#x7136;&#x7684;&#x51FA;&#x9519;&#x4E86;&#x3002;</p>
<hr>
<h2 class="mume-header" id="%E4%B8%89-caffe%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF-nvcc-fatal-unsupported-gpu-architecture-compute_60">&#x4E09;&#x3001;Caffe&#x7F16;&#x8BD1;&#x9519;&#x8BEF; nvcc fatal : Unsupported gpu architecture &apos;compute_60&apos;</h2>

<p>caffe&#x7F16;&#x8BD1;&#x65F6;&#x51FA;&#x73B0;&#x9519;&#x8BEF;&#xFF1A;</p>
<pre data-role="codeBlock" data-info="bash" class="language-bash">nvcc fatal <span class="token keyword">:</span> Unsupported gpu architecture <span class="token string">&apos;compute_60&apos;</span>
</pre><p>&#x5728;&#x7F51;&#x4E0A;&#x627E;&#x4E86;&#x5F88;&#x591A;&#x8D44;&#x6599;&#x4E5F;&#x6CA1;&#x6709;&#x76F4;&#x63A5;&#x8BF4;&#x660E;&#x767D;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x5173;&#x4E8E;JetsonTX1&#x7684;&#x8D44;&#x6599;&#x592A;&#x5C11;&#xFF0C;&#x540E;&#x6765;&#x5728;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;</p>
<blockquote>
<p><a href="http://blog.csdn.net/u013657981/article/details/50519123" target="_blank" rel="noopener">&#x3010;matconvnet&#x3011;&#x6545;&#x969C;&#x6392;&#x9664;&#xFF1A;Error using mex nvcc fatal : Unsupported gpu architecture &apos;compute_52&apos;</a></p>
</blockquote>
<p>&#x4E2D;&#x627E;&#x5230;&#x4E86;&#x4E00;&#x4E9B;&#x7AEF;&#x502A;&#xFF0C;&#x5927;&#x6982;&#x5B9A;&#x4F4D;&#x4E86;&#x9519;&#x8BEF;&#x7684;&#x95EE;&#x9898;&#x3002; &#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x8D77;&#x6E90;&#x4E8E;&#x7F16;&#x8BD1;&#x5668;&#x65E0;&#x6CD5;&#x8BC6;&#x522B;&#x7A0B;&#x5E8F;&#x4E2D;&#x7684;&apos;compute_60&apos;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x662F;CUDA&#x7684;nvcc&#xFF0C;&#x4E8E;&#x662F;&#x6211;&#x5C1D;&#x8BD5;&#x53BB;&#x5347;&#x7EA7;CUDA&#x7684;&#x7248;&#x672C;&#xFF0C;&#x611F;&#x89C9;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x4F46;&#x662F;&#x6CA1;&#x6709;&#x627E;&#x5230;JetsonTX1&#x88C5;CUDA7.0&#x4EE5;&#x4E0A;&#x7248;&#x672C;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x4F5C;&#x4E3A;&#x521D;&#x5B66;&#x8005;&#x4E0D;&#x6562;&#x5927;&#x52A8;&#xFF0C;&#x4E8E;&#x662F;&#x53C8;&#x56DE;&#x53BB;&#x7FFB;&#x770B;&#x4E0A;&#x9762;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x3002;&#x60F3;&#x5230;&#x65E2;&#x7136;&#x662F;&#x7F16;&#x8BD1;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x9519;&#x8BEF;&#xFF0C;&#x80AF;&#x5B9A;&#x4E5F;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x53BB;&#x5B9A;&#x4F4D;&#x9519;&#x8BEF;&#x770B;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x95EE;&#x9898;&#x6539;&#x6B63;&#x3002;&#x5728;&#x770B;&#x51FA;&#x9519;&#x6587;&#x4EF6;&#x7684;&#x65F6;&#x5019;&#x7A81;&#x7136;&#x60F3;&#x5230;Caffe&#x7F16;&#x8BD1;&#x65F6;&#x662F;&#x6709;&#x4E00;&#x4E2A;Makefile.config&#x6587;&#x4EF6;&#x7684;&#xFF01;&#xFF01;&#xFF01;&#x7ACB;&#x9A6C;&#x53BB;&#x770B;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x770B;&#x5230;&#x4E86;&#x4E0B;&#x9762;&#x51E0;&#x884C;&#x5185;&#x5BB9;&#xFF1A;</p>
<pre data-role="codeBlock" data-info="bash" class="language-bash"><span class="token comment"># CUDA architecture setting: going with all of them.</span>
<span class="token comment"># For CUDA &lt; 6.0, comment the *_50 through *_61 lines for compatibility.</span>
<span class="token comment"># For CUDA &lt; 8.0, comment the *_60 and *_61 lines for compatibility.</span>
CUDA_ARCH :<span class="token operator">=</span> -gencode arch<span class="token operator">=</span>compute_20,code<span class="token operator">=</span>sm_20 \
-gencode arch<span class="token operator">=</span>compute_20,code<span class="token operator">=</span>sm_21 \
-gencode arch<span class="token operator">=</span>compute_30,code<span class="token operator">=</span>sm_30 \
-gencode arch<span class="token operator">=</span>compute_35,code<span class="token operator">=</span>sm_35 \
-gencode arch<span class="token operator">=</span>compute_50,code<span class="token operator">=</span>sm_50 \
-gencode arch<span class="token operator">=</span>compute_52,code<span class="token operator">=</span>sm_52 \
-gencode arch<span class="token operator">=</span>compute_60,code<span class="token operator">=</span>sm_60 \
-gencode arch<span class="token operator">=</span>compute_61,code<span class="token operator">=</span>sm_61 \
-gencode arch<span class="token operator">=</span>compute_61,code<span class="token operator">=</span>compute_61
</pre><p>&#x7ACB;&#x9A6C;&#x611F;&#x89C9;&#x81EA;&#x5DF1;&#x771F;&#x7684;&#x662F;&#x8822;&#x5230;&#x5BB6;&#x4E86;&#xFF0C;&#x5728;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x4E2D;&#x5199;&#x7684;&#x5982;&#x6B64;&#x6E05;&#x695A;&#x660E;&#x4E86;&#xFF0C;CUDA7.0&#x7248;&#x672C;&#x5C06;&#x6700;&#x540E;&#x4E09;&#x884C;&#x6CE8;&#x91CA;&#x6389;&#xFF0C;Caffe&#x987A;&#x5229;&#x7F16;&#x8BD1;&#x901A;&#x8FC7;&#x3002;</p>
<hr>
<h2 class="mume-header" id="%E5%9B%9B-%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF">&#x56DB;&#x3001;&#x57FA;&#x51C6;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x9519;&#x8BEF;</h2>

<p>&#x672C;&#x6765;&#x5230;&#x4E0A;&#x9762;&#x90A3;&#x91CC;&#x8FD9;&#x7BC7;&#x5E94;&#x8BE5;&#x662F;&#x7ED3;&#x675F;&#x4E86;&#xFF0C;&#x4F46;&#x662F;Caffe&#x6709;&#x6D4B;&#x8BD5;&#x7684;&#x4F8B;&#x5B50;&#x4E8E;&#x662F;&#x51B3;&#x5B9A;&#x8DD1;&#x4E00;&#x4E0B;&#x770B;&#x770B;&#x8BA1;&#x7B97;&#x901F;&#x5EA6;&#x600E;&#x4E48;&#x6837;&#xFF0C;&#x4E5F;&#x9A8C;&#x8BC1;&#x4E00;&#x4E0B;&#x5B89;&#x88C5;&#x662F;&#x5426;&#x786E;&#x5B9E;&#x6210;&#x529F;&#x4E86;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x51FA;&#x73B0;&#x4E86;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x5F53;&#x4F7F;&#x7528;CPU&#x53BB;&#x8DD1;&#x7684;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x987A;&#x5229;&#x8DD1;&#x8D77;&#x6765;&#xFF08;&#x901F;&#x5EA6;&#x4E5F;&#x60E8;&#x4E0D;&#x5FCD;&#x7779;&#xFF0C;&#x4E00;&#x6B21;&#x8FED;&#x4EE3;9000+ms)&#x3002;&#x4F46;&#x662F;&#x5C31;&#x662F;&#x65E0;&#x6CD5;&#x7528;GPU&#x8FDB;&#x884C;&#x8FD0;&#x7B97;&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;&#x4EE5;&#x4E0B;&#x9519;&#x8BEF;&#xFF1A;</p>
<pre data-role="codeBlock" data-info="bash" class="language-bash">Check failed: error <span class="token operator">==</span> cudaSuccess <span class="token punctuation">(</span>8 vs. 0<span class="token punctuation">)</span> invalid device <span class="token keyword">function</span>
</pre><p>&#x77AC;&#x95F4;&#x611F;&#x89C9;&#x6709;&#x70B9;&#x5D29;&#xFF0C;&#x8FC7;&#x7A0B;&#x592A;&#x574E;&#x5777;&#x3002;&#x4E0D;&#x8FC7;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x89E3;&#x51B3;&#x6CA1;&#x6709;&#x82B1;&#x8D39;&#x591A;&#x5C11;&#x65F6;&#x95F4;&#xFF0C;&#x4E0A;&#x7F51;&#x641C;&#x7D22;&#x627E;&#x5230;&#x4E86;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#xFF1A;</p>
<blockquote>
<p><a href="http://blog.csdn.net/cwt19902010/article/details/49201333" target="_blank" rel="noopener">caffe&#x95EE;&#x9898;&#x53CA;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;</a></p>
</blockquote>
<p>&#x5176;&#x4E2D;&#x63D0;&#x5230;&#x4E86;&#x76F8;&#x540C;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x540C;&#x6837;&#x662F;&#x56E0;&#x4E3A;&#x4E0A;&#x9762;&#x90A3;&#x4E00;&#x5757;&#x7684;config&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#x60F3;&#x8D77;&#x6765;&#x5F88;&#x65E9;&#x7684;&#x65F6;&#x5019;&#x770B;&#x5230;NVDIA&#x7684;&#x8BA1;&#x7B97;&#x80FD;&#x529B;&#x7684;&#x4E00;&#x4E2A;&#x8868;&#x683C;&#xFF0C;&#x55EF;&#xFF0C;&#x662F;&#x8FD9;&#x4E2A;&#xFF1A;</p>
<blockquote>
<p><a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener">CUDA GPUs</a></p>
</blockquote>
<p>&#x5728;&#x8FD9;&#x91CC;&#x67E5;&#x5230;Jetson TX1&#x7684;&#x8BA1;&#x7B97;&#x80FD;&#x529B;&#x4E3A;5.3&#x4E8E;&#x662F;&#x5728;&#x4E0A;&#x9762;&#x90A3;&#x5757;&#x5185;&#x5BB9;&#x4E2D;&#x518D;&#x52A0;&#x5165;&#x4E00;&#x884C;&#xFF1A;</p>
<pre data-role="codeBlock" data-info="bash" class="language-bash">-gencode arch<span class="token operator">=</span>compute_53,code<span class="token operator">=</span>sm_53 \
</pre><p>&#x95EE;&#x9898;&#x987A;&#x5229;&#x89E3;&#x51B3;</p>
<hr>
<h2 class="mume-header" id="%E4%BA%94-%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B5%84%E6%96%99">&#x4E94;&#x3001;&#x6D4B;&#x8BD5;&#x4E0E;&#x8D44;&#x6599;</h2>

<p>&#x6700;&#x540E;&#x90FD;&#x88C5;&#x5B8C;&#x4E86;&#xFF0C;&#x5C31;&#x653E;&#x4E00;&#x4E0B;&#x6D4B;&#x8BD5;&#x6700;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x5427;&#x3002;&#x8FD8;&#x53EF;&#x4EE5;&#x54C8;&#x54C8;</p>
<pre data-role="codeBlock" data-info="bash" class="language-bash">Average Forward pass: 175.87 ms.
Average Backward pass: 144.709 ms.
Average Forward-Backward: 321.06 ms.
Total Time: 16053 ms.
</pre><p>&#x7136;&#x540E;&#x8FD9;&#x91CC;Mark&#x4E00;&#x4E0B;&#xFF0C;Caffe&#x8D44;&#x6599;&#x6C47;&#x603B;&#xFF0C;&#x540E;&#x9762;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x770B;&#x7684;</p>
<p><a href="http://blog.csdn.net/langb2014/article/details/51543388" target="_blank" rel="noopener">http://blog.csdn.net/langb2014/article/details/51543388</a></p>
<blockquote>
<p>&#x5410;&#x69FD;&#x4E00;&#x4E0B;&#xFF0C;&#x8FD9;&#x4E2A;&#x6587;&#x7AE0;&#x7684;&#x7F16;&#x8F91;&#x592A;&#x6D88;&#x8017;&#x7CBE;&#x529B;&#x4E86;&#xFF0C;&#x6211;&#x8981;&#x53BB;&#x770B;&#x770B;wordpress&#x80FD;&#x4E0D;&#x80FD;&#x7528;markdown&#x6765;&#x5199;</p>
</blockquote>
<blockquote>
<p>&#x8D5E;&#x7F8E;Markdown&#xFF0C;&#x7B80;&#x76F4;&#x597D;&#x7528;&#xFF0C;&#x73B0;&#x5728;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x5DF2;&#x7ECF;&#x6539;&#x4E3A;&#x4F7F;&#x7528;Sublime3&#xFF0C;Markdown&#x7F16;&#x5199;&#xFF0C;&#x8F6C;&#x4E3A;HTML&#x683C;&#x5F0F;&#x53D1;&#x5E03;&#x7684;&#x4E86;</p>
</blockquote>

      </div>
      <div class="md-sidebar-toc"><ul>
<li><a href="#%E4%B8%80-%E5%9C%A8%E5%AE%89%E8%A3%85caffe%E4%B9%8B%E5%89%8D%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E4%BE%9D%E8%B5%96%E9%A1%B9%E7%9A%84%E5%AE%89%E8%A3%85"> &#x4E00;&#x3001;&#x5728;&#x5B89;&#x88C5;Caffe&#x4E4B;&#x524D;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x4F9D;&#x8D56;&#x9879;&#x7684;&#x5B89;&#x88C5;</a></li>
<li><a href="#%E4%BA%8C-%E4%B8%8B%E8%BD%BDcaffe%E6%BA%90%E7%A0%81%E5%B9%B6%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91"> &#x4E8C;&#x3001;&#x4E0B;&#x8F7D;Caffe&#x6E90;&#x7801;&#x5E76;&#x5BF9;&#x5176;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;</a></li>
<li><a href="#%E4%B8%89-caffe%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF-nvcc-fatal-unsupported-gpu-architecture-compute_60"> &#x4E09;&#x3001;Caffe&#x7F16;&#x8BD1;&#x9519;&#x8BEF; nvcc fatal : Unsupported gpu architecture &apos;compute_60&apos;</a></li>
<li><a href="#%E5%9B%9B-%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF"> &#x56DB;&#x3001;&#x57FA;&#x51C6;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x9519;&#x8BEF;</a></li>
<li><a href="#%E4%BA%94-%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B5%84%E6%96%99"> &#x4E94;&#x3001;&#x6D4B;&#x8BD5;&#x4E0E;&#x8D44;&#x6599;</a></li>
</ul>
</div>
      <a id="sidebar-toc-btn">&#x2261;</a>
    
    
    
    
    
    
    
    
<script>

var sidebarTOCBtn = document.getElementById('sidebar-toc-btn')
sidebarTOCBtn.addEventListener('click', function(event) {
  event.stopPropagation()
  if (document.body.hasAttribute('html-show-sidebar-toc')) {
    document.body.removeAttribute('html-show-sidebar-toc')
  } else {
    document.body.setAttribute('html-show-sidebar-toc', true)
  }
})
</script>
      
  
    </body></html>]]></content>
      <tags>
        <tag>Jetson TX1</tag>
        <tag>Caffe</tag>
      </tags>
  </entry>
</search>
